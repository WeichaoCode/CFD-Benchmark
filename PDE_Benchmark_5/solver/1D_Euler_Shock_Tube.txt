Here's a sample Python code that implements this.

```Python
import numpy as np
import matplotlib.pyplot as plt

def initialize(L, T, nx, nt, rhoL, pL, uL, rhoR, pR, uR, gamma, CFL):
    dx = L / nx
    dt = T / nt
    gamma = 1.4   # heat capacity ratio
    CFL = 0.8     # CFL stability criteria

    # allocate memory
    rho = np.zeros(nx)
    u = np.zeros_like(rho)
    p = np.zeros_like(rho)
    E = np.zeros_like(rho)
    F = np.zeros((3, nx))

    # initial conditions
    rho[:nx//2] = rhoL
    rho[nx//2:] = rhoR
    p[:nx//2] = pL
    p[nx//2:] = pR
    u[:nx//2] = uL
    u[nx//2:] = uR
    
    E = p / ((gamma - 1) * rho) + 0.5 * u ** 2
    F[0, :] = rho * u
    F[1, :] = rho * u ** 2 + p
    F[2, :] = rho * u * (E + p / rho)

    return dx, dt, rho, u, p, E, F

def solve(rho, u, p, E, F, nx, nt, dt, dx, gamma, CFL):
    # allocate predictor and corrector arrays
    U_pred = np.zeros_like(F)
    U_corr = np.zeros((3, nx))
    
    for t in range(nt):
        U_pred[:, :-1] = F[:, :-1] - dt / dx * (F[:, 1:] - F[:, :-1])
        U_corr[:, 1:] = 0.5 * (F[:, 1:] + U_pred[:, 1:] - dt / dx * (U_pred[:, 1:] - U_pred[:, :-1]))
        F = U_corr.copy()

        rho = F[0, :]
        u = F[1, :] / rho
        E = F[2, :] / rho
        p = (gamma - 1) * rho * (E - 0.5 * u ** 2)
    
    return rho, u, p

def plotProfiles(x, rho, u, p):
    plt.figure(figsize=(12, 6))
    
    plt.subplot(131)
    plt.plot(x, rho, 'b')
    plt.title('Density')
    
    plt.subplot(132)
    plt.plot(x, u, 'r')
    plt.title('Velocity')
    
    plt.subplot(133)
    plt.plot(x, p, 'g')
    plt.title('Pressure')
    
    plt.tight_layout()
    plt.show()

def main():
    L = 1.0
    T = 0.14
    nx = 81
    nt = 70
    gamma = 1.4
    CFL = 0.8
    rhoL = 1.0
    uL = 0.0
    pL = 1.0 
    rhoR = 0.125
    uR = 0.0
    pR = 0.1

    dx, dt, rho, u, p, E, F = initialize(L, T, nx, nt, rhoL, rhoR, uL, uR, pL, pR, gamma, CFL)
    x = np.linspace(0, L, nx)
    rho, u, p = solve(rho, u, p, E, F, nx, nt, dt, dx, gamma, CFL)
    plotProfiles(x, rho, u, p)

if __name__ == "__main__":
    main()
```
This program initializes the shock tube problem, solves it using the predictor-corrector MacCormack scheme, and then plots the profiles of density, velocity, and pressure. Make sure you have numpy and matplotlib installed to run it, you can install them using pip:

```pip install numpy matplotlib```