The first step is to import necessary libraries and define key parameters.

```python
import numpy as np
import matplotlib.pyplot as plt

# Define Parameters
L = 2.0   # length of the domain
T = 1.0   # time of simulation
nx = 101  # number of spatial grid points
nt = 200  # number of time steps
c = 1.0   # wave speed
```

Next, we discretize the space and time, ensuring the stability using the CFL condition.

```python
dx = L / (nx - 1)  # spatial grid size
dt = T / (nt - 1)  # time step size

# Check for stability
CFL = c * dt / dx
if CFL >= 1.0:
    print("Warning: The scheme may be unstable")

x = np.linspace(0, L, nx)
```

Set up the initial wave profile.

```python
u0 = np.zeros(nx)
u0[int((.5-.25)/dx):int((.5+.25)/dx)] = 1
```

Now, we apply the finite difference method to propagate the wave.

```python
u = u0.copy()

for n in range(nt):
    un = u.copy()
    # Now apply the difference scheme
    # u[i] = un[i] - c * dt / dx * (un[i] - un[i-1])
    # for i in range(1, nx):
    #     u[i] = un[i] - c * dt / dx * (un[i] - un[i-1])
    
    # Second-order central differences
    for i in range(1, nx-1):
        u[i] = un[i] - c * dt / (2*dx) * (un[i+1] - un[i-1])

# For the wave reaching the boundary, apply the boundary condition u[nx-1] = u[nx-2]
u[nx-1] = u[nx-2]
```

Finally, we visualize the wave propagation.

```python
plt.figure(figsize=(6, 6))
plt.grid(color = 'gray', linestyle = '--', linewidth = 0.5)
plt.plot(x, u0, label="Initial")
plt.plot(x, u, label="Final")
plt.legend()
plt.show()
```

This Python program solves the linear convection equation over the given interval with defined parameters. It shows how the wave propagates over time.