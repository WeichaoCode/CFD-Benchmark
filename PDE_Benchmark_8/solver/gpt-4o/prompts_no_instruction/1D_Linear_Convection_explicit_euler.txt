Below is the Python code to solve the given partial differential equation using the specified numerical method. The code handles both the undamped and damped cases and saves the final solution as a `.npy` file.

```python
import numpy as np

# Parameters
c = 1.0  # Convection speed
epsilon_undamped = 0.0  # Damping factor for undamped case
epsilon_damped = 5e-4  # Damping factor for damped case
x_start, x_end = -5.0, 5.0  # Spatial domain
N_x = 101  # Number of spatial grid points
dx = (x_end - x_start) / (N_x - 1)  # Spatial step size
x = np.linspace(x_start, x_end, N_x)  # Spatial grid

# Initial condition
u_initial = np.exp(-x**2)

# Time step based on CFL condition
CFL = 0.5  # CFL number
dt = CFL * dx / c  # Time step size

# Total time and number of time steps
T_final = 2.0  # Final time
N_t = int(T_final / dt)  # Number of time steps

def solve_pde(epsilon, filename):
    # Initialize solution
    u = u_initial.copy()

    # Time integration using explicit Euler method
    for n in range(N_t):
        # Compute spatial derivatives
        u_x = np.roll(u, -1) - np.roll(u, 1)
        u_xx = np.roll(u, -1) - 2 * u + np.roll(u, 1)

        # Update solution
        u_new = u - (c * dt / (2 * dx)) * u_x + (epsilon * dt / dx**2) * u_xx

        # Apply periodic boundary conditions
        u_new[0] = u_new[-1]
        u = u_new

    # Save the final solution
    np.save(filename, u)

# Solve for both undamped and damped cases
solve_pde(epsilon_undamped, 'solution_undamped.npy')
solve_pde(epsilon_damped, 'solution_damped.npy')
```

### Explanation:
- **Parameters**: The code sets up the parameters for the problem, including the convection speed, damping factors, spatial domain, and grid.
- **Initial Condition**: The initial condition is set as \( u(x,0) = e^{-x^2} \).
- **CFL Condition**: The time step is determined using the CFL condition to ensure stability.
- **Time Integration**: The explicit Euler method is used for time integration, and a second-order central difference scheme is used for spatial derivatives.
- **Periodic Boundary Conditions**: The code applies periodic boundary conditions by setting the first and last grid points equal.
- **Saving the Solution**: The final solution is saved as a `.npy` file for both the undamped and damped cases.