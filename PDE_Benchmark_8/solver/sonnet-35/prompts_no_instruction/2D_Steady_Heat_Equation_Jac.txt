```python
import numpy as np

# Grid parameters
Lx, Ly = 5.0, 4.0
nx, ny = 101, 81
dx, dy = Lx / (nx - 1), Ly / (ny - 1)

# Initialize temperature array
T = np.zeros((ny, nx))

# Apply boundary conditions
T[0, :] = 20.0      # Bottom boundary
T[-1, :] = 0.0      # Top boundary
T[:, 0] = 10.0      # Left boundary
T[:, -1] = 40.0     # Right boundary

# Jacobi iteration parameters
max_iter = 10000
tolerance = 1e-4

# Jacobi iteration
for _ in range(max_iter):
    T_old = T.copy()
    
    # Update interior points using finite difference
    for i in range(1, ny-1):
        for j in range(1, nx-1):
            T[i, j] = 0.25 * (T_old[i+1, j] + T_old[i-1, j] + 
                               T_old[i, j+1] + T_old[i, j-1])
    
    # Check convergence
    if np.max(np.abs(T - T_old)) < tolerance:
        break

# Save solution
np.save('T.npy', T)
```