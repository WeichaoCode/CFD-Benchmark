import numpy as np

# Parameters
L = 0.5                     # length of the domain in meters
T_left = 100.0              # Dirichlet BC at x = 0 [°C]
T_right = 200.0             # Dirichlet BC at x = L [°C]
T_inf = 20.0                # ambient temperature [°C]
k = 1000.0                  # thermal conductivity [W/(m*K)]
h_over_kA = 25.0            # given value for h*P/(k*A) in [m^-2]
# Note: hP/A = h_over_kA * k

# Discretization
N = 51                      # number of nodes (including boundaries)
dx = L / (N - 1)
x = np.linspace(0, L, N)

# Initialize coefficient matrix A and source term b
A = np.zeros((N, N))
b = np.zeros(N)

# Boundary conditions
A[0, 0] = 1.0
b[0] = T_left
A[-1, -1] = 1.0
b[-1] = T_right

# Finite Volume discretization for interior nodes
# The steady state equation in finite volume can be written as:
#   T_{i-1} - (2 + h_over_kA*dx**2)*T_i + T_{i+1} = -h_over_kA*dx**2 * T_inf
for i in range(1, N-1):
    A[i, i-1] = 1.0
    A[i, i]   = -(2.0 + h_over_kA*dx**2)
    A[i, i+1] = 1.0
    b[i] = -h_over_kA*dx**2 * T_inf

# Solve the linear system
temperature = np.linalg.solve(A, b)

# Save the final solution field as a 1D NumPy array in 'temperature.npy'
np.save("temperature.npy", temperature)