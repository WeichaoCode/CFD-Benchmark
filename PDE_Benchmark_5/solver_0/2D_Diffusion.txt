The error message points out that the scheme will be unstable. This is a common problem in CFD, which involves the Courant–Friedrichs–Lewy (CFL) condition. The CFL condition, which is a necessary condition for convergence while solving certain partial differential equations (usually hyperbolic PDEs) numerically, states that the numerical domain of dependence must include the true domain of dependence. 

In other words, the time step (dt) is too large. To ensure stability, it must be that v * dt / dx**2 < 0.5 (and similarly for dy).

Here's a revised version of the Python code that makes sure the CFL condition is honored:

```python
import numpy as np
import matplotlib.pyplot as plt

# 1. Define parameters
Lx, Ly = 1.0, 1.0
nx, ny = 21, 21
nt = 100
v = 0.1
dx = Lx / (nx - 1)
dy = Ly / (ny - 1)
sigma = 0.25
dt = sigma * min(dx, dy)**2 / v

# Make sure dt satisfies the stability criterion
assert v * dt / dx**2 <= 0.5, "Error: Numerical scheme will be unstable"
assert v * dt / dy**2 <= 0.5, "Error: Numerical scheme will be unstable"

# 2. Initialize the grid and the initial condition
x = np.linspace(0, Lx, nx)
y = np.linspace(0, Ly, ny)
u = np.zeros((ny, nx)) 

# Initial condition
u[int(0.5 / dy):int(1 / dy + 1), int(0.5 / dx):int(1 / dx + 1)] = 2  

# 3. Solve the PDE
for t in range(nt): 
    un = u.copy()
    u[1:-1, 1:-1] = un[1:-1, 1:-1] + v * dt / dx**2 * (un[1:-1, 2:] - 2 * un[1:-1, 1:-1] + un[1:-1, :-2]) + \
                    v * dt / dy**2 * (un[2:, 1:-1] - 2 * un[1:-1, 1:-1] + un[:-2, 1:-1])

u[0, :], u[-1, :] = u[1, :], u[-2, :]
u[:, 0], u[:, -1] = u[:, 1], u[:, -2]

# 4. Visualization 
plt.figure(figsize=(8,5))
plt.contourf(x,y,u, cmap='viridis')
plt.colorbar()
plt.show()
```
This code first checks if the CFL condition is fulfilled and, if not, throws an assertion error. Here, dt is calculated using the variability and minimum of the spatial steps (dx and dy) to ensure Δt ≤ σ × min(Δx, Δy)²/ν (σ = 0.25 is the safety factor to avoid overshooting the CFL limit).

Hope this helps!