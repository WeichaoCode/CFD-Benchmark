```python
import numpy as np
from scipy.sparse import diags
from scipy.sparse.linalg import spsolve

# Parameters
H = 2.0
n = 100
rho = 1.0
tilde_nu = 1.0
f_nu1 = 1.0
mu = 1.0
mu_t = rho * tilde_nu * f_nu1
mu_eff = mu + mu_t

# Mesh generation - non-uniform grid clustered near walls
s = np.linspace(0, 1, n)
y = (1 - np.cos(np.pi * s)) / 2 * H

# Compute grid spacings
h = np.diff(y)  # h_i = y_{i+1} - y_i, length n-1

# Number of internal nodes
N = n - 2

# Coefficients for the tridiagonal matrix
a = mu_eff / (h[:-1] * (h[1:] + h[:-1]))  # Lower diagonal (length N-1)
c = mu_eff / (h[1:] * (h[1:] + h[:-1]))   # Upper diagonal (length N-1)
b = -mu_eff * (1/h[:-1] + 1/h[1:]) / (h[1:] + h[:-1])  # Main diagonal (length N)

# Assemble the sparse matrix
diagonals = [a, b, c]
offsets = [-1, 0, 1]
A = diags(diagonals, offsets, shape=(N, N), format='csc')

# Right-hand side
b_rhs = -np.ones(N)

# Solve the linear system
u_interior = spsolve(A, b_rhs)

# Assemble the full solution with boundary conditions
u = np.zeros(n)
u[1:-1] = u_interior

# Save the solution
np.save('u.npy', u)
```