```python
import numpy as np
import matplotlib.pyplot as plt

# Problem parameters
c = 1.0  # convection speed
epsilon = 5e-4  # damping factor
x_start, x_end = -5, 5
t_start, t_end = 0, 10

# Discretization parameters
nx = 200  # spatial points
nt = 1000  # time steps

# Grid setup
dx = (x_end - x_start) / (nx - 1)
dt = (t_end - t_start) / nt
x = np.linspace(x_start, x_end, nx)

# Initialize solution array
u = np.exp(-x**2)  # initial condition

# Numerical scheme (Lax-Wendroff method)
def lax_wendroff_step(u, c, epsilon, dx, dt):
    # Compute fluxes and diffusion
    u_plus = np.roll(u, -1)
    u_minus = np.roll(u, 1)
    
    # Lax-Wendroff flux terms
    flux_term = 0.5 * (c * dt / dx) * (u_plus - u_minus) - \
                0.5 * (c * dt / dx)**2 * (u_plus - 2*u + u_minus)
    
    # Diffusion term
    diff_term = epsilon * (dt / dx**2) * (u_plus - 2*u + u_minus)
    
    # Update with periodic boundary conditions
    return u - c * dt / dx * (u_plus - u_minus) + flux_term + diff_term

# Time integration
for _ in range(nt):
    u = lax_wendroff_step(u, c, epsilon, dx, dt)
    
    # Enforce periodic boundary conditions
    u[0] = u[-2]
    u[-1] = u[1]

# Save final solution
np.save('u.npy', u)
```