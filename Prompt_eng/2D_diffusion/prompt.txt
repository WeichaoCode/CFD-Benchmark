# ---------------------------------------------------------------
# 2D Diffusion Equation prompt generated by GPT-4o
# ---------------------------------------------------------------
# Author: Weichao Li
# Date: 2025/03/01
# ---------------------------------------------------------------

You are an expert in computational fluid dynamics (CFD) and numerical methods. Your task is to generate a **Python solver** for the given PDE using the **Finite Difference Method (FDM)**.

---

### **1️⃣ Problem Definition**
Solve the following **PDE**:

    ∂u/∂t = ν (∂²u/∂x² + ∂²u/∂y²) + f(x, y, t)

where:
- \( u(x, y, t) \) represents temperature.
- \( \nu = 0.05 \) is the diffusion coefficient.
- \( f(x, y, t) \) is a source term derived from the **Manufactured Solution (MMS)**.

### **2️⃣ Manufactured Solution (MMS)**
To validate the solver, use the following exact solution:

    u(x, y, t) = exp(-t) * sin(pi * x) * sin(pi * y)

From this, compute the **source term** \( f(x, y, t) \) by substituting the MMS into the PDE.

### **3️⃣ Discretization Strategy**
- Use the **Finite Difference Method (FDM)** to discretize space and time.
- Choose an **appropriate numerical scheme** for stability:
    - **Explicit (Forward Euler)**
    - **Implicit (Backward Euler, Crank-Nicolson)**
- Ensure **CFL stability condition** is satisfied:
    \( dt ≤ min(dx², dy²) / (4ν) \)

### **4️⃣ Implementation Guidelines**
- Write a **fully functional Python script** using **NumPy and SciPy**.
- Solve the PDE using **appropriate sparse matrix methods** if implicit.
- Implement **Dirichlet boundary conditions from MMS**.
- Compute and visualize:
    1. The **numerical solution**.
    2. The **MMS (exact) solution**.
    3. The **absolute error** \( |u - u_{MMS}| \).

---

### **5️⃣ Step-by-Step Breakdown**
Before generating the final solver, follow this step-by-step approach:

1️⃣ **Step 1**: Compute the **source term** \( f(x, y, t) \) from MMS.
2️⃣ **Step 2**: Discretize the PDE using the **chosen FDM scheme**.
3️⃣ **Step 3**: Construct the **numerical solver**.
4️⃣ **Step 4**: Enforce **boundary and initial conditions**.
5️⃣ **Step 5**: Implement **numerical stability checks**.
6️⃣ **Step 6**: Solve the system and visualize results.

---

### **6️⃣ Output Requirements**
- Return **only the Python code** (do not explain it).
- Ensure the code is **commented for clarity**.

