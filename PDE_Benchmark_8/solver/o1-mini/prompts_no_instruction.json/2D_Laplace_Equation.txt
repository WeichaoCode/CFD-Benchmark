```python
import numpy as np

# Parameters
nx, ny = 31, 31
dx, dy = 2 / (nx - 1), 1 / (ny - 1)
tolerance = 1e-4
max_iterations = 10000

# Initialize potential field
p = np.zeros((ny, nx))

# Create y grid for boundary condition at x=2
y = np.linspace(0, 1, ny)
p[:, -1] = y

# Iterative solver (Gauss-Seidel)
for iteration in range(max_iterations):
    p_old = p.copy()
    
    # Apply Neumann boundary conditions (dp/dy = 0) at y=0 and y=1
    p[0, :] = p[1, :]
    p[-1, :] = p[-2, :]
    
    # Update interior points
    for i in range(1, ny-1):
        for j in range(1, nx-1):
            p[i, j] = 0.25 * (p[i+1, j] + p[i-1, j] + p[i, j+1] + p[i, j-1])
    
    # Apply boundary conditions
    p[:, 0] = 0
    p[:, -1] = y
    
    # Check for convergence
    if np.max(np.abs(p - p_old)) < tolerance:
        break

# Save the final solution
np.save('p.npy', p)
```