```python
import numpy as np

def solve_pde():
    # Domain
    x_start, x_end = 0.0, 2.0
    y_start, y_end = 0.0, 1.0
    Nx, Ny = 100, 50
    dx = (x_end - x_start) / (Nx - 1)
    dy = (y_end - y_start) / (Ny - 1)

    # Initialize potential field
    p = np.zeros((Ny, Nx))

    # Boundary conditions
    # Left boundary (x=0): p=0
    p[:, 0] = 0.0

    # Right boundary (x=2): p=y
    y = np.linspace(y_start, y_end, Ny)
    p[:, -1] = y

    # Neumann boundary conditions (top and bottom): dp/dy = 0
    # This will be handled in the iteration

    # Iterative solver parameters
    tol = 1e-6
    max_iter = 10000
    for _ in range(max_iter):
        p_old = p.copy()

        # Update interior points
        p[1:-1, 1:-1] = 0.25 * (p[1:-1, 2:] + p[1:-1, 0:-2] +
                                  p[2:, 1:-1] + p[0:-2, 1:-1])

        # Neumann boundary conditions
        # Bottom boundary (y=0)
        p[0, 1:-1] = p[1, 1:-1]

        # Top boundary (y=1)
        p[-1, 1:-1] = p[-2, 1:-1]

        # Check for convergence
        if np.max(np.abs(p - p_old)) < tol:
            break

    # Save the final solution
    np.save('p.npy', p)

if __name__ == "__main__":
    solve_pde()
```