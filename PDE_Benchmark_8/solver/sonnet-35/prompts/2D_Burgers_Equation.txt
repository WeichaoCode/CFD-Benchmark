```python
import numpy as np
import scipy.sparse as sp
import scipy.sparse.linalg as spla

# Problem parameters
Lx, Ly = 2.0, 2.0
nu = 0.01
t_start, t_end = 0.0, 0.027
nx, ny = 100, 100
dx, dy = Lx/nx, Ly/ny
dt = 0.0001
nt = int((t_end - t_start)/dt)

# Grid setup
x = np.linspace(0, Lx, nx)
y = np.linspace(0, Ly, ny)
X, Y = np.meshgrid(x, y)

# Initial conditions
u = np.ones((ny, nx)) 
v = np.ones((ny, nx))
u[(X >= 0.5) & (X <= 1.0) & (Y >= 0.5) & (Y <= 1.0)] = 2.0
v[(X >= 0.5) & (X <= 1.0) & (Y >= 0.5) & (Y <= 1.0)] = 2.0

# Time-stepping
def advection_diffusion_2d(u, v, nu, dx, dy, dt):
    # Compute derivatives using central differences
    du_dx = np.zeros_like(u)
    du_dy = np.zeros_like(u)
    dv_dx = np.zeros_like(v)
    dv_dy = np.zeros_like(v)
    d2u_dx2 = np.zeros_like(u)
    d2u_dy2 = np.zeros_like(u)
    d2v_dx2 = np.zeros_like(v)
    d2v_dy2 = np.zeros_like(v)

    # Interior points derivatives
    du_dx[1:-1, 1:-1] = (u[1:-1, 2:] - u[1:-1, :-2]) / (2*dx)
    du_dy[1:-1, 1:-1] = (u[2:, 1:-1] - u[:-2, 1:-1]) / (2*dy)
    dv_dx[1:-1, 1:-1] = (v[1:-1, 2:] - v[1:-1, :-2]) / (2*dx)
    dv_dy[1:-1, 1:-1] = (v[2:, 1:-1] - v[:-2, 1:-1]) / (2*dy)

    # Second derivatives
    d2u_dx2[1:-1, 1:-1] = (u[1:-1, 2:] - 2*u[1:-1, 1:-1] + u[1:-1, :-2]) / (dx**2)
    d2u_dy2[1:-1, 1:-1] = (u[2:, 1:-1] - 2*u[1:-1, 1:-1] + u[:-2, 1:-1]) / (dy**2)
    d2v_dx2[1:-1, 1:-1] = (v[1:-1, 2:] - 2*v[1:-1, 1:-1] + v[1:-1, :-2]) / (dx**2)
    d2v_dy2[1:-1, 1:-1] = (v[2:, 1:-1] - 2*v[1:-1, 1:-1] + v[:-2, 1:-1]) / (dy**2)

    # Compute updates
    u_new = u - dt * (u * du_dx + v * du_dy) + nu * dt * (d2u_dx2 + d2u_dy2)
    v_new = v - dt * (u * dv_dx + v * dv_dy) + nu * dt * (d2v_dx2 + d2v_dy2)

    # Boundary conditions
    u_new[0, :] = 1.0
    u_new[-1, :] = 1.0
    u_new[:, 0] = 1.0
    u_new[:, -1] = 1.0
    v_new[0, :] = 1.0
    v_new[-1, :] = 1.0
    v_new[:, 0] = 1.0
    v_new[:, -1] = 1.0

    return u_new, v_new

# Time integration
for _ in range(nt):
    u, v = advection_diffusion_2d(u, v, nu, dx, dy, dt)

# Save final solutions
np.save('u.npy', u)
np.save('v.npy', v)
```