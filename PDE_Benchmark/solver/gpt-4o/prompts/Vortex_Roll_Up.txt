```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
nx, ny = 128, 128  # Grid points
Lx, Ly = 1.0, 1.0  # Domain size
dx, dy = Lx / nx, Ly / ny
nu = 0.001  # Kinematic viscosity
dt = 0.001  # Time step
nt = 1000  # Number of time steps

# Initialize fields
psi = np.zeros((ny, nx))
omega = np.zeros((ny, nx))

# Initial condition: pair of vortex layers
x = np.linspace(0, Lx, nx, endpoint=False)
y = np.linspace(0, Ly, ny, endpoint=False)
X, Y = np.meshgrid(x, y, indexing='ij')

# Vortex initialization
omega = np.sin(2 * np.pi * X) * np.sin(2 * np.pi * Y)

# Helper functions
def laplacian(f):
    return (np.roll(f, -1, axis=0) - 2 * f + np.roll(f, 1, axis=0)) / dx**2 + \
           (np.roll(f, -1, axis=1) - 2 * f + np.roll(f, 1, axis=1)) / dy**2

def periodic_bc(f):
    f[:, 0] = f[:, -2]
    f[:, -1] = f[:, 1]
    return f

# Time-stepping loop
for t in range(nt):
    # Solve Poisson equation for streamfunction
    for _ in range(50):  # Iterative solver
        psi = (np.roll(psi, -1, axis=0) + np.roll(psi, 1, axis=0) +
               np.roll(psi, -1, axis=1) + np.roll(psi, 1, axis=1) +
               dx**2 * omega) / 4.0
        psi[0, :] = 0  # Dirichlet BC at bottom
        psi[-1, :] = 0  # Dirichlet BC at top
        psi = periodic_bc(psi)

    # Compute velocity field
    u = np.gradient(psi, axis=1) / dy
    v = -np.gradient(psi, axis=0) / dx

    # Update vorticity using the vorticity transport equation
    omega_new = omega.copy()
    omega_new += dt * (-u * np.gradient(omega, axis=1) / dx -
                       v * np.gradient(omega, axis=0) / dy +
                       nu * laplacian(omega))
    
    # Apply periodic boundary conditions
    omega_new = periodic_bc(omega_new)
    
    # Update omega
    omega = omega_new

# Save final results
np.save('psi.npy', psi)
np.save('omega.npy', omega)
```