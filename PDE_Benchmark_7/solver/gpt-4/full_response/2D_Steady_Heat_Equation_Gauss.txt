Here is a Python implementation of the Gauss-Seidel method to solve the given 2D steady heat equation:

```python
import numpy as np
import matplotlib.pyplot as plt

# Define the grid parameters
Lx, Ly = 5.0, 4.0
dx, dy = 0.05, 0.05
nx, ny = int(Lx/dx) + 1, int(Ly/dy) + 1
beta = dx / dy

# Initialize the grid
T = np.zeros((nx, ny))

# Set the boundary conditions
T[:, 0] = 10.0  # Left boundary
T[0, :] = 0.0   # Top boundary
T[:, -1] = 40.0 # Right boundary
T[-1, :] = 20.0 # Bottom boundary

# Define the stopping criterion
epsilon = 1e-6
error = 1.0

# Gauss-Seidel iteration
while error > epsilon:
    T_old = T.copy()
    for i in range(1, nx-1):
        for j in range(1, ny-1):
            T[i, j] = (T[i+1, j] + T[i-1, j] + beta**2 * (T[i, j+1] + T[i, j-1])) / (2 * (1 + beta**2))
    error = np.max(np.abs(T - T_old))

# Save the final temperature field
np.save('temperature.npy', T)

# Plot the temperature field
plt.figure(figsize=(6, 5))
plt.contourf(T.T, cmap='hot')
plt.title('Steady-state temperature distribution')
plt.colorbar(label='Temperature [C]')
plt.xlabel('x')
plt.ylabel('y')
plt.show()
```

This Python script first initializes a grid for the temperature field `T` and sets the boundary conditions. It then performs the Gauss-Seidel iteration until the maximum change in `T` is less than a small threshold `epsilon`. The final temperature field is saved as a `.npy` file and visualized as a contour plot.