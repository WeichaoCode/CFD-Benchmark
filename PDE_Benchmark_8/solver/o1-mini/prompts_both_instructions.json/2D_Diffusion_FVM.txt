```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
mu = 1e-3  # Dynamic viscosity (PaÂ·s)
dP_dz = -3.2  # Pressure gradient (Pa/m)
h = 0.1  # Domain size (m)
nx = ny = 80  # Number of grid points
dx = dy = h / (nx - 1)  # Grid spacing

# Coefficients
a_E = a_W = mu * dy / dx
a_N = a_S = mu * dx / dy
a_P = a_E + a_W + a_N + a_S
S_u = dP_dz * dx * dy

# Initialize velocity field
w = np.zeros((ny, nx))
w_new = np.zeros_like(w)

# Iteration parameters
tolerance = 1e-6
max_iterations = 10000
iteration = 0
diff = tolerance + 1

# Jacobi Iteration
while diff > tolerance and iteration < max_iterations:
    w_new[1:-1, 1:-1] = (a_E * w[1:-1, 2:] +
                          a_W * w[1:-1, :-2] +
                          a_N * w[:-2, 1:-1] +
                          a_S * w[2:, 1:-1] +
                          S_u) / a_P
    diff = np.max(np.abs(w_new - w))
    w[:,:] = w_new
    iteration += 1

# Create grid for plotting
x = np.linspace(0, h, nx)
y = np.linspace(0, h, ny)
X, Y = np.meshgrid(x, y)

# Plot contour
plt.figure(figsize=(8,6))
contour = plt.contourf(X, Y, w, levels=50, cmap='viridis')
plt.colorbar(contour, label='w (m/s)')
plt.xlabel('x (m)')
plt.ylabel('y (m)')
plt.title('Velocity Component w')
plt.show()

# Save the final velocity field
np.save('w.npy', w)
```