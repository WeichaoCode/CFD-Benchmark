```python
import numpy as np

# Parameters
nx, ny = 31, 31
dx = 2 / (nx - 1)
dy = 1 / (ny - 1)
tolerance = 1e-5

# Initialize the potential field
p = np.zeros((ny, nx))

# Boundary conditions
p[:, 0] = 0  # Left boundary
p[:, -1] = np.linspace(0, 1, ny)  # Right boundary

# Iterative solver using the Gauss-Seidel method
def solve_poisson(p, dx, dy, tolerance):
    pn = np.empty_like(p)
    error = 1
    while error > tolerance:
        pn[:] = p[:]
        # Update the potential field
        p[1:-1, 1:-1] = ((pn[1:-1, 2:] + pn[1:-1, :-2]) * dy**2 +
                         (pn[2:, 1:-1] + pn[:-2, 1:-1]) * dx**2) / (2 * (dx**2 + dy**2))
        
        # Neumann boundary conditions (top and bottom)
        p[0, :] = p[1, :]  # Bottom boundary
        p[-1, :] = p[-2, :]  # Top boundary
        
        # Reapply Dirichlet boundary conditions
        p[:, 0] = 0  # Left boundary
        p[:, -1] = np.linspace(0, 1, ny)  # Right boundary
        
        # Calculate the error
        error = np.linalg.norm(p - pn, ord=np.inf)
    
    return p

# Solve the Poisson equation
p = solve_poisson(p, dx, dy, tolerance)

# Save the final solution
save_values = ['p']
np.save('p.npy', p)
```