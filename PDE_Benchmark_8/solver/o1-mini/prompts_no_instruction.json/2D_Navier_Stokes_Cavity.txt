```python
import numpy as np

# Parameters
nx, ny = 51, 51
nt = 500
dx = 2 / (nx - 1)
dy = 2 / (ny - 1)
dt = 0.001
rho = 1
nu = 0.1
beta = dx / dy
tol = 1e-4

# Initialize variables
u = np.zeros((ny, nx))
v = np.zeros((ny, nx))
p = np.zeros((ny, nx))
un = np.zeros_like(u)
vn = np.zeros_like(v)
pn = np.zeros_like(p)

# Function to build pressure Poisson equation
def build_pressure_poisson(p, dx, dy, rho, u, v):
    pn = np.empty_like(p)
    pn[:] = p
    return pn

# Time-stepping loop
for n in range(nt):
    un = u.copy()
    vn = v.copy()
    
    # Compute mass flux
    b = (rho * (1/dt * 
         ((un[1:-1, 2:] - un[1:-1, 0:-2]) / (2*dx) + 
          (vn[2:, 1:-1] - vn[0:-2, 1:-1]) / (2*dy)) -
         ((un[1:-1, 2:] - un[1:-1, 0:-2]) / (2*dx))**2 -
         2 * ((un[2:,1:-1] - un[0:-2,1:-1]) / (2*dy) *
              (vn[1:-1,2:] - vn[1:-1,0:-2]) / (2*dx)) -
         ((vn[2:,1:-1] - vn[0:-2,1:-1]) / (2*dy))**2))
    
    # Pressure Poisson equation
    for _ in range(50):
        pn = p.copy()
        p[1:-1,1:-1] = (((pn[1:-1,2:] + pn[1:-1,0:-2]) * dy**2 +
                         (pn[2:,1:-1] + pn[0:-2,1:-1]) * dx**2) -
                        b * dx**2 * dy**2) / (2 * (dx**2 + dy**2))
        
        # Boundary conditions for pressure
        p[:, -1] = p[:, -2]  # dp/dx = 0 at x=2
        p[:, 0] = p[:, 1]    # dp/dx = 0 at x=0
        p[-1, :] = 0         # p = 0 at y=2
        p[0, :] = p[1, :]    # dp/dy = 0 at y=0
        
        if np.allclose(p, pn, atol=tol):
            break
    
    # Update velocity fields
    u[1:-1,1:-1] = (un[1:-1,1:-1] -
                    un[1:-1,1:-1] * dt / dx * (un[1:-1,1:-1] - un[1:-1,0:-2]) -
                    vn[1:-1,1:-1] * dt / dy * (un[1:-1,1:-1] - un[0:-2,1:-1]) -
                    dt / (2 * rho * dx) * (p[1:-1,2:] - p[1:-1,0:-2]) +
                    nu * (dt / dx**2 * (un[1:-1,2:] - 2 * un[1:-1,1:-1] + un[1:-1,0:-2]) +
                          dt / dy**2 * (un[2:,1:-1] - 2 * un[1:-1,1:-1] + un[0:-2,1:-1])))
    
    v[1:-1,1:-1] = (vn[1:-1,1:-1] -
                    un[1:-1,1:-1] * dt / dx * (vn[1:-1,1:-1] - vn[1:-1,0:-2]) -
                    vn[1:-1,1:-1] * dt / dy * (vn[1:-1,1:-1] - vn[0:-2,1:-1]) -
                    dt / (2 * rho * dy) * (p[2:,1:-1] - p[0:-2,1:-1]) +
                    nu * (dt / dx**2 * (vn[1:-1,2:] - 2 * vn[1:-1,1:-1] + vn[1:-1,0:-2]) +
                          dt / dy**2 * (vn[2:,1:-1] - 2 * vn[1:-1,1:-1] + vn[0:-2,1:-1])))
    
    # Boundary conditions for velocity
    u[0, :] = 0
    u[:, 0] = 0
    u[:, -1] = 0
    u[-1, :] = 1  # Lid-driven top
    v[0, :] = 0
    v[-1, :] = 0
    v[:, 0] = 0
    v[:, -1] = 0

# Save the final solutions
np.save('u.npy', u)
np.save('v.npy', v)
np.save('p.npy', p)
```