```python
import numpy as np

# Parameters
mu = 1e-3  # dynamic viscosity (PaÂ·s)
dPdz = -3.2  # pressure gradient (Pa/m)
h = 0.1  # domain height (m)
n_x = n_y = 80  # number of grid points
dx = dy = h / (n_x - 1)  # grid spacing

# Initialize the velocity field
w = np.zeros((n_x, n_y))

# Finite Volume Method setup
tolerance = 1e-6
max_iterations = 10000

# Coefficients for the FVM
aP = np.ones((n_x, n_y)) * 4 * mu / (dx * dy)
aE = np.ones((n_x, n_y)) * mu / dx**2
aW = np.ones((n_x, n_y)) * mu / dx**2
aN = np.ones((n_x, n_y)) * mu / dy**2
aS = np.ones((n_x, n_y)) * mu / dy**2
b = np.ones((n_x, n_y)) * -dPdz * dx * dy

# Iterative solver (Gauss-Seidel)
for iteration in range(max_iterations):
    w_old = w.copy()
    for i in range(1, n_x - 1):
        for j in range(1, n_y - 1):
            w[i, j] = (aE[i, j] * w[i + 1, j] +
                       aW[i, j] * w[i - 1, j] +
                       aN[i, j] * w[i, j + 1] +
                       aS[i, j] * w[i, j - 1] +
                       b[i, j]) / aP[i, j]
    
    # Check for convergence
    if np.linalg.norm(w - w_old, ord=np.inf) < tolerance:
        break

# Save the final solution
save_values = ['w']
np.save('w.npy', w)
```