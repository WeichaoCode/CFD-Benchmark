The problem you're asking to solve seems straightforward enough, although it's a bit complex to show the complete Python code here. Here is a skeleton for how you can start the coding process.

First, start by importing the necessary libraries.

```python
import numpy as np
import matplotlib.pyplot as plt
```
Second, define the constants, parameters, and functions your program will use.

```python
# Constants and parameters
alpha = 0.5
Q_0 = 200
sigma = 0.1
L = 1
T = 0

# Set up grid
N = 100 # number of grid points
x = np.linspace(-L, L, N)
y = np.linspace(-L, L, N)
dx = x[1] - x[0] # grid size
dy = y[1] - y[0]

# Source term function
def q(x, y):
    return Q_0 * np.exp(- (x**2 + y**2) / (2*sigma**2))

# Initial condition
T = np.zeros((N, N)) 
```
Now, you need to implement explicit and implicit time integration to solve the discretized equation.

```python
# Explicit method
for t in range(N):
    T_new = T + dt*alpha*(np.roll(T, 1, axis=0) + np.roll(T, -1, axis=0) + np.roll(T, 1, axis=1) + np.roll(T, -1, axis=1) - 4*T) + dt*q(x,y)
    T = T_new
```

```python
# Implicit method
# Here you will need a solver for linear systems like np.linalg.solve or scipy.sparse.linalg.spsolve

from numpy.linalg import solve
A = # Fill this space with your coefficient matrix
b = # Fill this space with your y vector
T_new = solve(A,b)
```

Now, do iterations over time until the solution reaches steady state or a final time. Visualize the temperature evolution over time with contour plots or heatmaps.

```python
# Plotting
plt.figure()
plt.imshow(T, extent=[-L, L, -L, L], origin='lower')
plt.show()
```

Remember to compare the solutions obtained with explicit and implicit methods.

It's not straightforward to write a complete code without knowing specifics, but this is a general structure of the problem. You may also need to adjust some parts according to the need for your problem.