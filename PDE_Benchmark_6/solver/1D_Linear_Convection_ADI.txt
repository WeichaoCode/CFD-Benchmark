Sure, below is a Python implementation using the ADI method for solving the 1D linear convection equation with diffusion:

```python
import numpy as np
import matplotlib.pyplot as plt
from scipy.sparse.linalg import spsolve
from scipy.sparse import diags

# solvability constants
c = 1.0
epsilon_values = [0, 5e-4]
x_min, x_max = -5, 5

# grid parameters
N = 100
x = np.linspace(x_min, x_max, N)
dx = x[1] - x[0]
dt = (x_max - x_min) / (10 * N)

# initial condition
u0 = np.exp(-x**2)

# main function to implement ADI method
def ADI_method(u0, epsilon, c, dx, dt, N):
    # matrix for the x-step
    r = epsilon * dt/(2*dx**2)
    main_diag_x = (1 + 2*r) * np.ones(N)
    off_diag_x = -r * np.ones(N-1)

    # matrices for the t-step
    main_diag_t = (1 + 2*r) * np.ones(N)
    off_diag_t = -r * np.ones(N-1)

    # creating the sparse matrix
    A_x = diags([main_diag_x, off_diag_x, off_diag_x], [0, -1, 1])
    A_t = diags([main_diag_t, off_diag_t, off_diag_t], [0, -1, 1])

    u = np.copy(u0)
    u_new = np.empty_like(u0)

    for t in np.arange(0, 1, dt):
        # first half step
        F_x = np.dot(A_x.toarray(), u)
        u_half = spsolve(A_t, F_x)

        # second half step
        F_t = np.dot(A_t.toarray(), u_half)
        u_new = spsolve(A_x, F_t)

        u = np.copy(u_new)

    return u

# apply the ADI method for the two cases
for epsilon in epsilon_values:
    u = ADI_method(u0, epsilon, c, dx, dt, N)
    plt.plot(x, u, label=f"epsilon={epsilon}")
    np.save(f"solution_epsilon_{epsilon}.npy", u)

plt.legend()
plt.show()
```
In this code, the SciPy sparse linear equations solver `spsolve` is used to solve the systems, and the initial condition is set to \(e^{-x^2}\). The results are plotted for two cases: when \(\epsilon = 0\) (no damping) and when \(\epsilon = 5 \times 10^{-4}\) (with damping). The solutions are saved in NumPy binary format `.npy` using `np.save`.