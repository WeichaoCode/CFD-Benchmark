Certainly, here is a sample implementation of the 2D Laplace solver in Python:

```python
import numpy as np
import matplotlib.pyplot as plt

# Definitions:
Lx, Ly = 1.0, 1.0  # lengths (m)
nx, ny = 41, 41  # number of points
dx, dy = Lx / (nx - 1), Ly / (ny - 1)  # grid spacings

# Initialize grid
p = np.zeros((ny, nx))  

# Set boundary conditions
p[:, 0] = 0  # p = 0 @ x = 0 
p[:, -1] = dy * np.arange(ny)  # p = y @ x = Lx
p[0, :] = p[-1, :]  # dp/dy = 0 @ y = 0, Ly

def laplace_2d(p, dx, dy, l1norm_target):
    p_old = np.empty_like(p)
    l1norm = 1 + l1norm_target
    while l1norm > l1norm_target:
        p_old = p.copy()
        p[1:-1, 1:-1] = ((dy**2 * (p_old[1:-1, 2:] + p_old[1:-1, 0:-2]) +
                      dx**2 * (p_old[2:, 1:-1] + p_old[0:-2, 1:-1])) /
                      (2 * (dx**2 + dy**2)))
        l1norm = (np.sum(np.abs(p[:]) - np.abs(p_old[:])) /
                np.sum(np.abs(p_old[:])))

    return p

# Solve:
p = laplace_2d(p, dx, dy, 1e-4)

# Plot:
x = np.linspace(0, Lx, nx)
y = np.linspace(0, Ly, ny)
X, Y = np.meshgrid(x, y)
plt.figure(figsize=(8,8))
plt.contourf(X, Y, p)
plt.xlabel('X')
plt.ylabel('Y')
plt.colorbar()
plt.title('Contour plot of 2D Laplace Equation')
```

This program uses the functions `np.zeros`, `np.copy`, `np.sum`, `np.abs`, etc., to create arrays of required shapes, copy arrays and perform calculations on arrays, respectively. These are basic functionalities provided by NumPy. It also uses Matplotlib's `contourf` function to draw contour plots.

Remember to install necessary libraries if they are not available in your Python environment.

```sh
pip install numpy matplotlib
```

This is a basic example and there are many ways you could refine and optimize this code. You could also swap out the boundary conditions or initial solution for something else to simulate a different scenario. For example, you could start with a non-zero initial solution, or set different boundary conditions.