```python
import numpy as np
import matplotlib.pyplot as plt

# Problem Parameters
Lx = 10.0  # Domain length
Nx = 101   # Number of spatial points
epsilon = 5e-4  # Damping factor
c = 1.0    # Convection speed
T = 2.0    # Total simulation time

# Grid Setup
x = np.linspace(-5, 5, Nx)
dx = x[1] - x[0]

# Time Step Calculation (CFL condition)
dt = 0.5 * dx / abs(c)
Nt = int(T / dt)

# Initialize Solution Array
u = np.zeros(Nx)

# Initial Condition
u = np.exp(-x**2)

# Predictor-Corrector Method
for n in range(Nt):
    # Predictor Step (Forward Euler)
    u_pred = np.zeros(Nx)
    for i in range(1, Nx-1):
        u_pred[i] = u[i] - dt * (c * (u[i+1] - u[i-1])/(2*dx) - 
                                  epsilon * (u[i+1] - 2*u[i] + u[i-1])/dx**2)
    
    # Periodic Boundary Conditions
    u_pred[0] = u_pred[-2]
    u_pred[-1] = u_pred[1]
    
    # Corrector Step (Averaged)
    for i in range(1, Nx-1):
        u[i] = 0.5 * (u[i] + u_pred[i] - 
                      dt * (c * (u_pred[i+1] - u_pred[i-1])/(2*dx) - 
                            epsilon * (u_pred[i+1] - 2*u_pred[i] + u_pred[i-1])/dx**2))
    
    # Periodic Boundary Conditions
    u[0] = u[-2]
    u[-1] = u[1]

# Save Final Solution
np.save('u.npy', u)
```