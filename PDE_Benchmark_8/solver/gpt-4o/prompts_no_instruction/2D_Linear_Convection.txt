```python
import numpy as np

# Parameters
c = 1.0  # Convection speed
nx = ny = 81  # Number of grid points
dx = dy = 2.0 / (nx - 1)  # Grid spacing
sigma = 0.2  # CFL number
dt = sigma * min(dx, dy) / c  # Time step size
nt = 100  # Number of time steps

# Create the grid
x = np.linspace(0, 2, nx)
y = np.linspace(0, 2, ny)
u = np.ones((ny, nx))  # Initialize u to 1 everywhere

# Apply initial conditions
u[(y >= 0.5) & (y <= 1.0)][:, (x >= 0.5) & (x <= 1.0)] = 2

# Time-stepping loop
for n in range(nt):
    un = u.copy()
    # Update u using upwind scheme
    u[1:, 1:] = (un[1:, 1:] - 
                 c * dt / dx * (un[1:, 1:] - un[1:, :-1]) -
                 c * dt / dy * (un[1:, 1:] - un[:-1, 1:]))
    
    # Apply Dirichlet boundary conditions
    u[0, :] = 1  # y = 0
    u[-1, :] = 1  # y = 2
    u[:, 0] = 1  # x = 0
    u[:, -1] = 1  # x = 2

# Save the final solution
np.save('u.npy', u)
```

This code sets up and solves the given PDE using a finite difference method with specified initial and boundary conditions. The final solution is saved as a 2D NumPy array in a file named `u.npy`.