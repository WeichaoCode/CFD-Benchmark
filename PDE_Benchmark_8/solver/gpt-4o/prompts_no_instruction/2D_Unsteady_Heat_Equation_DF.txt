```python
import numpy as np

# Parameters
alpha = 0.01  # Thermal diffusivity
Q0 = 200.0  # Source term coefficient
sigma = 0.1  # Source term spread
nx, ny = 41, 41  # Grid resolution
x_min, x_max = -1.0, 1.0
y_min, y_max = -1.0, 1.0
t_max = 3.0  # Maximum time
r = 0.25  # Stability parameter for DuFort-Frankel

# Derived parameters
dx = (x_max - x_min) / (nx - 1)
dy = (y_max - y_min) / (ny - 1)
dt = r * dx**2 / alpha

# Create grid
x = np.linspace(x_min, x_max, nx)
y = np.linspace(y_min, y_max, ny)
X, Y = np.meshgrid(x, y)

# Initial condition
T = np.zeros((ny, nx))
T_new = np.zeros((ny, nx))
T_old = np.zeros((ny, nx))

# Time-stepping loop
t = 0.0
while t < t_max:
    # Update source term
    q = Q0 * np.exp(-(X**2 + Y**2) / (2 * sigma**2))
    
    # DuFort-Frankel update
    T_new[1:-1, 1:-1] = ((1 - 2 * r) * T_old[1:-1, 1:-1] +
                         2 * r * (T[1:-1, 2:] + T[1:-1, :-2] + T[2:, 1:-1] + T[:-2, 1:-1]) +
                         2 * dt * q[1:-1, 1:-1]) / (1 + 2 * r)
    
    # Apply boundary conditions (Dirichlet)
    T_new[0, :] = 0
    T_new[-1, :] = 0
    T_new[:, 0] = 0
    T_new[:, -1] = 0
    
    # Update time and arrays
    T_old, T = T, T_new
    t += dt

# Save the final temperature field
np.save('T.npy', T)
```

This code solves the given 2D heat equation using the DuFort-Frankel method and saves the final temperature field `T` at the last time step in a `.npy` file. The boundary conditions are applied at each time step, and the source term is updated accordingly. The grid and time step are set based on the provided parameters, ensuring stability with the chosen `r` value.