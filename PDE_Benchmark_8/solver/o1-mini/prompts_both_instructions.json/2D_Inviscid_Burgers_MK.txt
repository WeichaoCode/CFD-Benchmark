```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
nx = ny = 151
x = np.linspace(0, 2, nx)
y = np.linspace(0, 2, ny)
dx = 2 / (nx - 1)
dy = 2 / (ny - 1)
nt = 300
sigma = 0.2
dt = sigma * min(dx, dy) / 2

# Initialize velocity fields
u = np.ones((ny, nx))
v = np.ones((ny, nx))

# Apply initial conditions: u = v = 2 in the center square
u_initial = 2
v_initial = 2
x_center = np.where((x >= 0.5) & (x <=1))
y_center = np.where((y >= 0.5) & (y <=1))
u[np.ix_(y_center[0], x_center[0])] = u_initial
v[np.ix_(y_center[0], x_center[0])] = v_initial

for _ in range(nt):
    # Predictor step
    u_star = u.copy()
    v_star = v.copy()
    u_star[1:-1,1:-1] = u[1:-1,1:-1] - dt * (
        u[1:-1,1:-1] * (u[1:-1,1:-1] - u[1:-1,0:-2]) / dx +
        v[1:-1,1:-1] * (u[1:-1,1:-1] - u[0:-2,1:-1]) / dy
    )
    v_star[1:-1,1:-1] = v[1:-1,1:-1] - dt * (
        u[1:-1,1:-1] * (v[1:-1,1:-1] - v[1:-1,0:-2]) / dx +
        v[1:-1,1:-1] * (v[1:-1,1:-1] - v[0:-2,1:-1]) / dy
    )
    
    # Apply boundary conditions to predictor step
    u_star[0,:] = 1
    u_star[-1,:] = 1
    u_star[:,0] = 1
    u_star[:,-1] = 1
    v_star[0,:] = 1
    v_star[-1,:] = 1
    v_star[:,0] = 1
    v_star[:,-1] = 1
    
    # Corrector step for u
    dudx_star = (u_star[1:-1,2:] - u_star[1:-1,1:-1]) / dx
    dudy_star = (u_star[2:,1:-1] - u_star[1:-1,1:-1]) / dy
    u_new = 0.5 * (u[1:-1,1:-1] + u_star[1:-1,1:-1] - dt * (u_star[1:-1,1:-1] * dudx_star + v_star[1:-1,1:-1] * dudy_star))
    
    # Corrector step for v
    dvdx_star = (v_star[1:-1,2:] - v_star[1:-1,1:-1]) / dx
    dvdy_star = (v_star[2:,1:-1] - v_star[1:-1,1:-1]) / dy
    v_new = 0.5 * (v[1:-1,1:-1] + v_star[1:-1,1:-1] - dt * (u_star[1:-1,1:-1] * dvdx_star + v_star[1:-1,1:-1] * dvdy_star))
    
    # Update fields
    u[1:-1,1:-1] = u_new
    v[1:-1,1:-1] = v_new
    
    # Apply boundary conditions to corrected step
    u[0,:] = 1
    u[-1,:] = 1
    u[:,0] = 1
    u[:,-1] = 1
    v[0,:] = 1
    v[-1,:] = 1
    v[:,0] = 1
    v[:,-1] = 1

# Visualization
X, Y = np.meshgrid(x, y)
plt.quiver(X, Y, u, v)
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Final Velocity Field')
plt.show()

# Save the final solution
np.save('u.npy', u)
np.save('v.npy', v)
```