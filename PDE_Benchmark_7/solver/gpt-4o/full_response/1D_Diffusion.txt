```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
nx = 41
nt = 20
nu = 0.3
sigma = 0.2

# Spatial discretization
dx = 2 / (nx - 1)
x = np.linspace(0, 2, nx)

# Temporal discretization
dt = sigma * dx**2 / nu

# Initial condition
u = np.ones(nx)
u[int(0.5 / dx):int(1 / dx + 1)] = 2

# Function to solve the 1D diffusion equation using FDM
def diffusion_1d(u, nt, dt, dx, nu):
    un = np.zeros(nx)  # Temporary array to store new values
    for n in range(nt):
        un = u.copy()
        for i in range(1, nx - 1):
            u[i] = un[i] + nu * dt / dx**2 * (un[i + 1] - 2 * un[i] + un[i - 1])
        
        # Apply Dirichlet boundary conditions
        u[0] = 1
        u[-1] = 0
    return u

# Solve the diffusion equation
u_final = diffusion_1d(u, nt, dt, dx, nu)

# Visualizing the evolution of the solution
def plot_solution(x, u_initial, u_final):
    plt.figure(figsize=(10, 6))
    plt.plot(x, u_initial, label='Initial Condition', color='blue')
    plt.plot(x, u_final, label=f'Solution at t={nt*dt:.2f}', color='red')
    plt.xlabel('Spatial coordinate x')
    plt.ylabel('Quantity u')
    plt.title('1D Diffusion Equation Solution')
    plt.legend()
    plt.grid(True)
    plt.show()

# Initial condition before solving
u_initial = np.ones(nx)
u_initial[int(0.5 / dx):int(1 / dx + 1)] = 2

# Plotting the results
plot_solution(x, u_initial, u_final)

# Save the final solution to a .npy file
np.save('diffusion_1d_solution.npy', u_final)
```

### Explanation:

1. **Parameters and Discretization**: 
   - We define the spatial grid with `nx=41` points and calculate the spatial step size `dx`.
   - The time step `dt` is calculated using the stability condition which involves the `sigma` and the diffusion coefficient `nu`.

2. **Initial Conditions**:
   - The initial concentration `u` is set such that the region from \( x = 0.5 \) to \( x = 1 \) is initialized to 2 and 1 elsewhere.

3. **Solution Update**:
   - The function `diffusion_1d` implements the finite difference update for the diffusion equation.
   - Dirichlet boundary conditions are applied at each time step to ensure \( u(0) = 1 \) and \( u(1) = 0 \).

4. **Visualization**:
   - A function `plot_solution` is used to visualize both the initial and the final state of the diffusion process.

5. **Output**:
   - The final state of the diffusion field is saved as a `.npy` file for subsequent analysis or validation.