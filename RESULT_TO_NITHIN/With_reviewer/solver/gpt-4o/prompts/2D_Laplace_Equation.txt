```python
import numpy as np

# Domain parameters
Lx, Ly = 2.0, 1.0
nx, ny = 101, 51
dx, dy = Lx / (nx - 1), Ly / (ny - 1)

# Create grid
x = np.linspace(0, Lx, nx)
y = np.linspace(0, Ly, ny)

# Initialize potential field
p = np.zeros((ny, nx))

# Tolerance and maximum iterations for convergence
tolerance = 1e-5
max_iter = 10000

# Iterative solver using Gauss-Seidel method
for it in range(max_iter):
    p_old = p.copy()
    
    # Update interior points
    for j in range(1, ny-1):
        for i in range(1, nx-1):
            p[j, i] = 0.5 * ((p[j, i+1] + p[j, i-1]) / dx**2 +
                             (p[j+1, i] + p[j-1, i]) / dy**2) / (1/dx**2 + 1/dy**2)
    
    # Apply boundary conditions
    p[:, 0] = 0  # Left boundary
    p[:, -1] = y  # Right boundary
    p[0, :] = p[1, :]  # Bottom boundary (Neumann)
    p[-1, :] = p[-2, :]  # Top boundary (Neumann)
    
    # Check for convergence
    if np.linalg.norm(p - p_old, ord=np.inf) < tolerance:
        break

# Save the final solution
np.save('p.npy', p)
```