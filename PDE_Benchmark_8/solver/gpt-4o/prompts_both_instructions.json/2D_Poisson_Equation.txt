Below is the Python code to solve the given 2D Poisson equation using the finite difference method with the specified boundary conditions and source term. The code uses the Jacobi iterative method to find the steady-state solution and saves the final pressure field to a `.npy` file.

```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
Lx, Ly = 2.0, 1.0
nx, ny = 50, 50
dx, dy = Lx / (nx - 1), Ly / (ny - 1)
tolerance = 1e-4

# Initialize p and b
p = np.zeros((ny, nx))
b = np.zeros((ny, nx))

# Define source term b
b[int(ny / 4), int(nx / 4)] = 100
b[int(3 * ny / 4), int(3 * nx / 4)] = -100

# Iterative solver (Jacobi method)
def solve_poisson(p, b, dx, dy, tolerance):
    pn = np.empty_like(p)
    diff = tolerance + 1  # Initialize difference
    while diff > tolerance:
        pn[:] = p[:]
        p[1:-1, 1:-1] = ((pn[1:-1, 2:] + pn[1:-1, :-2]) * dy**2 +
                         (pn[2:, 1:-1] + pn[:-2, 1:-1]) * dx**2 -
                         b[1:-1, 1:-1] * dx**2 * dy**2) / (2 * (dx**2 + dy**2))
        
        # Apply Dirichlet boundary conditions
        p[:, 0] = 0
        p[:, -1] = 0
        p[0, :] = 0
        p[-1, :] = 0
        
        # Calculate the difference for convergence
        diff = np.linalg.norm(p - pn, ord=np.inf)
    
    return p

# Solve the Poisson equation
p_final = solve_poisson(p, b, dx, dy, tolerance)

# Save the final pressure field to a .npy file
np.save('pressure_field.npy', p_final)

# Visualize the result
plt.figure(figsize=(8, 4))
plt.contourf(np.linspace(0, Lx, nx), np.linspace(0, Ly, ny), p_final, 20, cmap='viridis')
plt.colorbar(label='Pressure')
plt.title('Pressure Field')
plt.xlabel('x')
plt.ylabel('y')
plt.show()
```

### Explanation:
1. **Initialization**: The pressure field `p` and source term `b` are initialized. The source term is set according to the problem statement.
2. **Jacobi Iterative Method**: The function `solve_poisson` iteratively updates the pressure field using the Jacobi method until the change between iterations is below the specified tolerance.
3. **Boundary Conditions**: Dirichlet boundary conditions are applied at each iteration.
4. **Saving the Result**: The final pressure field is saved to a `.npy` file.
5. **Visualization**: A contour plot is generated to visualize the pressure field.

This code will solve the 2D Poisson equation and provide a visual representation of the pressure field influenced by the source terms.