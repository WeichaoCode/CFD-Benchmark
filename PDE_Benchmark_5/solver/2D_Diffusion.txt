Below is an example of how you might implement this in Python:

```python
import numpy as np
import matplotlib.pyplot as plt

# 1. Define parameters
Lx, Ly = 2.0, 2.0
T = 1.0
nx, ny = 100, 100
nt = 500
nu = 0.1
dx = Lx / (nx - 1)
dy = Ly / (ny - 1)
dt = dx * dy / (2 * nu * (dx**2 + dy**2))

# 2. Discretize space and time 
x_values = np.linspace(0, Lx, nx)
y_values = np.linspace(0, Ly, ny)
u = np.empty((nt, nx, ny))

# 3. Initialize the field with an initial condition
u_initial = np.empty((nx, ny))

for i in range(nx):
    for j in range(ny):
        if ((x_values[i] - Lx/4)**2 + (y_values[j] - Ly/4)**2) <= (min(Lx, Ly)/4)**2:
            u_initial[i,j] = 1.0
        else:
            u_initial[i,j] = 0.0

u.fill(0)
u[0] = u_initial

# 4. Iterate using the finite difference scheme
for t in range(nt - 1):
    for i in range(1, nx - 1):
        for j in range(1, ny - 1):
            u[t + 1, i, j] = (u[t][i][j] 
                              + nu * dt / dx**2 * (u[t][i+1][j] - 2*u[t][i][j] + u[t][i-1][j]) 
                              + nu * dt / dy**2 * (u[t][i][j+1] - 2*u[t][i][j] + u[t][i][j-1]))

# 5. Apply zero boundary conditions
u[:, 0, :] = 0
u[:, nx-1, :] = 0
u[:, :, 0] = 0
u[:, :, ny-1] = 0

# 6. Visualize the evolution of u(x, y) over time using a heatmap
for t in range(nt):
    if t % 20 == 0: # Plot every 20 time steps
        plt.imshow(u[t], extent=[0, Lx, 0, Ly], cmap='hot')
        plt.title('Time Step (nt) = {}'.format(t))
        plt.xlabel('x')
        plt.ylabel('y') 
        plt.colorbar()
        plt.show() 
```

The code above uses the finite difference method for 2D diffusion and plots a heatmap of the scalar field `u(x,y)` at different time steps. The initial condition is a high concentration square in the center of the domain, which dissipates over time due to diffusion. Please note that the boundary conditions are implemented as zero values along the edges of the domain.