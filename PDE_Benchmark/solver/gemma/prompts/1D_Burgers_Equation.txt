```python
import numpy as np
from scipy.integrate import solve_ivp

# Parameters
nu = 0.07
L = 2*np.pi
T = 0.14*np.pi

# Spatial discretization
Nx = 100
dx = L / Nx
x = np.linspace(0, L, Nx)

# Time discretization
Nt = 100
dt = T / Nt
t = np.linspace(0, T, Nt+1)

# Initial condition
phi = np.exp(-x**2 / (4*nu)) + np.exp(-(x - L)**2 / (4*nu))
u0 = -2*nu/phi * np.gradient(phi, dx) + 4

# Function to solve the PDE
def ode_solver(t, u):
  dudt = -u * np.gradient(u, dx) + nu * np.gradient(np.gradient(u, dx), dx)
  return dudt

# Solve the PDE using solve_ivp
sol = solve_ivp(ode_solver, [0, T], u0, t_eval=t, dense_output=True)

# Extract the final solution
u_final = sol.y[:, -1]

# Save the final solution
np.save('u_final.npy', u_final)
```