{
    "prompts": {
        "1D_Linear_Convection": "\nYou are an expert in **Computational Fluid Dynamics (CFD)** and **Numerical Methods**. Your task is to generate a **Python solver** for the given PDE using a suitable numerical scheme.\n\n---\n\n### **1\ufe0f\u20e3 PDE Definition**\nSolve the following **1D Linear Convection**:\n\n    \u2202u/\u2202t + c \u2202u/\u2202x = f(x, t)\n\nwhere:\n- The primary variable(s) are u, c, x, t, f.\n- The source term(s) f are derived from the **Manufactured Solution (MMS)**.\n\n---\n\n### **2\ufe0f\u20e3 Manufactured Solution (MMS)**\nTo validate the solver, use the following **MMS solution**:\n\n    u(x, t) = exp(-t) * sin(\u03c0x)\n\nFrom this, compute the **source terms** by substituting the MMS into the PDE.\n\n---\n\n### **3\ufe0f\u20e3 Discretization Strategy**\n- Use a **Finite Difference Method (FDM)** or an alternative stable scheme.\n- Ensure numerical **stability** using **appropriate CFL conditions**.\n- Choose **grid resolution** and **time step size**.\n\n---\n\n### **4\ufe0f\u20e3 Implementation Guidelines**\n\u2705 Write a **fully functional Python script** using **NumPy & SciPy**.  \n\u2705 Solve the PDE using an **appropriate numerical method**.  \n\u2705 Enforce **boundary and initial conditions** from MMS.  \n\u2705 Compute and visualize:\n    1. The **numerical solution**.\n    2. The **MMS (exact) solution**.\n    3. The **absolute error**.\n\n---\n\n### **5\ufe0f\u20e3 Output Requirements**\n- Return **only the Python code** (do not explain it).\n- Ensure the code is **well-commented and numerically stable**.\n    ",
        "1D_Nonlinear_Convection": "\nYou are an expert in **Computational Fluid Dynamics (CFD)** and **Numerical Methods**. Your task is to generate a **Python solver** for the given PDE using a suitable numerical scheme.\n\n---\n\n### **1\ufe0f\u20e3 PDE Definition**\nSolve the following **1D Nonlinear Convection**:\n\n    \u2202u/\u2202t + u \u2202u/\u2202x = f(x, t)\n\nwhere:\n- The primary variable(s) are u, x, t, f.\n- The source term(s) f are derived from the **Manufactured Solution (MMS)**.\n\n---\n\n### **2\ufe0f\u20e3 Manufactured Solution (MMS)**\nTo validate the solver, use the following **MMS solution**:\n\n    u(x, t) = exp(-t) * sin(\u03c0x)\n\nFrom this, compute the **source terms** by substituting the MMS into the PDE.\n\n---\n\n### **3\ufe0f\u20e3 Discretization Strategy**\n- Use a **Finite Difference Method (FDM)** or an alternative stable scheme.\n- Ensure numerical **stability** using **appropriate CFL conditions**.\n- Choose **grid resolution** and **time step size**.\n\n---\n\n### **4\ufe0f\u20e3 Implementation Guidelines**\n\u2705 Write a **fully functional Python script** using **NumPy & SciPy**.  \n\u2705 Solve the PDE using an **appropriate numerical method**.  \n\u2705 Enforce **boundary and initial conditions** from MMS.  \n\u2705 Compute and visualize:\n    1. The **numerical solution**.\n    2. The **MMS (exact) solution**.\n    3. The **absolute error**.\n\n---\n\n### **5\ufe0f\u20e3 Output Requirements**\n- Return **only the Python code** (do not explain it).\n- Ensure the code is **well-commented and numerically stable**.\n    ",
        "1D_Burgers_Equation": "\nYou are an expert in **Computational Fluid Dynamics (CFD)** and **Numerical Methods**. Your task is to generate a **Python solver** for the given PDE using a suitable numerical scheme.\n\n---\n\n### **1\ufe0f\u20e3 PDE Definition**\nSolve the following **1D Burgers Equation**:\n\n    \u2202u/\u2202t + u \u2202u/\u2202x = \u03bd \u2202\u00b2u/\u2202x\u00b2 + f(x, t)\n\nwhere:\n- The primary variable(s) are u, \u03bd, x, t, f.\n- The source term(s) f are derived from the **Manufactured Solution (MMS)**.\n\n---\n\n### **2\ufe0f\u20e3 Manufactured Solution (MMS)**\nTo validate the solver, use the following **MMS solution**:\n\n    u(x, t) = exp(-t) * sin(\u03c0x)\n\nFrom this, compute the **source terms** by substituting the MMS into the PDE.\n\n---\n\n### **3\ufe0f\u20e3 Discretization Strategy**\n- Use a **Finite Difference Method (FDM)** or an alternative stable scheme.\n- Ensure numerical **stability** using **appropriate CFL conditions**.\n- Choose **grid resolution** and **time step size**.\n\n---\n\n### **4\ufe0f\u20e3 Implementation Guidelines**\n\u2705 Write a **fully functional Python script** using **NumPy & SciPy**.  \n\u2705 Solve the PDE using an **appropriate numerical method**.  \n\u2705 Enforce **boundary and initial conditions** from MMS.  \n\u2705 Compute and visualize:\n    1. The **numerical solution**.\n    2. The **MMS (exact) solution**.\n    3. The **absolute error**.\n\n---\n\n### **5\ufe0f\u20e3 Output Requirements**\n- Return **only the Python code** (do not explain it).\n- Ensure the code is **well-commented and numerically stable**.\n    ",
        "1D_Diffusion": "\nYou are an expert in **Computational Fluid Dynamics (CFD)** and **Numerical Methods**. Your task is to generate a **Python solver** for the given PDE using a suitable numerical scheme.\n\n---\n\n### **1\ufe0f\u20e3 PDE Definition**\nSolve the following **1D Diffusion**:\n\n    \u2202u/\u2202t = \u03bd \u2202\u00b2u/\u2202x\u00b2 + f(x, t)\n\nwhere:\n- The primary variable(s) are u, \u03bd, x, t, f.\n- The source term(s) f are derived from the **Manufactured Solution (MMS)**.\n\n---\n\n### **2\ufe0f\u20e3 Manufactured Solution (MMS)**\nTo validate the solver, use the following **MMS solution**:\n\n    u(x, t) = exp(-t) * sin(\u03c0x)\n\nFrom this, compute the **source terms** by substituting the MMS into the PDE.\n\n---\n\n### **3\ufe0f\u20e3 Discretization Strategy**\n- Use a **Finite Difference Method (FDM)** or an alternative stable scheme.\n- Ensure numerical **stability** using **appropriate CFL conditions**.\n- Choose **grid resolution** and **time step size**.\n\n---\n\n### **4\ufe0f\u20e3 Implementation Guidelines**\n\u2705 Write a **fully functional Python script** using **NumPy & SciPy**.  \n\u2705 Solve the PDE using an **appropriate numerical method**.  \n\u2705 Enforce **boundary and initial conditions** from MMS.  \n\u2705 Compute and visualize:\n    1. The **numerical solution**.\n    2. The **MMS (exact) solution**.\n    3. The **absolute error**.\n\n---\n\n### **5\ufe0f\u20e3 Output Requirements**\n- Return **only the Python code** (do not explain it).\n- Ensure the code is **well-commented and numerically stable**.\n    ",
        "1D_Wave_Equation": "\nYou are an expert in **Computational Fluid Dynamics (CFD)** and **Numerical Methods**. Your task is to generate a **Python solver** for the given PDE using a suitable numerical scheme.\n\n---\n\n### **1\ufe0f\u20e3 PDE Definition**\nSolve the following **1D Wave Equation**:\n\n    \u2202\u00b2u/\u2202t\u00b2 = c\u00b2 \u2202\u00b2u/\u2202x\u00b2 + f(x, t)\n\nwhere:\n- The primary variable(s) are u, c, x, t, f.\n- The source term(s) f are derived from the **Manufactured Solution (MMS)**.\n\n---\n\n### **2\ufe0f\u20e3 Manufactured Solution (MMS)**\nTo validate the solver, use the following **MMS solution**:\n\n    u(x, t) = exp(-t) * sin(\u03c0x) * cos(t)\n\nFrom this, compute the **source terms** by substituting the MMS into the PDE.\n\n---\n\n### **3\ufe0f\u20e3 Discretization Strategy**\n- Use a **Finite Difference Method (FDM)** or an alternative stable scheme.\n- Ensure numerical **stability** using **appropriate CFL conditions**.\n- Choose **grid resolution** and **time step size**.\n\n---\n\n### **4\ufe0f\u20e3 Implementation Guidelines**\n\u2705 Write a **fully functional Python script** using **NumPy & SciPy**.  \n\u2705 Solve the PDE using an **appropriate numerical method**.  \n\u2705 Enforce **boundary and initial conditions** from MMS.  \n\u2705 Compute and visualize:\n    1. The **numerical solution**.\n    2. The **MMS (exact) solution**.\n    3. The **absolute error**.\n\n---\n\n### **5\ufe0f\u20e3 Output Requirements**\n- Return **only the Python code** (do not explain it).\n- Ensure the code is **well-commented and numerically stable**.\n    ",
        "1D_Euler_Equations": "\nYou are an expert in **Computational Fluid Dynamics (CFD)** and **Numerical Methods**. Your task is to generate a **Python solver** for the given PDE using a suitable numerical scheme.\n\n---\n\n### **1\ufe0f\u20e3 PDE Definition**\nSolve the following **1D Euler Equations**:\n\n    \u2202\u03c1/\u2202t + \u2202(\u03c1u)/\u2202x = 0, \u2202(\u03c1u)/\u2202t + \u2202(\u03c1u\u00b2 + p)/\u2202x = 0, \u2202E/\u2202t + \u2202((E + p)u)/\u2202x = 0\n\nwhere:\n- The primary variable(s) are \u03c1, u, p, E, x, t.\n- The source term(s)  are derived from the **Manufactured Solution (MMS)**.\n\n---\n\n### **2\ufe0f\u20e3 Manufactured Solution (MMS)**\nTo validate the solver, use the following **MMS solution**:\n\n    \u03c1(x, t) = exp(-t) * sin(\u03c0x), u(x, t) = exp(-t) * cos(\u03c0x), p(x, t) = exp(-t) * (1 + sin(\u03c0x))\n\nFrom this, compute the **source terms** by substituting the MMS into the PDE.\n\n---\n\n### **3\ufe0f\u20e3 Discretization Strategy**\n- Use a **Finite Difference Method (FDM)** or an alternative stable scheme.\n- Ensure numerical **stability** using **appropriate CFL conditions**.\n- Choose **grid resolution** and **time step size**.\n\n---\n\n### **4\ufe0f\u20e3 Implementation Guidelines**\n\u2705 Write a **fully functional Python script** using **NumPy & SciPy**.  \n\u2705 Solve the PDE using an **appropriate numerical method**.  \n\u2705 Enforce **boundary and initial conditions** from MMS.  \n\u2705 Compute and visualize:\n    1. The **numerical solution**.\n    2. The **MMS (exact) solution**.\n    3. The **absolute error**.\n\n---\n\n### **5\ufe0f\u20e3 Output Requirements**\n- Return **only the Python code** (do not explain it).\n- Ensure the code is **well-commented and numerically stable**.\n    ",
        "1D_Kuramoto_Sivashinsky": "\nYou are an expert in **Computational Fluid Dynamics (CFD)** and **Numerical Methods**. Your task is to generate a **Python solver** for the given PDE using a suitable numerical scheme.\n\n---\n\n### **1\ufe0f\u20e3 PDE Definition**\nSolve the following **1D Kuramoto Sivashinsky**:\n\n    \u2202u/\u2202t + \u2202\u00b2u/\u2202x\u00b2 + \u2202\u2074u/\u2202x\u2074 + (1/2)(\u2202u/\u2202x)\u00b2 = f(x, t)\n\nwhere:\n- The primary variable(s) are u, x, t, f.\n- The source term(s) f are derived from the **Manufactured Solution (MMS)**.\n\n---\n\n### **2\ufe0f\u20e3 Manufactured Solution (MMS)**\nTo validate the solver, use the following **MMS solution**:\n\n    u(x, t) = exp(-t) * sin(\u03c0x)\n\nFrom this, compute the **source terms** by substituting the MMS into the PDE.\n\n---\n\n### **3\ufe0f\u20e3 Discretization Strategy**\n- Use a **Finite Difference Method (FDM)** or an alternative stable scheme.\n- Ensure numerical **stability** using **appropriate CFL conditions**.\n- Choose **grid resolution** and **time step size**.\n\n---\n\n### **4\ufe0f\u20e3 Implementation Guidelines**\n\u2705 Write a **fully functional Python script** using **NumPy & SciPy**.  \n\u2705 Solve the PDE using an **appropriate numerical method**.  \n\u2705 Enforce **boundary and initial conditions** from MMS.  \n\u2705 Compute and visualize:\n    1. The **numerical solution**.\n    2. The **MMS (exact) solution**.\n    3. The **absolute error**.\n\n---\n\n### **5\ufe0f\u20e3 Output Requirements**\n- Return **only the Python code** (do not explain it).\n- Ensure the code is **well-commented and numerically stable**.\n    ",
        "1D_Korteweg_de_Vries": "\nYou are an expert in **Computational Fluid Dynamics (CFD)** and **Numerical Methods**. Your task is to generate a **Python solver** for the given PDE using a suitable numerical scheme.\n\n---\n\n### **1\ufe0f\u20e3 PDE Definition**\nSolve the following **1D Korteweg de Vries**:\n\n    \u2202u/\u2202t + 6u \u2202u/\u2202x + \u2202\u00b3u/\u2202x\u00b3 = f(x, t)\n\nwhere:\n- The primary variable(s) are u, x, t, f.\n- The source term(s) f are derived from the **Manufactured Solution (MMS)**.\n\n---\n\n### **2\ufe0f\u20e3 Manufactured Solution (MMS)**\nTo validate the solver, use the following **MMS solution**:\n\n    u(x, t) = exp(-t) * sin(\u03c0x)\n\nFrom this, compute the **source terms** by substituting the MMS into the PDE.\n\n---\n\n### **3\ufe0f\u20e3 Discretization Strategy**\n- Use a **Finite Difference Method (FDM)** or an alternative stable scheme.\n- Ensure numerical **stability** using **appropriate CFL conditions**.\n- Choose **grid resolution** and **time step size**.\n\n---\n\n### **4\ufe0f\u20e3 Implementation Guidelines**\n\u2705 Write a **fully functional Python script** using **NumPy & SciPy**.  \n\u2705 Solve the PDE using an **appropriate numerical method**.  \n\u2705 Enforce **boundary and initial conditions** from MMS.  \n\u2705 Compute and visualize:\n    1. The **numerical solution**.\n    2. The **MMS (exact) solution**.\n    3. The **absolute error**.\n\n---\n\n### **5\ufe0f\u20e3 Output Requirements**\n- Return **only the Python code** (do not explain it).\n- Ensure the code is **well-commented and numerically stable**.\n    ",
        "2D_Linear_Convection": "\nYou are an expert in **Computational Fluid Dynamics (CFD)** and **Numerical Methods**. Your task is to generate a **Python solver** for the given PDE using a suitable numerical scheme.\n\n---\n\n### **1\ufe0f\u20e3 PDE Definition**\nSolve the following **2D Linear Convection**:\n\n    \u2202u/\u2202t + c_x \u2202u/\u2202x + c_y \u2202u/\u2202y = f(x, y, t)\n\nwhere:\n- The primary variable(s) are u, c_x, c_y, x, y, t, f.\n- The source term(s) f are derived from the **Manufactured Solution (MMS)**.\n\n---\n\n### **2\ufe0f\u20e3 Manufactured Solution (MMS)**\nTo validate the solver, use the following **MMS solution**:\n\n    u(x, y, t) = exp(-t) * sin(\u03c0x) * sin(\u03c0y)\n\nFrom this, compute the **source terms** by substituting the MMS into the PDE.\n\n---\n\n### **3\ufe0f\u20e3 Discretization Strategy**\n- Use a **Finite Difference Method (FDM)** or an alternative stable scheme.\n- Ensure numerical **stability** using **appropriate CFL conditions**.\n- Choose **grid resolution** and **time step size**.\n\n---\n\n### **4\ufe0f\u20e3 Implementation Guidelines**\n\u2705 Write a **fully functional Python script** using **NumPy & SciPy**.  \n\u2705 Solve the PDE using an **appropriate numerical method**.  \n\u2705 Enforce **boundary and initial conditions** from MMS.  \n\u2705 Compute and visualize:\n    1. The **numerical solution**.\n    2. The **MMS (exact) solution**.\n    3. The **absolute error**.\n\n---\n\n### **5\ufe0f\u20e3 Output Requirements**\n- Return **only the Python code** (do not explain it).\n- Ensure the code is **well-commented and numerically stable**.\n    ",
        "2D_Nonlinear_Convection": "\nYou are an expert in **Computational Fluid Dynamics (CFD)** and **Numerical Methods**. Your task is to generate a **Python solver** for the given PDE using a suitable numerical scheme.\n\n---\n\n### **1\ufe0f\u20e3 PDE Definition**\nSolve the following **2D Nonlinear Convection**:\n\n    \u2202u/\u2202t + u \u2202u/\u2202x + v \u2202u/\u2202y = f(x, y, t), \u2202v/\u2202t + u \u2202v/\u2202x + v \u2202v/\u2202y = f_v(x, y, t)\n\nwhere:\n- The primary variable(s) are u, v, x, y, t, f, f_v.\n- The source term(s) f, f_v are derived from the **Manufactured Solution (MMS)**.\n\n---\n\n### **2\ufe0f\u20e3 Manufactured Solution (MMS)**\nTo validate the solver, use the following **MMS solution**:\n\n    u(x, y, t) = exp(-t) * sin(\u03c0x) * sin(\u03c0y), v(x, y, t) = exp(-t) * cos(\u03c0x) * cos(\u03c0y)\n\nFrom this, compute the **source terms** by substituting the MMS into the PDE.\n\n---\n\n### **3\ufe0f\u20e3 Discretization Strategy**\n- Use a **Finite Difference Method (FDM)** or an alternative stable scheme.\n- Ensure numerical **stability** using **appropriate CFL conditions**.\n- Choose **grid resolution** and **time step size**.\n\n---\n\n### **4\ufe0f\u20e3 Implementation Guidelines**\n\u2705 Write a **fully functional Python script** using **NumPy & SciPy**.  \n\u2705 Solve the PDE using an **appropriate numerical method**.  \n\u2705 Enforce **boundary and initial conditions** from MMS.  \n\u2705 Compute and visualize:\n    1. The **numerical solution**.\n    2. The **MMS (exact) solution**.\n    3. The **absolute error**.\n\n---\n\n### **5\ufe0f\u20e3 Output Requirements**\n- Return **only the Python code** (do not explain it).\n- Ensure the code is **well-commented and numerically stable**.\n    ",
        "2D_Burgers_Equation": "\nYou are an expert in **Computational Fluid Dynamics (CFD)** and **Numerical Methods**. Your task is to generate a **Python solver** for the given PDE using a suitable numerical scheme.\n\n---\n\n### **1\ufe0f\u20e3 PDE Definition**\nSolve the following **2D Burgers Equation**:\n\n    \u2202u/\u2202t + u \u2202u/\u2202x + v \u2202u/\u2202y = \u03bd (\u2202\u00b2u/\u2202x\u00b2 + \u2202\u00b2u/\u2202y\u00b2) + f_u(x, y, t), \u2202v/\u2202t + u \u2202v/\u2202x + v \u2202v/\u2202y = \u03bd (\u2202\u00b2v/\u2202x\u00b2 + \u2202\u00b2v/\u2202y\u00b2) + f_v(x, y, t)\n\nwhere:\n- The primary variable(s) are u, v, \u03bd, x, y, t, f_u, f_v.\n- The source term(s) f_u, f_v are derived from the **Manufactured Solution (MMS)**.\n\n---\n\n### **2\ufe0f\u20e3 Manufactured Solution (MMS)**\nTo validate the solver, use the following **MMS solution**:\n\n    u(x, y, t) = exp(-t) * sin(\u03c0x) * sin(\u03c0y), v(x, y, t) = exp(-t) * cos(\u03c0x) * cos(\u03c0y)\n\nFrom this, compute the **source terms** by substituting the MMS into the PDE.\n\n---\n\n### **3\ufe0f\u20e3 Discretization Strategy**\n- Use a **Finite Difference Method (FDM)** or an alternative stable scheme.\n- Ensure numerical **stability** using **appropriate CFL conditions**.\n- Choose **grid resolution** and **time step size**.\n\n---\n\n### **4\ufe0f\u20e3 Implementation Guidelines**\n\u2705 Write a **fully functional Python script** using **NumPy & SciPy**.  \n\u2705 Solve the PDE using an **appropriate numerical method**.  \n\u2705 Enforce **boundary and initial conditions** from MMS.  \n\u2705 Compute and visualize:\n    1. The **numerical solution**.\n    2. The **MMS (exact) solution**.\n    3. The **absolute error**.\n\n---\n\n### **5\ufe0f\u20e3 Output Requirements**\n- Return **only the Python code** (do not explain it).\n- Ensure the code is **well-commented and numerically stable**.\n    ",
        "2D_Diffusion": "\nYou are an expert in **Computational Fluid Dynamics (CFD)** and **Numerical Methods**. Your task is to generate a **Python solver** for the given PDE using a suitable numerical scheme.\n\n---\n\n### **1\ufe0f\u20e3 PDE Definition**\nSolve the following **2D Diffusion**:\n\n    \u2202u/\u2202t = \u03b1 (\u2202\u00b2u/\u2202x\u00b2 + \u2202\u00b2u/\u2202y\u00b2) + f(x, y, t)\n\nwhere:\n- The primary variable(s) are u, \u03b1, x, y, t, f.\n- The source term(s) f are derived from the **Manufactured Solution (MMS)**.\n\n---\n\n### **2\ufe0f\u20e3 Manufactured Solution (MMS)**\nTo validate the solver, use the following **MMS solution**:\n\n    u(x, y, t) = exp(-t) * sin(\u03c0x) * sin(\u03c0y)\n\nFrom this, compute the **source terms** by substituting the MMS into the PDE.\n\n---\n\n### **3\ufe0f\u20e3 Discretization Strategy**\n- Use a **Finite Difference Method (FDM)** or an alternative stable scheme.\n- Ensure numerical **stability** using **appropriate CFL conditions**.\n- Choose **grid resolution** and **time step size**.\n\n---\n\n### **4\ufe0f\u20e3 Implementation Guidelines**\n\u2705 Write a **fully functional Python script** using **NumPy & SciPy**.  \n\u2705 Solve the PDE using an **appropriate numerical method**.  \n\u2705 Enforce **boundary and initial conditions** from MMS.  \n\u2705 Compute and visualize:\n    1. The **numerical solution**.\n    2. The **MMS (exact) solution**.\n    3. The **absolute error**.\n\n---\n\n### **5\ufe0f\u20e3 Output Requirements**\n- Return **only the Python code** (do not explain it).\n- Ensure the code is **well-commented and numerically stable**.\n    ",
        "2D_Wave_Equation": "\nYou are an expert in **Computational Fluid Dynamics (CFD)** and **Numerical Methods**. Your task is to generate a **Python solver** for the given PDE using a suitable numerical scheme.\n\n---\n\n### **1\ufe0f\u20e3 PDE Definition**\nSolve the following **2D Wave Equation**:\n\n    \u2202\u00b2u/\u2202t\u00b2 = c\u00b2 (\u2202\u00b2u/\u2202x\u00b2 + \u2202\u00b2u/\u2202y\u00b2) + f(x, y, t)\n\nwhere:\n- The primary variable(s) are u, c, x, y, t, f.\n- The source term(s) f are derived from the **Manufactured Solution (MMS)**.\n\n---\n\n### **2\ufe0f\u20e3 Manufactured Solution (MMS)**\nTo validate the solver, use the following **MMS solution**:\n\n    u(x, y, t) = exp(-t) * sin(\u03c0x) * sin(\u03c0y) * cos(t)\n\nFrom this, compute the **source terms** by substituting the MMS into the PDE.\n\n---\n\n### **3\ufe0f\u20e3 Discretization Strategy**\n- Use a **Finite Difference Method (FDM)** or an alternative stable scheme.\n- Ensure numerical **stability** using **appropriate CFL conditions**.\n- Choose **grid resolution** and **time step size**.\n\n---\n\n### **4\ufe0f\u20e3 Implementation Guidelines**\n\u2705 Write a **fully functional Python script** using **NumPy & SciPy**.  \n\u2705 Solve the PDE using an **appropriate numerical method**.  \n\u2705 Enforce **boundary and initial conditions** from MMS.  \n\u2705 Compute and visualize:\n    1. The **numerical solution**.\n    2. The **MMS (exact) solution**.\n    3. The **absolute error**.\n\n---\n\n### **5\ufe0f\u20e3 Output Requirements**\n- Return **only the Python code** (do not explain it).\n- Ensure the code is **well-commented and numerically stable**.\n    ",
        "2D_Euler_Equations": "\nYou are an expert in **Computational Fluid Dynamics (CFD)** and **Numerical Methods**. Your task is to generate a **Python solver** for the given PDE using a suitable numerical scheme.\n\n---\n\n### **1\ufe0f\u20e3 PDE Definition**\nSolve the following **2D Euler Equations**:\n\n    \u2202\u03c1/\u2202t + \u2202(\u03c1u)/\u2202x + \u2202(\u03c1v)/\u2202y = 0, \u2202(\u03c1u)/\u2202t + \u2202(\u03c1u\u00b2 + p)/\u2202x + \u2202(\u03c1uv)/\u2202y = 0, \u2202(\u03c1v)/\u2202t + \u2202(\u03c1uv)/\u2202x + \u2202(\u03c1v\u00b2 + p)/\u2202y = 0, \u2202E/\u2202t + \u2202((E + p)u)/\u2202x + \u2202((E + p)v)/\u2202y = 0\n\nwhere:\n- The primary variable(s) are \u03c1, u, v, p, E, x, y, t.\n- The source term(s)  are derived from the **Manufactured Solution (MMS)**.\n\n---\n\n### **2\ufe0f\u20e3 Manufactured Solution (MMS)**\nTo validate the solver, use the following **MMS solution**:\n\n    \u03c1(x, y, t) = exp(-t) * sin(\u03c0x) * sin(\u03c0y), u(x, y, t) = exp(-t) * sin(\u03c0x) * cos(\u03c0y), v(x, y, t) = exp(-t) * cos(\u03c0x) * sin(\u03c0y), p(x, y, t) = exp(-t) * (1 + sin(\u03c0x) * sin(\u03c0y))\n\nFrom this, compute the **source terms** by substituting the MMS into the PDE.\n\n---\n\n### **3\ufe0f\u20e3 Discretization Strategy**\n- Use a **Finite Difference Method (FDM)** or an alternative stable scheme.\n- Ensure numerical **stability** using **appropriate CFL conditions**.\n- Choose **grid resolution** and **time step size**.\n\n---\n\n### **4\ufe0f\u20e3 Implementation Guidelines**\n\u2705 Write a **fully functional Python script** using **NumPy & SciPy**.  \n\u2705 Solve the PDE using an **appropriate numerical method**.  \n\u2705 Enforce **boundary and initial conditions** from MMS.  \n\u2705 Compute and visualize:\n    1. The **numerical solution**.\n    2. The **MMS (exact) solution**.\n    3. The **absolute error**.\n\n---\n\n### **5\ufe0f\u20e3 Output Requirements**\n- Return **only the Python code** (do not explain it).\n- Ensure the code is **well-commented and numerically stable**.\n    ",
        "2D_Navier_Stokes": "\nYou are an expert in **Computational Fluid Dynamics (CFD)** and **Numerical Methods**. Your task is to generate a **Python solver** for the given PDE using a suitable numerical scheme.\n\n---\n\n### **1\ufe0f\u20e3 PDE Definition**\nSolve the following **2D Navier Stokes**:\n\n    \u2202u/\u2202t + u \u2202u/\u2202x + v \u2202u/\u2202y = -1/\u03c1 \u2202p/\u2202x + \u03bd (\u2202\u00b2u/\u2202x\u00b2 + \u2202\u00b2u/\u2202y\u00b2), \u2202v/\u2202t + u \u2202v/\u2202x + v \u2202v/\u2202y = -1/\u03c1 \u2202p/\u2202y + \u03bd (\u2202\u00b2v/\u2202x\u00b2 + \u2202\u00b2v/\u2202y\u00b2), \u2202\u00b2p/\u2202x\u00b2 + \u2202\u00b2p/\u2202y\u00b2 = -\u03c1 (\u2202u/\u2202x \u2202u/\u2202x + 2 \u2202u/\u2202y \u2202v/\u2202x + \u2202v/\u2202y \u2202v/\u2202y)\n\nwhere:\n- The primary variable(s) are u, v, p, \u03bd, \u03c1, x, y, t.\n- The source term(s)  are derived from the **Manufactured Solution (MMS)**.\n\n---\n\n### **2\ufe0f\u20e3 Manufactured Solution (MMS)**\nTo validate the solver, use the following **MMS solution**:\n\n    u(x, y, t) = exp(-t) * sin(\u03c0x) * sin(\u03c0y), v(x, y, t) = exp(-t) * cos(\u03c0x) * cos(\u03c0y), p(x, y, t) = exp(-t) * cos(\u03c0x) * cos(\u03c0y)\n\nFrom this, compute the **source terms** by substituting the MMS into the PDE.\n\n---\n\n### **3\ufe0f\u20e3 Discretization Strategy**\n- Use a **Finite Difference Method (FDM)** or an alternative stable scheme.\n- Ensure numerical **stability** using **appropriate CFL conditions**.\n- Choose **grid resolution** and **time step size**.\n\n---\n\n### **4\ufe0f\u20e3 Implementation Guidelines**\n\u2705 Write a **fully functional Python script** using **NumPy & SciPy**.  \n\u2705 Solve the PDE using an **appropriate numerical method**.  \n\u2705 Enforce **boundary and initial conditions** from MMS.  \n\u2705 Compute and visualize:\n    1. The **numerical solution**.\n    2. The **MMS (exact) solution**.\n    3. The **absolute error**.\n\n---\n\n### **5\ufe0f\u20e3 Output Requirements**\n- Return **only the Python code** (do not explain it).\n- Ensure the code is **well-commented and numerically stable**.\n    "
    }
}