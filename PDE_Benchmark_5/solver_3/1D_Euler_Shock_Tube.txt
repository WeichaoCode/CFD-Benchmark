Sure! Here is a Python program that follows the steps you outlined:

```python
import numpy as np
import matplotlib.pyplot as plt

# Step 1: Define parameters
L = 1.0
T = 0.2
nx = 100
nt = 100
γ = 1.4
CFL = 0.4
dx = L / nx
dt = CFL * dx

# Step 2: Discretize space and time
x = np.linspace(0, L, nx)

# Step 3: Initialize primitive and conserved variables
ρ = np.piecewise(x, [x < 0.5, x >= 0.5], [1.0, 0.125])
u = np.zeros_like(x)
p = np.piecewise(x, [x < 0.5, x >= 0.5], [1.0, 0.1])

ρ_u = ρ * u 
ρ_E = p / (γ - 1) + 0.5 * ρ * u**2

F_1 = ρ_u
F_2 = ρ_u ** 2 / ρ + p
F_3 = (ρ_E + p) * u

# Step 4: Iterate using the MacCormack method
for n in range(nt):
    ρ_u_old, ρ_E_old = ρ_u.copy(), ρ_E.copy()
    
    # Predictor step
    ρ_u[:-1] -= dt / dx * (F_2[1:] - F_2[:-1])
    ρ_E[:-1] -= dt / dx * (F_3[1:] - F_3[:-1])
    
    # Corrector step
    F_2 = ρ_u ** 2 / ρ + p
    F_3 = (ρ_E + p) * u
    ρ_u[1:] = 0.5 * (ρ_u_old[1:] + ρ_u[1:] - dt / dx * (F_2[1:] - F_2[:-1]))
    ρ_E[1:] = 0.5 * (ρ_E_old[1:] + ρ_E[1:] - dt / dx * (F_3[1:] - F_3[:-1]))
    
# Step 5: Convert back to primitive variables
ρ = ρ_u / u
p = (γ - 1) * (ρ_E - 0.5 * ρ_u ** 2 / ρ)

# Step 6: Visualize the density, velocity, and pressure profiles over time
plt.subplot(311)
plt.plot(x, ρ, label='Density')
plt.subplot(312)
plt.plot(x, u, label='Velocity')
plt.subplot(313)
plt.plot(x, p, label='Pressure')

plt.show()
```

This should be a good starting point for you. Over time, you'll see changes in the density, velocity, and pressure profiles as the shock wave propagates.

Please note that you might need to alter the initial and boundary conditions or number of grid points (nx, nt) for it to accurately represent specific scenarios. Ensure to debug and validate your code with a known solution in case you experience issues.