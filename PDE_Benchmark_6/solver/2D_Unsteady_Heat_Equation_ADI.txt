Here is a Python code that implements the Alternating Direction Implicit (ADI) method to solve the given two-dimensional unsteady heat equation:

```python
import numpy as np
import matplotlib.pyplot as plt
from scipy.linalg import solve_banded

# Define parameters
nx, ny = 41, 41
t_max = 3.0
alpha = 1.0
dx = 2.0 / (nx - 1)
dy = 2.0 / (ny - 1)
beta = dx / dy
r = 1.0 / (1 + beta**2)
dt = r * dx**2 / alpha
nt = int(t_max / dt)
sigma = 0.1
Q0 = 200.0

# Define the source term
def q(x, y):
    return Q0 * np.exp(-(x**2 + y**2) / (2 * sigma**2))

# Initialize the solution array
T = np.zeros((nx, ny))

# Define the x and y coordinates
x = np.linspace(-1, 1, nx)
y = np.linspace(-1, 1, ny)

# Define the ADI method
def ADI(T):
    # Step 1: Solve implicitly in the x-direction, explicitly in the y-direction
    for j in range(1, ny-1):
        a = np.full(nx-2, -0.5*r)
        b = np.full(nx-2, 1 + r)
        c = np.full(nx-2, -0.5*r)
        d = 0.5*r*(T[:-2, j+1] - 2*T[1:-1, j] + T[2:, j]) + T[1:-1, j] + 0.5*dt*q(x[1:-1], y[j])
        T[1:-1, j] = solve_banded((1, 1), np.array([a, b, c]), d)

    # Step 2: Solve implicitly in the y-direction, explicitly in the x-direction
    for i in range(1, nx-1):
        a = np.full(ny-2, -0.5*beta**2*r)
        b = np.full(ny-2, 1 + beta**2*r)
        c = np.full(ny-2, -0.5*beta**2*r)
        d = 0.5*r*(T[i+1, 1:-1] - 2*T[i, 1:-1] + T[i-1, 1:-1]) + T[i, 1:-1] + 0.5*dt*q(x[i], y[1:-1])
        T[i, 1:-1] = solve_banded((1, 1), np.array([a, b, c]), d)

    return T

# Time-stepping loop
for n in range(nt):
    T = ADI(T)

# Save the solution
np.save('solution.npy', T)

# Visualize the solution
plt.imshow(T, extent=[-1, 1, -1, 1], origin='lower')
plt.colorbar(label='Temperature (Â°C)')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Temperature distribution at t = {:.2f} s'.format(t_max))
plt.show()
```

This code first defines the parameters and initializes the solution array. It then defines the ADI method, which consists of two steps: solving implicitly in the x-direction and explicitly in the y-direction, and vice versa. The time-stepping loop applies the ADI method for each time step. Finally, the solution is saved and visualized.