Below is the Python code to solve the given 1D diffusion equation using a finite difference method. The code uses the forward Euler method for time integration and a second-order central difference for the spatial derivative. The final solution at the last time step is saved to a `.npy` file.

```python
import numpy as np

# Parameters
nx = 41
nt = 20
nu = 0.3
sigma = 0.2

# Spatial domain
x = np.linspace(0, 1, nx)
dx = 2 / (nx - 1)

# Time step
dt = sigma * dx**2 / nu

# Initial condition
u = np.ones(nx)
u[int(0.5 / dx):] = 2

# Boundary conditions
u[0] = 1
u[-1] = 0

# Time-stepping loop
for n in range(nt):
    un = u.copy()
    for i in range(1, nx - 1):
        u[i] = un[i] + nu * dt / dx**2 * (un[i+1] - 2*un[i] + un[i-1])
    # Reapply boundary conditions
    u[0] = 1
    u[-1] = 0

# Save the final solution to a .npy file
np.save('final_solution.npy', u)
```

### Explanation:
- **Spatial Discretization**: The spatial domain is divided into `nx` grid points. The spatial step size `dx` is calculated based on the number of grid points.
- **Time Discretization**: The time step `dt` is determined using the given stability condition with `sigma = 0.2`.
- **Initial Conditions**: The initial condition is set according to the problem statement, with `u(x,0) = 2` for `0.5 <= x <= 1` and `u = 1` elsewhere.
- **Boundary Conditions**: Dirichlet boundary conditions are applied at each time step.
- **Time Integration**: The forward Euler method is used to update the solution in time.
- **Saving the Solution**: The final solution at the last time step is saved to a `.npy` file using NumPy.

This code will produce a 1D array representing the solution at the final time step, which is saved as `final_solution.npy`.