#!/usr/bin/env python3
import numpy as np

def main():
    # Parameters
    L = 2 * np.pi         # Length of the domain
    T_final = 5.0         # Final time
    N = 256               # Number of spatial grid points
    dx = L / N            # Grid spacing
    x = np.linspace(0, L, N, endpoint=False)

    # Initial condition: u(x,0) = sin(x) + 0.5*sin(0.5*x)
    u = np.sin(x) + 0.5 * np.sin(0.5 * x)
    
    # Time stepping parameters
    CFL = 0.5
    t = 0.0
    
    # Flux function for the Burgers' equation: f(u) = 0.5*u^2
    def flux(u_val):
        return 0.5 * u_val**2

    # Lax-Friedrichs scheme time stepping loop
    while t < T_final:
        # Compute time step based on CFL condition
        dt = CFL * dx / np.max(np.abs(u))
        if t + dt > T_final:
            dt = T_final - t

        # Periodic boundaries using np.roll
        u_right = np.roll(u, -1)
        u_left  = np.roll(u, 1)
        
        # Lax-Friedrichs update
        u_new = 0.5*(u_right + u_left) - (dt/(2*dx))*(flux(u_right) - flux(u_left))
        
        u = u_new.copy()
        t += dt

    # Save the final solution as a 1D NumPy array.
    np.save("u.npy", u)

if __name__ == "__main__":
    main()