#!/usr/bin/env python3
import numpy as np

# Domain parameters
Lx = 5.0  # width in x-direction
Ly = 4.0  # height in y-direction

# Discretization parameters
nx = 101  # number of grid points in x
ny = 81   # number of grid points in y
dx = Lx / (nx - 1)
dy = Ly / (ny - 1)

# Create grid
x = np.linspace(0, Lx, nx)
y = np.linspace(0, Ly, ny)

# Initialize temperature field T with zeros inside
T = np.zeros((ny, nx))

# Boundary conditions
# Left boundary x=0, T = 10
T[:, 0] = 10.0
# Right boundary x=5, T = 40
T[:, -1] = 40.0
# Bottom boundary y=0, T = 20
T[0, :] = 20.0
# Top boundary y=4, T = 0
T[-1, :] = 0.0

# Iterative solver parameters
tolerance = 1e-5
max_iter = 10000

# Iterative finite difference solver (Gauss-Seidel method)
for it in range(max_iter):
    T_old = T.copy()
    
    # Update interior points
    for j in range(1, ny-1):
        for i in range(1, nx-1):
            T[j, i] = 0.25 * (T[j, i+1] + T[j, i-1] + T[j+1, i] + T[j-1, i])
    
    # Calculate the maximum error
    error = np.max(np.abs(T - T_old))
    if error < tolerance:
        break

# Save the final solution as a 2D numpy array in file T.npy
np.save("T.npy", T)