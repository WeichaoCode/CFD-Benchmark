#!/usr/bin/env python3
import numpy as np

# Parameters
Lx = 5.0
Ly = 4.0
nx = 51  # number of grid points in x
ny = 41  # number of grid points in y
dx = Lx / (nx - 1)
dy = Ly / (ny - 1)
tol = 1e-6
max_iter = 10000

# Create coordinate arrays (not used in the iteration but can be useful)
x = np.linspace(0, Lx, nx)
y = np.linspace(0, Ly, ny)

# Initialize the temperature field with zeros.
T = np.zeros((ny, nx))

# Apply Dirichlet Boundary Conditions
T[:, 0] = 10.0   # Left boundary, x = 0
T[:, -1] = 40.0  # Right boundary, x = 5
T[0, :] = 20.0   # Bottom boundary, y = 0
T[-1, :] = 0.0   # Top boundary, y = 4

# Iterative solver using the Jacobi method
T_new = T.copy()
for it in range(max_iter):
    T_old = T_new.copy()
    # Update interior points
    for j in range(1, ny-1):
        for i in range(1, nx-1):
            T_new[j, i] = (((T_old[j, i+1] + T_old[j, i-1]) * dy**2 +
                            (T_old[j+1, i] + T_old[j-1, i]) * dx**2) /
                           (2 * (dx**2 + dy**2)))
    # Enforce boundary conditions (to ensure they remain fixed)
    T_new[:, 0] = 10.0
    T_new[:, -1] = 40.0
    T_new[0, :] = 20.0
    T_new[-1, :] = 0.0
    
    # Check convergence
    err = np.max(np.abs(T_new - T_old))
    if err < tol:
        break

# Save the final solution as a 2D NumPy array in T.npy
np.save('T.npy', T_new)