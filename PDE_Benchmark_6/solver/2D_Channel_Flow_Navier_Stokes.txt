Here's a Python code implementing the channel flow with Navier-Stokes equation solver.

```python
import numpy as np
from matplotlib import pyplot as plt, cm

def build_up_b(rho, dt, dx, dy, u, v):
    b = np.zeros_like(u)
    b[1:-1, 1:-1] = (
        rho * (1 / dt *
               ((u[1:-1, 2:] - u[1:-1, 0:-2]) / (2 * dx) +
                (v[2:, 1:-1] - v[0:-2, 1:-1]) / (2 * dy)) -
               ((u[1:-1, 2:] - u[1:-1, 0:-2]) / (2 * dx))**2 -
               2 * ((u[2:, 1:-1] - u[0:-2, 1:-1]) / (2 * dy) *
                    (v[1:-1, 2:] - v[1:-1, 0:-2]) / (2 * dx))-
               ((v[2:, 1:-1] - v[0:-2, 1:-1]) / (2 * dy))**2)
    )

    # Periodic BC Pressure @ x = 2
    b[-1, 1:-1] = (
        rho * (1 / dt *
               ((u[-1, 2:] - u[-1, 0:-2]) / (2 * dx) +
                (v[0, 1:-1] - v[-2, 1:-1]) / (2 * dy)) -
               ((u[-1, 2:] - u[-1, 0:-2]) / (2 * dx))**2 -
               2 * ((u[0, 1:-1] - u[-2, 1:-1]) / (2 * dy) *
                    (v[-1, 2:] - v[-1, 0:-2]) / (2 * dx)) -
               ((v[0, 1:-1] - v[-2, 1:-1]) / (2 * dy))**2)
    )

    return b

def pressure_poisson_periodic(p, dx, dy, b):
    pn = np.empty_like(p)

    for q in range(nt):
        pn = p.copy()
        p[1:-1, 1:-1] = (((pn[1:-1, 2:] + pn[1:-1, 0:-2]) * dy**2 +
                          (pn[2:, 1:-1] + pn[0:-2, 1:-1]) * dx**2) /
                         (2 * (dx**2 + dy**2)) -
                         dx**2 * dy**2 / (2 * (dx**2 + dy**2)) * b[1:-1, 1:-1])

        # Periodic BC Pressure @ x = 2
        p[-1, :-1] = (((pn[-1, 1:] + pn[-1, :-2]) * dy**2 +
                       (pn[0, :-1] + pn[-2, :-1]) * dx**2) /
                       (2 * (dx**2 + dy**2)) -
                       dx**2 * dy**2 / (2 * (dx**2 + dy**2)) * b[-1, :-1])
        # Periodic BC Pressure @ x = 0
        p[0, :-1] = p[-1, :-1]

    return p

def channel_flow(nt, u, v, dt, dx, dy, p, rho, nu, F):
    un = np.empty_like(u)
    vn = np.empty_like(v)
    b = np.zeros((ny, nx))

    for n in range(nt):
        un = u.copy()
        vn = v.copy()

        b = build_up_b(rho, dt, dx, dy, u, v)
        p = pressure_poisson_periodic(p, dx, dy, b)

        u[1:-1, 1:-1] = (un[1:-1, 1:-1] -
                         un[1:-1, 1:-1] * dt / dx *
                         (un[1:-1, 1:-1] - un[1:-1, 0:-2]) -
                         vn[1:-1, 1:-1] * dt / dy *
                         (un[1:-1, 1:-1] - un[0:-2, 1:-1]) -
                         dt / (2 * rho * dx) * (p[1:-1, 2:] - p[1:-1, 0:-2]) +
                         nu * (dt / dx**2 *
                               (un[1:-1, 2:] - 2 * un[1:-1, 1:-1] + un[1:-1, 0:-2]) +
                               dt / dy**2 *
                               (un[2:, 1:-1] - 2 * un[1:-1, 1:-1] + un[0:-2, 1:-1])) + F * dt)

        v[1:-1, 1:-1] = (vn[1:-1, 1:-1] -
                         un[1:-1, 1:-1] * dt / dx *
                         (vn[1:-1, 1:-1] - vn[1:-1, 0:-2]) -
                         vn[1:-1, 1:-1] * dt / dy *
                         (vn[1:-1, 1:-1] - vn[0:-2, 1:-1]) -
                         dt / (2 * rho * dy) * (p[2:, 1:-1] - p[0:-2, 1:-1]) +
                         nu * (dt / dx**2 *
                               (vn[1:-1, 2:] - 2 * vn[1:-1, 1:-1] + vn[1:-1, 0:-2]) +
                               dt / dy**2 *
                               (vn[2:, 1:-1] - 2 * vn[1:-1, 1:-1] + vn[0:-2, 1:-1])))

        # Periodic BC u @ x = 2
        u[-1, 1:-1] = (un[-1, 1:-1] -
                       un[-1, 1:-1] * dt / dx * (un[-1, 1:-1] - un[-1, 0:-2]) -
                       vn[-1, 1:-1] * dt / dy * (un[-1, 1:-1] - un[-2, 1:-1]) -
                       dt / (2 * rho * dx) * (p[-1, 2:] - p[-1, 0:-2]) +
                       nu * (dt / dx**2 *
                             (un[-1, 2:] - 2 * un[-1, 1:-1] + un[-1, 0:-2]) +
                             dt / dy**2 *
                             (un[0, 1:-1] - 2 * un[-1, 1:-1] + un[-2, 1:-1])) + F * dt)

        # Periodic BC u @ x = 0
        u[0, 1:-1] = (un[0, 1:-1] -
                      un[0, 1:-1] * dt / dx * (un[0, 1:-1] - un[0, 0:-2]) -
                      vn[0, 1:-1] * dt / dy * (un[0, 1:-1] - un[-1, 1:-1]) -
                      dt / (2 * rho * dx) * (p[0, 2:] - p[0, 0:-2]) +
                      nu * (dt / dx**2 *
                            (un[0, 2:] - 2 * un[0, 1:-1] + un[0, 0:-2]) +
                            dt / dy**2 *
                            (un[1, 1:-1] - 2 * un[0, 1:-1] + un[-1, 1:-1])) + F * dt)

        # Periodic BC v @ x = 2
        v[-1, 1:-1] = (vn[-1, 1:-1] -
                       un[-1, 1:-1] * dt / dx * (vn[-1, 1:-1] - vn[-1, 0:-2]) -
                       vn[-1, 1:-1] * dt / dy * (vn[-1, 1:-1] - vn[-2, 1:-1]) -
                       dt / (2 * rho * dy) * (p[0, 1:-1] - p[-2, 1:-1]) +
                       nu * (dt / dx**2 *
                             (vn[-1, 2:] - 2 * vn[-1, 1:-1] + vn[-1, 0:-2]) +
                             dt / dy**2 *
                             (vn[0, 1:-1] - 2 * vn[-1, 1:-1] + vn[-2, 1:-1])))

        # Periodic BC v @ x = 0
        v[0, 1:-1] = (vn[0, 1:-1] -
                      un[0, 1:-1] * dt / dx * (vn[0, 1:-1] - vn[0, 0:-2]) -
                      vn[0, 1:-1] * dt / dy * (vn[0, 1:-1] - vn[-1, 1:-1]) -
                      dt / (2 * rho * dy) * (p[1, 1:-1] - p[-1, 1:-1]) +
                      nu * (dt / dx**2 *
                            (vn[0, 2:] - 2 * vn[0, 1:-1] + vn[0, 0:-2]) +
                            dt / dy**2 *
                            (vn[1, 1:-1] - 2 * vn[0, 1:-1] + vn[-1, 1:-1])))

        # Wall BC: u,v = 0 @ y = 0,2
        u[:, 0] = 0
        u[:, -1] = 0
        v[:, 0] = 0
        v[:, -1]= 0

    return u, v, p

# Constants
nx = 41
ny = 41
nt = 10
dx = 2 / (nx - 1)
dy = 2 / (ny - 1)
x = np.linspace(0, 2, nx)
y = np.linspace(0, 2, ny)
rho = 1
nu = 0.1
F = 1
dt = 0.01

# Initialization
u = np.zeros((ny, nx))
v = np.zeros((ny, nx))
p = np.zeros((ny, nx))

# Run the solver
u, v, p = channel_flow(nt, u, v, dt, dx, dy, p, rho, nu, F)

# Plot the result
fig, (ax1, ax2) = plt.subplots(2, 1)
cf = ax1.contourf(x, y, u, cmap=cm.viridis)
fig.colorbar(cf, ax=ax1)
quiv = ax2.quiver(x[::2], y[::2], u[::2, ::2], v[::2, ::2])
plt.show()

# Save the results
np.save('velocity_u.npy', u)
np.save('velocity_v.npy', v)
np.save('pressure_p.npy', p)
```

This code first sets up the problem parameters, initializes the velocity and pressure fields, and solves the momentum and pressure equations using a time loop. The velocity and pressure fields are then plotted and saved at the end.