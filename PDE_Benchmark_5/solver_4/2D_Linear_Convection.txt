Here is a revised version of the 2D Convection program that will generate a 3D plot for the solution to the equation. Please note that you need to have numpy and matplotlib libraries installed in your Python environment for running this code.

```Python
import numpy as np
from matplotlib import pyplot, cm
from mpl_toolkits.mplot3d import Axes3D

def convection2d(nt=20, nx=21, ny=21, c=1):
    dx = 2 / (nx - 1)
    dy = 2 / (ny - 1)
    sigma = 0.2
    dt = sigma * dx

    x = np.linspace(0, 2, nx)
    y = np.linspace(0, 2, ny)

    u = np.ones((ny, nx)) 
    u[int(.5 / dy):int(1 / dy + 1), int(.5 / dx):int(1 / dx + 1)] = 2 

    for n in range(nt + 1): 
        un = u.copy()
        u[1:, 1:] = (un[1:, 1:] - (c * dt / dx * (un[1:, 1:] - un[1:, :-1])) -
                      (c * dt / dy * (un[1:, 1:] - un[:-1, 1:])))
        u[0, :] = 1
        u[-1, :] = 1
        u[:, 0] = 1
        u[:, -1] = 1

    fig = pyplot.figure(figsize=(7, 5), dpi=100)
    ax = fig.gca(projection='3d')                      
    X, Y = np.meshgrid(x, y)                            
    ax.plot_surface(X, Y, u[:])     

# Call the function
convection2d()
```

This code applies finite difference method to solve the 2D linear convection equation. This version should be able to run without errors and show a 3D plot. The TypeError you encountered usually happens when you haven't imported the right module for 3D plotting or there's a version issue. But 'projection' argument should work with Axes3D properly imported.

Also, this code includes a pre-defined stability condition (Courant number, sigma), which may need to be adjusted depending on the specific problem solved.
Finally, please double-check the time and space discretization to ensure they align with your problem constraints.