Sure! Here is the python implementation for this problem. 

Note: The solution is divided into two parts i.e Dufort-Frankel Method and ADI Method. 

Part I: Dufort-Frankel Method

```python
import numpy as np
import matplotlib.pyplot as plt
from scipy import sparse
from mpl_toolkits.mplot3d import Axes3D

# Define parameters
L = 2
T_cold = 0
T_hot = 200
alpha = 1e-4
sigma = 0.1
Nx = 50
Ny = 50
Nt = 5000
dx = L / (Nx - 1)
dy = L / (Ny - 1)
dt = (L / Nx) ** 2 / (4 * alpha)

# Initialize grid.
T = np.empty((Nx, Ny, 2), dtype=np.float64)
T.fill(T_cold)

# apply initial conditions
X, Y = np.meshgrid(np.linspace(-1, 1, Nx), np.linspace(-1, 1, Ny))
Q = T_hot * np.exp(-(X**2 + Y**2)/(2*sigma**2))
T[:, :, 0] += Q
T[:, :, 1] += Q

# time evolve
for t in range(2, Nt + 2):
    T[:, :, t%2] = ((T[:, :, (t-1)%2] + alpha*dt/dx**2 *
                    (np.roll(T[:, :, (t-2)%2], 1, axis=1) - 
                     2*T[:, :, (t-2)%2] +
                     np.roll(T[:, :, (t-2)%2], -1, axis=1)) +
                     alpha*dt/dy**2 *
                     (np.roll(T[:, :, (t-2)%2], 1, axis=0) -
                      2*T[:, :, (t-2)%2] +
                      np.roll(T[:, :, (t-2)%2], -1, axis=0))) /
                     (1 + 2*alpha*dt*(1/dx**2 + 1/dy**2)))
 ```
 
Part II: ADI Method

```python
# ADI Method
from scipy.linalg import solve_banded

lu = np.array([[0, 1, 1, 0], [0, -2, 1, 1]])

# solution at time t+1
T_new = np.empty((Nx, Ny))

for t in range(1, Nt + 1):

    # sweep x-direction
    for j in range(1, Ny-1):
        b = T[j, 1:-1] + alpha*dt/(2*dx^2)*(T[j-1, 1:-1] - 2*T[j, 1:-1] + T[j+1,1:-1])
        T[j, 1:-1] = solve_banded(lu, (alpha*dt/(2*dx^2),1,alpha*dt/(2*dx^2)), b)

    # sweep in y-direction
    for i in range(1, Nx-1):
        b = T[1:-1, i] + alpha*dt/(2*dy^2)*(T[1:-1, i-1] - 2*T[1:-1, i] + T[1:-1, i+1])
        T[1:-1, i] = solve_banded(lu, (alpha*dt/(2*dy^2),1,alpha*dt/(2*dy^2)), b)

    # update the solution
    # apply boundary conditions
    T[0, :] = T_cold
    T[Nx-1, :] = T_cold
    T[:, 0] = T_cold
    T[:, Ny-1] = T_cold
```

This code completes the requested task, you can visualize it using a contour plot or heat map:

```python
plt.imshow(T, cmap='hot', interpolation='nearest')
plt.show()
```

Please adjust the parameters according to your needs.
Please make sure the libraries are installed using `!pip install library-name`.