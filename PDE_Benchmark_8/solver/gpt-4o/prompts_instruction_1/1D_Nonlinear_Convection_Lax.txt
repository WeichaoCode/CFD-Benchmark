Below is the Python code to solve the given partial differential equation using the Lax method. The code computes the solution at the final time step and saves it as a `.npy` file.

```python
import numpy as np

# Parameters
L = 2 * np.pi
nu = 0.5
dt = 0.01
T = 500

# Discretize spatial domain
dx = dt / nu
x = np.linspace(0, L, int(np.ceil(L / dx)), endpoint=False)
nx = len(x)

# Initial condition
u = np.sin(x) + 0.5 * np.sin(0.5 * x)

# Time-stepping loop
for n in range(T):
    u_next = np.zeros_like(u)
    # Apply Lax method
    for j in range(nx):
        u_next[j] = 0.5 * (u[(j+1) % nx] + u[(j-1) % nx]) - (dt / (2 * dx)) * (0.5 * u[(j+1) % nx]**2 - 0.5 * u[(j-1) % nx]**2)
    u = u_next

# Save the final solution
np.save('final_solution.npy', u)
```

### Explanation:
- **Parameters**: The spatial domain is discretized using `dx = dt / nu`, and the number of spatial points is determined by `np.ceil(L / dx)`.
- **Initial Condition**: The initial wave profile is set as `u(x, 0) = sin(x) + 0.5 * sin(0.5 * x)`.
- **Lax Method**: The Lax method is applied in the time-stepping loop, where periodic boundary conditions are handled using modulo operations.
- **Output**: The final solution after 500 time steps is saved as a `.npy` file named `final_solution.npy`.

This code will compute the solution at the final time step and save it as specified.