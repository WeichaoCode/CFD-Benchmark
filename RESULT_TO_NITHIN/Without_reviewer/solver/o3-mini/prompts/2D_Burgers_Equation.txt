#!/usr/bin/env python3
import numpy as np

def main():
    # Physical parameters
    nu = 0.01  # kinematic viscosity
    t_final = 0.027

    # Domain discretization
    nx = 81
    ny = 81
    x = np.linspace(0, 2, nx)
    y = np.linspace(0, 2, ny)
    dx = x[1] - x[0]
    dy = y[1] - y[0]

    # Time stepping parameters
    dt = 0.001  # time step size

    # Create initial fields for u and v (2D arrays)
    u = np.ones((ny, nx))
    v = np.ones((ny, nx))

    # Set initial condition: u = v = 2 for 0.5 <= x, y <= 1; otherwise 1.
    X, Y = np.meshgrid(x, y)
    mask = (X >= 0.5) & (X <= 1) & (Y >= 0.5) & (Y <= 1)
    u[mask] = 2
    v[mask] = 2

    t = 0.0
    while t < t_final:
        un = u.copy()
        vn = v.copy()

        # Update interior points using finite differences (upwind for convection)
        # For u-equation
        u[1:-1,1:-1] = (un[1:-1,1:-1]
                        - dt * ( un[1:-1,1:-1] * (un[1:-1,1:-1] - un[1:-1,0:-2]) / dx
                               + vn[1:-1,1:-1] * (un[1:-1,1:-1] - un[0:-2,1:-1]) / dy )
                        + nu * dt * ( (un[1:-1,2:] - 2 * un[1:-1,1:-1] + un[1:-1,0:-2]) / dx**2
                                    + (un[2:,1:-1] - 2 * un[1:-1,1:-1] + un[0:-2,1:-1]) / dy**2 ) )

        # For v-equation
        v[1:-1,1:-1] = (vn[1:-1,1:-1]
                        - dt * ( un[1:-1,1:-1] * (vn[1:-1,1:-1] - vn[1:-1,0:-2]) / dx
                               + vn[1:-1,1:-1] * (vn[1:-1,1:-1] - vn[0:-2,1:-1]) / dy )
                        + nu * dt * ( (vn[1:-1,2:] - 2 * vn[1:-1,1:-1] + vn[1:-1,0:-2]) / dx**2
                                    + (vn[2:,1:-1] - 2 * vn[1:-1,1:-1] + vn[0:-2,1:-1]) / dy**2 ) )

        # Apply Dirichlet boundary conditions: u = v = 1 on all boundaries 
        u[0, :] = 1
        u[-1, :] = 1
        u[:, 0] = 1
        u[:, -1] = 1

        v[0, :] = 1
        v[-1, :] = 1
        v[:, 0] = 1
        v[:, -1] = 1

        t += dt
        # Ensure the last time step lands exactly on t_final
        if t + dt > t_final:
            dt = t_final - t

    # Save the final solutions as numpy arrays
    np.save("u.npy", u)
    np.save("v.npy", v)

if __name__ == "__main__":
    main()