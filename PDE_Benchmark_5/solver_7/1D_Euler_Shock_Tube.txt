Below is outlined Python program implementing the above steps:

```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
L = 1      # Length of the tube
T = 0.25   # Time
nx = 81    # Grid points
nt = 100   # Time steps
gamma = 1.4
CFL = 0.5

# Discretization
dx = L/(nx-1)
dt = CFL * dx

# Initialize
x = np.linspace(0, L, nx)
rho = np.where(x < 0.5, 1.0, 0.125)
u = np.zeros(nx)
p = np.where(x < 0.5, 1.0, 0.1)
U = np.array([rho, rho*u, p/(gamma-1) + 0.5*rho*u**2])

def computeF(U):
    rho = U[0]
    u = U[1]/rho
    p = (gamma-1)*(U[2] - 0.5*rho*u**2)
    return np.array([U[1], U[1]**2/rho + p, (U[2]+p)*u])

# MacCormack method
for n in range(nt):
    U_star = U[:,:-1] - dt/dx * (computeF(U[:,1:]) - computeF(U[:,:-1]))
    U[:,1:] = 0.5*(U[:,1:] + U_star - dt/dx * (computeF(U_star) - computeF(U[:,1:])))

# Convert back to primitive variables
rho = U[0]
u = U[1]/rho
p = (gamma-1)*(U[2] - 0.5*rho*u**2)

# Plots
plt.figure()
plt.plot(x, rho, label='Density')
plt.plot(x, u, label='Velocity')
plt.plot(x, p, label='Pressure')
plt.legend()
plt.show()
```

This program first initializes the parameters and then calculates the densities, velocities, and pressures in the tube at various time steps using the MacCormack method. The results are then plotted with Matplotlib. 

However, please implement this code with care as this is a relatively simple model and does not handle the effects of numerical instability or nonlinearity that can arise in more complex situations.