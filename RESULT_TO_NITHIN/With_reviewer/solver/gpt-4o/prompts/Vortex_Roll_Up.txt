```python
import numpy as np

# Parameters
nx, ny = 128, 128  # Grid points
Lx, Ly = 1.0, 1.0  # Domain size
dx, dy = Lx / nx, Ly / ny
nu = 0.001  # Kinematic viscosity
dt = 0.001  # Time step
nt = 1000  # Number of time steps

# Initialize fields
psi = np.zeros((ny, nx))
omega = np.zeros((ny, nx))

# Initial condition: pair of vortex layers
x = np.linspace(0, Lx, nx, endpoint=False)
y = np.linspace(0, Ly, ny, endpoint=False)
X, Y = np.meshgrid(x, y, indexing='ij')
omega = np.sin(2 * np.pi * X) * np.sin(2 * np.pi * Y)

# Time-stepping loop
for t in range(nt):
    # Solve Poisson equation for psi using finite difference method
    psi_new = np.copy(psi)
    for _ in range(50):  # Iterative solver
        psi_new[1:-1, 1:-1] = 0.25 * (psi[2:, 1:-1] + psi[:-2, 1:-1] + psi[1:-1, 2:] + psi[1:-1, :-2] - dx**2 * omega[1:-1, 1:-1])
        psi_new[0, :] = 0  # Dirichlet boundary condition
        psi_new[-1, :] = 0  # Dirichlet boundary condition
        psi_new[:, 0] = psi_new[:, -2]  # Periodic boundary condition
        psi_new[:, -1] = psi_new[:, 1]  # Periodic boundary condition
        psi = np.copy(psi_new)

    # Compute velocity field
    u = np.gradient(psi, axis=1) / dy
    v = -np.gradient(psi, axis=0) / dx

    # Solve vorticity transport equation
    omega_new = np.copy(omega)
    omega_new[1:-1, 1:-1] = (omega[1:-1, 1:-1] +
                             dt * (-u[1:-1, 1:-1] * (omega[1:-1, 2:] - omega[1:-1, :-2]) / (2 * dx) -
                                   v[1:-1, 1:-1] * (omega[2:, 1:-1] - omega[:-2, 1:-1]) / (2 * dy) +
                                   nu * ((omega[1:-1, 2:] - 2 * omega[1:-1, 1:-1] + omega[1:-1, :-2]) / dx**2 +
                                         (omega[2:, 1:-1] - 2 * omega[1:-1, 1:-1] + omega[:-2, 1:-1]) / dy**2)))

    # Periodic boundary conditions for omega
    omega_new[:, 0] = omega_new[:, -2]
    omega_new[:, -1] = omega_new[:, 1]

    # Update omega
    omega = np.copy(omega_new)

# Save final solutions
np.save('psi.npy', psi)
np.save('omega.npy', omega)
```