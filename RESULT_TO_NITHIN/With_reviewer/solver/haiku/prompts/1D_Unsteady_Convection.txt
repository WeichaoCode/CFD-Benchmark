```python
import numpy as np

# Domain parameters
L = 2.0  # Length of domain
nx = 200  # Number of cells
dx = L/nx  # Cell size
x = np.linspace(dx/2, L-dx/2, nx)  # Cell centers
dt = 0.001  # Time step
t_final = 2.5
nt = int(t_final/dt)  # Number of time steps

# Parameters
u = 0.2  # Velocity
m = 0.5  # Mean of Gaussian
s = 0.1  # Standard deviation of Gaussian

# Initialize solution array
phi = np.exp(-(x-m)**2/s**2)  # Initial condition

# Set ghost cells
phi_ghost_left = 0  # Left boundary
phi_ghost_right = 0  # Right boundary

# Time stepping
for n in range(nt):
    phi_old = phi.copy()
    
    # Update interior points using upwind scheme
    for i in range(nx):
        if i == 0:
            phi_left = phi_ghost_left
        else:
            phi_left = phi_old[i-1]
            
        if i == nx-1:
            phi_right = phi_ghost_right
        else:
            phi_right = phi_old[i]
            
        # Upwind flux
        flux_left = max(u, 0) * phi_left + min(u, 0) * phi_old[i]
        flux_right = max(u, 0) * phi_old[i] + min(u, 0) * phi_right
        
        # Update solution
        phi[i] = phi_old[i] - dt/dx * (flux_right - flux_left)

# Save final solution
np.save('phi.npy', phi)
```