Below is the Python code to solve the given steady-state heat equation using the Jacobi iteration method. The code will compute the temperature distribution over the specified domain and save the final solution as a `.npy` file.

```python
import numpy as np

# Define the domain and grid parameters
Lx, Ly = 5.0, 4.0  # Domain size
dx, dy = 0.05, 0.05  # Grid spacing
nx, ny = int(Lx/dx) + 1, int(Ly/dy) + 1  # Number of grid points

# Initialize the temperature field
T = np.zeros((ny, nx))

# Set the boundary conditions
T[:, 0] = 10.0  # Left boundary
T[:, -1] = 40.0  # Right boundary
T[0, :] = 0.0  # Top boundary
T[-1, :] = 20.0  # Bottom boundary

# Calculate beta
beta = dx / dy

# Convergence criteria
tolerance = 1e-4
max_iterations = 10000

# Jacobi iteration
for iteration in range(max_iterations):
    T_new = T.copy()
    
    # Update the interior points
    for j in range(1, ny-1):
        for i in range(1, nx-1):
            T_new[j, i] = (T[j, i+1] + T[j, i-1] + beta**2 * (T[j+1, i] + T[j-1, i])) / (2 * (1 + beta**2))
    
    # Check for convergence
    if np.max(np.abs(T_new - T)) < tolerance:
        print(f"Converged after {iteration+1} iterations.")
        break
    
    # Update the temperature field
    T = T_new

# Save the final solution to a .npy file
np.save('temperature_distribution.npy', T)
```

### Explanation:
- **Domain and Grid Setup**: The domain is discretized into a grid with specified spacing, and the number of grid points is calculated.
- **Boundary Conditions**: The temperature values are set according to the given Dirichlet boundary conditions.
- **Jacobi Iteration**: The temperature field is updated iteratively using the Jacobi method until the solution converges to within the specified tolerance.
- **Convergence Check**: The iteration stops when the maximum change in temperature between iterations is less than the tolerance.
- **Output**: The final temperature distribution is saved as a `.npy` file using NumPy.

This code will solve the steady-state heat equation and save the final temperature distribution in a 2D NumPy array.