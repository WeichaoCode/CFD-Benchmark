Below is the Python code to solve the given 2D heat equation using the Alternating Direction Implicit (ADI) method. The code initializes the temperature field, applies the ADI method for time-stepping, and saves the final temperature distribution to a `.npy` file.

```python
import numpy as np
import matplotlib.pyplot as plt
from scipy.linalg import solve_banded

# Parameters
alpha = 0.01  # Thermal diffusivity
Q0 = 200.0  # Source term strength
sigma = 0.1  # Source term spread
nx, ny = 41, 41  # Grid resolution
x = np.linspace(-1, 1, nx)
y = np.linspace(-1, 1, ny)
dx = x[1] - x[0]
dy = y[1] - y[0]
r = 0.25  # Stability parameter
dt = r * dx**2 / alpha
t_max = 3.0
nt = int(t_max / dt)

# Initialize temperature field
T = np.zeros((nx, ny))

# Source term
X, Y = np.meshgrid(x, y, indexing='ij')
q = Q0 * np.exp(-(X**2 + Y**2) / (2 * sigma**2))

# ADI method
def adi_step(T, q, alpha, dt, dx, dy):
    # Implicit in x-direction
    T_half = np.zeros_like(T)
    A = np.zeros((3, nx))
    B = np.zeros(nx)
    r_x = alpha * dt / (2 * dx**2)
    
    for j in range(1, ny-1):
        A[0, 1:] = -r_x
        A[1, :] = 1 + 2 * r_x
        A[2, :-1] = -r_x
        B[1:-1] = T[1:-1, j] + r_x * (T[2:, j] - 2 * T[1:-1, j] + T[:-2, j]) + dt * q[1:-1, j] / 2
        B[0] = B[-1] = 0  # Dirichlet boundary conditions
        T_half[:, j] = solve_banded((1, 1), A, B)
    
    # Implicit in y-direction
    T_new = np.zeros_like(T)
    A = np.zeros((3, ny))
    B = np.zeros(ny)
    r_y = alpha * dt / (2 * dy**2)
    
    for i in range(1, nx-1):
        A[0, 1:] = -r_y
        A[1, :] = 1 + 2 * r_y
        A[2, :-1] = -r_y
        B[1:-1] = T_half[i, 1:-1] + r_y * (T_half[i, 2:] - 2 * T_half[i, 1:-1] + T_half[i, :-2]) + dt * q[i, 1:-1] / 2
        B[0] = B[-1] = 0  # Dirichlet boundary conditions
        T_new[i, :] = solve_banded((1, 1), A, B)
    
    return T_new

# Time-stepping loop
for n in range(nt):
    T = adi_step(T, q, alpha, dt, dx, dy)

# Save the final solution
np.save('final_temperature.npy', T)

# Visualization
plt.contourf(X, Y, T, 20, cmap='hot')
plt.colorbar(label='Temperature (Â°C)')
plt.title('Temperature Distribution at t = {:.2f} s'.format(t_max))
plt.xlabel('x')
plt.ylabel('y')
plt.show()
```

This code sets up the problem, applies the ADI method for time-stepping, and saves the final temperature distribution to a file named `final_temperature.npy`. The visualization at the end shows the temperature distribution at the final time step.