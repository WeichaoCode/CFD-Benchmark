```python
import numpy as np

# Domain parameters
Lx = 2.0
Ly = 1.0
nx = 50
ny = 50
dx = Lx / (nx - 1)
dy = Ly / (ny - 1)

# Create grid
x = np.linspace(0, Lx, nx)
y = np.linspace(0, Ly, ny)
X, Y = np.meshgrid(x, y)

# Initialize p and b
p = np.zeros((ny, nx))
b = np.zeros((ny, nx))

# Define source terms
# Source 1: b = 100 at x=0.5, y=0.25
i1 = int(0.5 / dx)
j1 = int(0.25 / dy)
if i1 >= 0 and i1 < nx and j1 >= 0 and j1 < ny:
    b[j1, i1] = 100

# Source 2: b = -100 at x=1.5, y=0.75
i2 = int(1.5 / dx)
j2 = int(0.75 / dy)
if i2 >= 0 and i2 < nx and j2 >= 0 and j2 < ny:
    b[j2, i2] = -100

# Iterative solver parameters
tolerance = 1e-4
max_iterations = 10000
iteration = 0
diff = 1.0

# Gauss-Seidel iterative solver
while diff > tolerance and iteration < max_iterations:
    p_old = p.copy()
    
    # Update p using Gauss-Seidel formula
    for j in range(1, ny-1):
        for i in range(1, nx-1):
            p[j, i] = 0.25 * (p[j, i+1] + p[j, i-1] + p[j+1, i] + p[j-1, i] - dx**2 * b[j, i])
    
    # Compute the maximum difference from the old p
    diff = np.max(np.abs(p - p_old))
    iteration += 1

# Save the final solution
np.save('p.npy', p)
```