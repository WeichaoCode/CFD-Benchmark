#!/usr/bin/env python3
import numpy as np

# Domain parameters
nx = 101
ny = 101
Lx = 2.0
Ly = 2.0
dx = Lx / (nx - 1)
dy = Ly / (ny - 1)

# Time parameters
t_final = 0.32
CFL = 0.25  # CFL number for stability
# Maximum speed can be up to 2 (from initial condition), so choose dt accordingly
dt = CFL * min(dx, dy) / 2.0

# Create grid
x = np.linspace(0, Lx, nx)
y = np.linspace(0, Ly, ny)
X, Y = np.meshgrid(x, y)

# Initialize u and v with initial conditions
u = np.ones((ny, nx))
v = np.ones((ny, nx))
# Set central region: for 0.5 <= x,y <= 1, set u = v = 2
u[np.logical_and(X >= 0.5, X <= 1.0) & np.logical_and(Y >= 0.5, Y <= 1.0)] = 2.0
v[np.logical_and(X >= 0.5, X <= 1.0) & np.logical_and(Y >= 0.5, Y <= 1.0)] = 2.0

t = 0.0
while t < t_final:
    # Ensure we do not step past t_final
    if t + dt > t_final:
        dt = t_final - t

    # Create copies for updating
    u_new = u.copy()
    v_new = v.copy()
    
    # Update u and v for interior points using upwind scheme (backward differences)
    # For interior grid points: i = 1 to ny-2, j = 1 to nx-2
    # u_t + u*u_x + v*u_y = 0, use backward differences
    u_new[1:-1, 1:-1] = u[1:-1, 1:-1] - dt * (
         u[1:-1, 1:-1] * (u[1:-1, 1:-1] - u[1:-1, 0:-2]) / dx +
         v[1:-1, 1:-1] * (u[1:-1, 1:-1] - u[0:-2, 1:-1]) / dy
    )
    
    # v_t + u*v_x + v*v_y = 0
    v_new[1:-1, 1:-1] = v[1:-1, 1:-1] - dt * (
         u[1:-1, 1:-1] * (v[1:-1, 1:-1] - v[1:-1, 0:-2]) / dx +
         v[1:-1, 1:-1] * (v[1:-1, 1:-1] - v[0:-2, 1:-1]) / dy
    )
    
    # Apply Dirichlet boundary conditions: u = 1, v = 1 on all boundaries
    u_new[0, :] = 1.0
    u_new[-1, :] = 1.0
    u_new[:, 0] = 1.0
    u_new[:, -1] = 1.0
    v_new[0, :] = 1.0
    v_new[-1, :] = 1.0
    v_new[:, 0] = 1.0
    v_new[:, -1] = 1.0

    # Update solutions and time
    u = u_new.copy()
    v = v_new.copy()
    t += dt

# Save final solutions as 2D numpy arrays in .npy files
np.save('u.npy', u)
np.save('v.npy', v)