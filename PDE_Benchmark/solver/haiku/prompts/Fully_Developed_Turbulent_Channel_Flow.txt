```python
import numpy as np
from scipy.sparse import diags
from scipy.sparse.linalg import spsolve

# Parameters
Re_tau = 395
mu = 1/Re_tau
rho = 1.0
ny = 200
y = np.linspace(0, 2, ny)
dy = y[1] - y[0]

# Van Driest damping function for mixing length model
def van_driest(y_plus):
    A_plus = 26
    return 1 - np.exp(-y_plus/A_plus)

# Mixing length model for turbulent viscosity
def get_mut(u):
    dudy = np.gradient(u, dy)
    y_plus = np.abs(y - 1) * Re_tau
    kappa = 0.41
    mixing_length = kappa * np.abs(y - 1) * van_driest(y_plus)
    mut = mixing_length**2 * np.abs(dudy)
    return mut

# Setup sparse matrix system
def get_matrix(mu_eff):
    diag = np.zeros(ny)
    upper = np.zeros(ny-1)
    lower = np.zeros(ny-1)
    
    # Interior points
    for i in range(1, ny-1):
        mu_e = 0.5*(mu_eff[i] + mu_eff[i+1])
        mu_w = 0.5*(mu_eff[i] + mu_eff[i-1])
        
        diag[i] = -(mu_e + mu_w)/dy**2
        upper[i] = mu_e/dy**2
        lower[i-1] = mu_w/dy**2
    
    # Boundary conditions
    diag[0] = 1
    diag[-1] = 1
    
    A = diags([lower, diag, upper], [-1, 0, 1], format='csr')
    return A

# RHS vector
def get_rhs(mu_eff):
    b = np.ones(ny) * -1
    b[0] = 0  # u(0) = 0
    b[-1] = 0 # u(2) = 0
    return b

# Initial guess
u = np.zeros(ny)

# Iterative solution
max_iter = 100
tolerance = 1e-6

for iter in range(max_iter):
    u_old = u.copy()
    
    # Get turbulent viscosity
    mut = get_mut(u)
    mu_eff = mu + mut
    
    # Solve system
    A = get_matrix(mu_eff)
    b = get_rhs(mu_eff)
    u = spsolve(A, b)
    
    # Check convergence
    error = np.max(np.abs(u - u_old))
    if error < tolerance:
        break

# Save solution
np.save('u.npy', u)
```