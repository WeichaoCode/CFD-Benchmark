```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
Lx = 2.0
Ly = 1.0
nx = 50
ny = 50
dx = Lx / (nx - 1)
dy = Ly / (ny - 1)

# Initialize p and b
p = np.zeros((ny, nx))
p_new = np.zeros((ny, nx))
b = np.zeros((ny, nx))

# Set source terms
i1 = int(nx / 4)
j1 = int(ny / 4)
b[j1, i1] = 100

i2 = int(3 * nx / 4)
j2 = int(3 * ny / 4)
b[j2, i2] = -100

# Iterative solver parameters
tolerance = 1e-4
error = 1.0

# Jacobi iteration
while error > tolerance:
    p_new[1:-1, 1:-1] = (
        (p[2:, 1:-1] + p[:-2, 1:-1]) * dy**2 +
        (p[1:-1, 2:] + p[1:-1, :-2]) * dx**2 -
        b[1:-1, 1:-1] * dx**2 * dy**2
    ) / (2 * (dx**2 + dy**2))
    
    # Apply Dirichlet boundary conditions
    p_new[0, :] = 0
    p_new[-1, :] = 0
    p_new[:, 0] = 0
    p_new[:, -1] = 0
    
    # Compute the maximum difference
    error = np.max(np.abs(p_new - p))
    
    # Update p
    p[:, :] = p_new[:, :]

# Save the final pressure field
np.save('p.npy', p)

# Create a contour plot
x = np.linspace(0, Lx, nx)
y = np.linspace(0, Ly, ny)
X, Y = np.meshgrid(x, y)

plt.contourf(X, Y, p, levels=50, cmap='viridis')
plt.colorbar(label='Pressure')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Pressure Field Contour')
plt.show()
```