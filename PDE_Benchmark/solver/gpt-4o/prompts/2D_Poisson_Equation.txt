```python
import numpy as np
from scipy.sparse import diags
from scipy.sparse.linalg import spsolve

# Domain parameters
Lx, Ly = 2.0, 1.0
nx, ny = 50, 50  # Number of grid points
dx, dy = Lx / (nx - 1), Ly / (ny - 1)

# Create grid
x = np.linspace(0, Lx, nx)
y = np.linspace(0, Ly, ny)

# Initialize p and b
p = np.zeros((ny, nx))
b = np.zeros((ny, nx))

# Set source term b
b[int(ny/4), int(nx/4)] = 100
b[int(3*ny/4), int(3*nx/4)] = -100

# Discretization coefficients
dx2, dy2 = dx**2, dy**2
A = diags([-1/dx2, -1/dy2, 2/dx2 + 2/dy2, -1/dy2, -1/dx2], 
          [-nx, -1, 0, 1, nx], shape=(nx*ny, nx*ny)).tocsc()

# Apply boundary conditions
for i in range(nx):
    for j in range(ny):
        if i == 0 or i == nx-1 or j == 0 or j == ny-1:
            idx = j * nx + i
            A[idx, idx] = 1
            b[j, i] = 0

# Flatten b for solving
b_flat = b.flatten()

# Solve the linear system
p_flat = spsolve(A, b_flat)

# Reshape the solution back to 2D
p = p_flat.reshape((ny, nx))

# Save the solution
np.save('p.npy', p)
```