```python
import numpy as np

# Parameters
N = 256
x_min = 0.0
x_max = 2.0 * np.pi
t_final = 5.0
CFL = 0.4

# Discretization
x = np.linspace(x_min, x_max, N, endpoint=False)
dx = (x_max - x_min) / N

# Initial condition
u = np.sin(x) + 0.5 * np.sin(0.5 * x)

# Time-stepping
t = 0.0
while t < t_final:
    max_u = np.max(np.abs(u))
    dt = CFL * dx / max_u
    if t + dt > t_final:
        dt = t_final - t
    # Upwind scheme
    du_dx = np.where(u > 0, (u - np.roll(u, 1)) / dx, (np.roll(u, -1) - u) / dx)
    du_dt = -u * du_dx
    u += dt * du_dt
    t += dt

# Save the final solution
np.save('u.npy', u)
```