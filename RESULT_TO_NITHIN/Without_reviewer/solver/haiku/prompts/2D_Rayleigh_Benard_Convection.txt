```python
import numpy as np
from scipy.sparse import diags, linalg
from scipy.sparse.linalg import spsolve

# Parameters
Lx, Lz = 4.0, 1.0
Ra = 2e6
Pr = 1.0
nu = (Ra/Pr)**(-0.5)  
kappa = (Ra*Pr)**(-0.5)
T = 50.0

# Grid
nx, nz = 128, 64
dx = Lx/nx
dz = Lz/nz
x = np.linspace(0, Lx, nx)
z = np.linspace(0, Lz, nz)
X, Z = np.meshgrid(x, z, indexing='ij')

dt = 0.001
nt = int(T/dt)

# Initialize fields
u = np.zeros((nx,nz))
w = np.zeros((nx,nz))
p = np.zeros((nx,nz))
b = Lz - Z + 0.01*np.random.randn(nx,nz)

# Operators for pressure Poisson equation
dx2 = dx**2
dz2 = dz**2

def pressure_solve(u, w):
    # RHS of pressure Poisson equation
    rhs = np.zeros((nx,nz))
    rhs[1:-1,1:-1] = (
        (u[2:,1:-1] - u[:-2,1:-1])/(2*dx) + 
        (w[1:-1,2:] - w[1:-1,:-2])/(2*dz)
    )/dt
    
    # Solve using sparse matrix
    n = nx*nz
    A = diags([
        -2/(dx2) - 2/(dz2),  # center
        1/(dx2),             # right
        1/(dx2),             # left  
        1/(dz2),             # up
        1/(dz2)              # down
    ], [0, 1, -1, nx, -nx], shape=(n,n))
    
    p_new = spsolve(A.tocsr(), rhs.flatten()).reshape(nx,nz)
    return p_new

# Time stepping
for n in range(nt):
    
    # Temporary velocity fields
    ut = u.copy()
    wt = w.copy()
    bt = b.copy()
    
    # Advection-diffusion for velocities
    for i in range(1,nx-1):
        for j in range(1,nz-1):
            u[i,j] = ut[i,j] + dt*(
                -ut[i,j]*(ut[i+1,j]-ut[i-1,j])/(2*dx)
                -wt[i,j]*(ut[i,j+1]-ut[i,j-1])/(2*dz)
                +nu*((ut[i+1,j]-2*ut[i,j]+ut[i-1,j])/dx2 
                    +(ut[i,j+1]-2*ut[i,j]+ut[i,j-1])/dz2)
            )
            
            w[i,j] = wt[i,j] + dt*(
                -ut[i,j]*(wt[i+1,j]-wt[i-1,j])/(2*dx)
                -wt[i,j]*(wt[i,j+1]-wt[i,j-1])/(2*dz)
                +nu*((wt[i+1,j]-2*wt[i,j]+wt[i-1,j])/dx2
                    +(wt[i,j+1]-2*wt[i,j]+wt[i,j-1])/dz2)
                +bt[i,j]
            )
            
            b[i,j] = bt[i,j] + dt*(
                -ut[i,j]*(bt[i+1,j]-bt[i-1,j])/(2*dx)
                -wt[i,j]*(bt[i,j+1]-bt[i,j-1])/(2*dz)
                +kappa*((bt[i+1,j]-2*bt[i,j]+bt[i-1,j])/dx2
                       +(bt[i,j+1]-2*bt[i,j]+bt[i,j-1])/dz2)
            )
    
    # Periodic BCs in x
    u[0,:] = u[-2,:]
    u[-1,:] = u[1,:]
    w[0,:] = w[-2,:]
    w[-1,:] = w[1,:]
    b[0,:] = b[-2,:]
    b[-1,:] = b[1,:]
    
    # No-slip BCs in z
    u[:,0] = 0
    u[:,-1] = 0
    w[:,0] = 0
    w[:,-1] = 0
    
    # Temperature BCs in z
    b[:,0] = Lz
    b[:,-1] = 0
    
    # Pressure correction
    p = pressure_solve(u, w)
    
    # Velocity correction
    u[1:-1,1:-1] -= dt*(p[2:,1:-1] - p[:-2,1:-1])/(2*dx)
    w[1:-1,1:-1] -= dt*(p[1:-1,2:] - p[1:-1,:-2])/(2*dz)

# Save final solutions
np.save('u.npy', u)
np.save('w.npy', w) 
np.save('p.npy', p)
np.save('b.npy', b)
```