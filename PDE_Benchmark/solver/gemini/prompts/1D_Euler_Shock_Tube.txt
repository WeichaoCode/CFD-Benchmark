```python
import numpy as np

def solve_shock_tube():
    # Parameters
    gamma = 1.4
    nx = 200
    nt = 500
    xmin = -1.0
    xmax = 1.0
    t_final = 0.25
    dx = (xmax - xmin) / nx
    dt = t_final / nt

    # Initialize grid
    x = np.linspace(xmin + dx/2, xmax - dx/2, nx)

    # Initial conditions
    rho = np.where(x < 0, 1.0, 0.125)
    u = np.zeros_like(x)
    p = np.where(x < 0, 1.0, 0.1)
    E = p / ((gamma - 1) * rho) + 0.5 * u**2

    # Conservative variables
    U = np.stack([rho, rho * u, rho * E])

    # Numerical flux (Lax-Friedrichs)
    def lax_friedrichs_flux(U_L, U_R, gamma):
        rho_L, rhou_L, rhoE_L = U_L
        rho_R, rhou_R, rhoE_R = U_R
        
        u_L = rhou_L / rho_L
        u_R = rhou_R / rho_R
        E_L = rhoE_L / rho_L
        E_R = rhoE_R / rho_R
        
        p_L = (gamma - 1) * rho_L * (E_L - 0.5 * u_L**2)
        p_R = (gamma - 1) * rho_R * (E_R - 0.5 * u_R**2)
        
        F_L = np.array([rhou_L, rho_L * u_L**2 + p_L, u_L * (rhoE_L + p_L)])
        F_R = np.array([rhou_R, rho_R * u_R**2 + p_R, u_R * (rhoE_R + p_R)])
        
        lambda_max = np.max(np.abs([u_L + np.sqrt(gamma * p_L / rho_L), u_R + np.sqrt(gamma * p_R / rho_R)]))
        
        F_LF = 0.5 * (F_L + F_R) - 0.5 * lambda_max * (U_R - U_L)
        
        return F_LF

    # Time loop
    for _ in range(nt):
        # Compute fluxes
        F = np.zeros_like(U)
        for i in range(nx - 1):
            F[:, i] = lax_friedrichs_flux(U[:, i], U[:, i+1], gamma)

        # Boundary conditions (reflective)
        U[:, 0] = U[:, 1]
        U[:, nx - 1] = U[:, nx - 2]
        F[:,0] = np.array([0,0,0])
        F[:,nx-1] = np.array([0,0,0])

        # Update solution
        for i in range(1, nx - 1):
            U[:, i] = U[:, i] - dt / dx * (F[:, i] - F[:, i-1])

        # Update primitive variables
        rho = U[0, :]
        u = U[1, :] / rho
        E = U[2, :] / rho
        p = (gamma - 1) * rho * (E - 0.5 * u**2)

    # Save final solution
    np.save('rho.npy', rho)
    np.save('u.npy', u)
    np.save('p.npy', p)

solve_shock_tube()
```