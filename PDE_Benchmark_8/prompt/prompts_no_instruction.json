{
  "prompts": {
    "1D_Burgers_Equation": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n  \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} = \\nu \\frac{\\partial^2 u}{\\partial x^2}\n\\]\n\nwhere:\n- \\( u(x,t) \\) is the velocity field\n- \\( \\nu = 0.07 \\) is the viscosity coefficient\n- \\( x \\) is the spatial coordinate\n- \\( t \\) is time\n\n**Boundary Conditions:**\nPeriodic boundary conditions:\n\\[\n  u(0) = u(2\\pi)\n\\]\n\n**Initial Conditions:**\n\\[\n  u = -\\frac{2\\nu}{\\phi} \\frac{\\partial \\phi}{\\partial x} + 4\n\\]\nwhere:\n\\[\n  \\phi = \\exp\\left(\\frac{-x^2}{4\\nu}\\right) + \\exp\\left(\\frac{-(x - 2\\pi)^2}{4\\nu}\\right)\n\\]\n\n**Domain:**\n- Spatial domain: \\( x \\in [0, 2\\pi] \\), discretized into \\( nx = 101 \\) grid points\n- Temporal domain: \\( nt = 100 \\) time steps\n- Spatial resolution: \\( dx = \\frac{2\\pi}{nx - 1} \\)\n- Time step: \\( dt = dx \\times \\nu \\)\n\n**Numerical Method:**\nUse a finite difference scheme to discretize the PDE.\n\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "1D_Diffusion": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n  \\frac{\\partial u}{\\partial t} = \\nu \\frac{\\partial^2 u}{\\partial x^2}\n\\]\n\nwhere:\n- \\( u(x,t) \\) is the diffused quantity (e.g., temperature, concentration)\n- \\( \\nu = 0.3 \\) is the diffusion coefficient\n- \\( x \\) is the spatial coordinate\n- \\( t \\) is time\n\n**Boundary Conditions:**\nDirichlet boundary conditions:\n\\[\n  u(0) = 1, \\quad u(1) = 0\n\\]\n\n**Initial Conditions:**\nAt \\( t = 0 \\),\n\\[\n  u(x,0) = 2 \\quad \\text{for } 0.5 \\leq x \\leq 1, \\quad u = 1 \\quad \\text{elsewhere}\n\\]\n\n**Domain:**\n- Spatial domain: \\( x \\in [0, 1] \\), discretized into \\( nx = 41 \\) grid points\n- Temporal domain: \\( nt = 20 \\) time steps\n- Spatial resolution: \\( dx = 2 / (nx - 1) \\)\n- Time step: \\( dt = \\sigma \\cdot dx^2 / \\nu \\), with \\( \\sigma = 0.2 \\)\n\n**Numerical Method:**\nUse a finite difference scheme to discretize the PDE.\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "1D_Euler_Shock_Tube": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n  \\frac{\\partial \\mathbf{U}}{\\partial t} + \\frac{\\partial \\mathbf{F}}{\\partial x} = 0\n\\]\n\nwhere:\n- \\( \\rho \\): Density  \n- \\( u \\): Velocity  \n- \\( p \\): Pressure  \n- \\( E = \\frac{p}{(\\gamma - 1)\\rho} + \\frac{u^2}{2} \\): Total energy per unit mass  \n- \\( \\gamma = 1.4 \\): Ratio of specific heats (for air)\n- \\( \\mathbf{U} = [\\rho, \\rho u, \\rho E]^T \\): Conservative variables\n- \\( \\mathbf{F} = [\\rho u, \\rho u^2 + p, u(\\rho E + p)]^T \\): Flux vector\n\n**Boundary Conditions:**\nReflective (no-flux) boundary conditions at both ends of the tube.\n\n**Initial Conditions:**\nShock tube initially divided at \\( x = 0 \\):\n- Left region (\\( x < 0 \\)):\n  - \\( \\rho_L = 1.0 \\)\n  - \\( u_L = 0.0 \\)\n  - \\( p_L = 1.0 \\)\n- Right region (\\( x \\geq 0 \\)):\n  - \\( \\rho_R = 0.125 \\)\n  - \\( u_R = 0.0 \\)\n  - \\( p_R = 0.1 \\)\n\n**Domain:**\n- Spatial domain: \\( x \\in [-1, 1] \\), discretized into \\( N_x = 81 \\) grid points\n- Temporal domain: \\( t \\in [0, 0.25] \\)\n- Tube length: \\( L = 2.0 \\)\n- CFL = 1.0\n- Time step \\( \\Delta t \\) determined using CFL\n\n**Numerical Method:**\nMacCormack method (predictor-corrector scheme) for solving hyperbolic systems.\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "1D_Linear_Convection_explicit_euler": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n  \\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} = \\epsilon \\frac{\\partial^2 u}{\\partial x^2}\n\\]\n\nwhere:\n- \\( u(x,t) \\): wave amplitude\n- \\( c = 1 \\): convection speed\n- \\( \\epsilon \\): damping factor (0 for undamped, 5e-4 for damped)\n\n**Boundary Conditions:**\nPeriodic boundary conditions:\n\\[\n  u(x_{start}) = u(x_{end})\n\\]\n\n**Initial Conditions:**\n\\[\n  u(x,0) = e^{-x^2}\n\\]\n\n**Domain:**\n- Spatial domain: \\( x \\in [-5, 5] \\), with \\( N_x = 101 \\) grid points\n- Time step \\( \\Delta t \\): determined using CFL condition\n- Damping cases: \\( \\epsilon = 0 \\) and \\( \\epsilon = 5 \\times 10^{-4} \\)\n\n**Numerical Method:**\nExplicit Euler method for time integration and 2nd-order central difference for spatial discretization.\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "1D_Linear_Convection_adams": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n  \\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} = \\epsilon \\frac{\\partial^2 u}{\\partial x^2}\n\\]\n\nwhere:\n- \\( u(x,t) \\): wave amplitude\n- \\( c = 1 \\): convection speed\n- \\( \\epsilon \\): damping factor (0 for undamped, 5e-4 for damped)\n\n**Boundary Conditions:**\nPeriodic boundary conditions:\n\\[\n  u(x_{start}) = u(x_{end})\n\\]\n\n**Initial Conditions:**\n\\[\n  u(x,0) = e^{-x^2}\n\\]\n\n**Domain:**\n- Spatial domain: \\( x \\in [-5, 5] \\), with \\( N_x = 101 \\) grid points\n- Time step \\( \\Delta t \\): determined using CFL condition\n- Damping cases: \\( \\epsilon = 0 \\) and \\( \\epsilon = 5 \\times 10^{-4} \\)\n\n**Numerical Method:**\nAdams-Bashforth method for time integration and 2nd-order central difference for spatial discretization. First step is computed using Explicit Euler.\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "1D_Linear_Convection_corr": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n  \\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} = \\epsilon \\frac{\\partial^2 u}{\\partial x^2}\n\\]\n\nwhere:\n- \\( u(x,t) \\): wave amplitude\n- \\( c = 1 \\): convection speed\n- \\( \\epsilon \\): damping factor (0 for undamped, 5e-4 for damped)\n\n**Boundary Conditions:**\nPeriodic boundary conditions:\n\\[\n  u(x_{start}) = u(x_{end})\n\\]\n\n**Initial Conditions:**\n\\[\n  u(x,0) = e^{-x^2}\n\\]\n\n**Domain:**\n- Spatial domain: \\( x \\in [-5, 5] \\), with \\( N_x = 101 \\) grid points\n- Time step \\( \\Delta t \\): determined using CFL condition\n- Damping cases: \\( \\epsilon = 0 \\) and \\( \\epsilon = 5 \\times 10^{-4} \\)\n\n**Numerical Method:**\nPredictor-Corrector method for time integration and 2nd-order central difference for spatial discretization.\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "1D_Linear_Convection_rk": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n  \\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} = \\epsilon \\frac{\\partial^2 u}{\\partial x^2}\n\\]\n\nwhere:\n- \\( u(x,t) \\): wave amplitude\n- \\( c = 1 \\): convection speed\n- \\( \\epsilon \\): damping factor (0 for undamped, 5e-4 for damped)\n\n**Boundary Conditions:**\nPeriodic boundary conditions:\n\\[\n  u(x_{start}) = u(x_{end})\n\\]\n\n**Initial Conditions:**\n\\[\n  u(x,0) = e^{-x^2}\n\\]\n\n**Domain:**\n- Spatial domain: \\( x \\in [-5, 5] \\), with \\( N_x = 101 \\) grid points\n- Time step \\( \\Delta t \\): determined using CFL condition\n- Damping cases: \\( \\epsilon = 0 \\) and \\( \\epsilon = 5 \\times 10^{-4} \\)\n\n**Numerical Method:**\n4th-order Runge-Kutta (RK4) method for time integration and 2nd-order central difference for spatial discretization.\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "1D_Nonlinear_Convection_Lax": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n  \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} = 0\n\\]\n\nwhere:\n- \\( u(x,t) \\): wave amplitude\n- \\( x \\): spatial coordinate\n- \\( t \\): time\n\n**Boundary Conditions:**\nPeriodic boundary conditions:\n\\[\n  u(0, t) = u(2\\pi, t)\n\\]\n\n**Initial Conditions:**\n\\[\n  u(x, 0) = \\sin(x) + 0.5 \\sin(0.5x)\n\\]\n\n**Domain:**\n- Spatial domain: \\( x \\in [0, 2\\pi] \\), discretized using:\n  \\[\n  x = \\text{np.linspace}(0, L, \\text{math.ceil}(L / (dt / \\nu)))\n  \\]\n  with \\( L = 2\\pi \\), \\( \\nu = 0.5 \\), \\( dt = 0.01 \\), so \\( dx = dt / \\nu \\)\n- Temporal domain: \\( T = 500 \\) time steps\n\n**Numerical Method:**\nLax method for time integration\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "1D_Nonlinear_Convection_LW": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n  \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} = 0\n\\]\n\nwhere:\n- \\( u(x,t) \\): wave amplitude\n- \\( x \\): spatial coordinate\n- \\( t \\): time\n\n**Boundary Conditions:**\nPeriodic boundary conditions:\n\\[\n  u(0, t) = u(2\\pi, t)\n\\]\n\n**Initial Conditions:**\n\\[\n  u(x, 0) = \\sin(x) + 0.5 \\sin(0.5x)\n\\]\n\n**Domain:**\n- Spatial domain: \\( x \\in [0, 2\\pi] \\), discretized using:\n  \\[\n  x = \\text{np.linspace}(0, L, \\text{math.ceil}(L / (dt / \\nu)))\n  \\]\n  with \\( L = 2\\pi \\), \\( \\nu = 0.5 \\), \\( dt = 0.01 \\), so \\( dx = dt / \\nu \\)\n- Temporal domain: \\( T = 500 \\) time steps\n\n**Numerical Method:**\nLax-Wendroff method for time integration\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "1D_Nonlinear_Convection_MK": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n  \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} = 0\n\\]\n\nwhere:\n- \\( u(x,t) \\): wave amplitude\n- \\( x \\): spatial coordinate\n- \\( t \\): time\n\n**Boundary Conditions:**\nPeriodic boundary conditions:\n\\[\n  u(0, t) = u(2\\pi, t)\n\\]\n\n**Initial Conditions:**\n\\[\n  u(x, 0) = \\sin(x) + 0.5 \\sin(0.5x)\n\\]\n\n**Domain:**\n- Spatial domain: \\( x \\in [0, 2\\pi] \\), discretized using:\n  \\[\n  x = \\text{np.linspace}(0, L, \\text{math.ceil}(L / (dt / \\nu)))\n  \\]\n  with \\( L = 2\\pi \\), \\( \\nu = 0.5 \\), \\( dt = 0.01 \\), so \\( dx = dt / \\nu \\)\n- Temporal domain: \\( T = 500 \\) time steps\n\n**Numerical Method:**\nMacCormack method for time integration\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Burgers_Equation": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\begin{align*}\n\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} &= \\nu \\left( \\frac{\\partial^2 u}{\\partial x^2} + \\frac{\\partial^2 u}{\\partial y^2} \\right) \\\\\n\\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} &= \\nu \\left( \\frac{\\partial^2 v}{\\partial x^2} + \\frac{\\partial^2 v}{\\partial y^2} \\right)\n\\end{align*}\n\\]\n\nwhere:\n- \\( u(x,y,t) \\), \\( v(x,y,t) \\): velocity components in x and y\n- \\( \\nu = 0.01 \\): kinematic viscosity\n\n**Boundary Conditions:**\nDirichlet boundary conditions:\n\\[\n  u = 1, \\quad v = 1 \\text{ on all boundaries}\n\\]\n\n**Initial Conditions:**\nSet \\( u = 1 \\), \\( v = 1 \\) throughout the domain, except:\n\\[\n  u = v = 2 \\quad \\text{for } 0.5 \\leq x, y \\leq 1\n\\]\n\n**Domain:**\n- Spatial domain: \\( x, y \\in [0, 2] \\)\n- Grid size: \\( n_x = n_y = 41 \\), \\( dx = dy = \\frac{2}{n_x - 1} \\)\n- Time domain: \\( nt = 120 \\) time steps\n- CFL-related values: \\( \\sigma = 0.0009 \\), \\( dt = \\sigma \\cdot dx \\cdot dy / \\nu \\)\n\n**Numerical Method:**\nUse a finite difference scheme to discretize the PDE.\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Convection": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\begin{align*}\n\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} &= 0 \\\\\n\\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} &= 0\n\\end{align*}\n\\]\n\nwhere:\n- \\( u(x,y,t) \\), \\( v(x,y,t) \\): velocity components in x and y\n\n**Boundary Conditions:**\nDirichlet boundary conditions:\n\\[\n  u = 1, \\quad v = 1 \\text{ on all boundaries}\n\\]\n\n**Initial Conditions:**\nSet \\( u = 1 \\), \\( v = 1 \\) throughout the domain, except:\n\\[\n  u = v = 2 \\quad \\text{for } 0.5 \\leq x, y \\leq 1\n\\]\n\n**Domain:**\n- Spatial domain: \\( x, y \\in [0, 2] \\)\n- Grid size: \\( n_x = n_y = 101 \\), \\( dx = dy = \\frac{2}{n_x - 1} \\)\n- Time domain: \\( nt = 80 \\) time steps\n- CFL-related values: \\( \\sigma = 0.2 \\), \\( dt = \\sigma \\cdot dx \\)\n\n**Numerical Method:**\nUse a finite difference scheme to discretize the PDE.\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Diffusion": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\frac{\\partial u}{\\partial t} = \\nu \\left( \\frac{\\partial^2 u}{\\partial x^2} + \\frac{\\partial^2 u}{\\partial y^2} \\right)\n\\]\n\nwhere:\n- \\( u(x,y,t) \\): diffused scalar field (e.g., temperature, concentration)\n- \\( \\nu = 1.0 \\): diffusion coefficient\n\n**Boundary Conditions:**\nDirichlet boundary conditions:\n\\[\n  u = 1 \\quad \\text{on all boundaries}\n\\]\n\n**Initial Conditions:**\nSet \\( u = 2 \\) in region \\( 0.5 \\leq x, y \\leq 1 \\), \\( u = 1 \\) elsewhere\n\n**Domain:**\n- Spatial domain: \\( x, y \\in [0, 2] \\)\n- Grid size: \\( n_x = n_y = 31 \\), \\( dx = dy = \\frac{2}{n_x - 1} \\)\n- Time domain: \\( nt = 50 \\) time steps\n- CFL-related values: \\( \\sigma = 0.25 \\), \\( dt = \\sigma \\cdot dx \\cdot dy / \\nu \\)\n\n**Numerical Method:**\nUse a finite difference scheme to discretize the PDE.\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Diffusion_FVM": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\nabla \\cdot ( \\mu \\nabla w ) - \\frac{dP}{dz} = 0\n\\]\n\nwhere:\n- \\( w(x,y) \\): velocity component in the z-direction\n- \\( \\mu = 1 \\times 10^{-3} \\): dynamic viscosity (Pa\u00b7s)\n- \\( \\frac{dP}{dz} = -3.2 \\): pressure gradient (Pa/m)\n- \\( \\nabla \\): 2D gradient operator\n\n**Boundary Conditions:**\nDirichlet boundary conditions:\n\\[\n  w = 0 \\text{ (no-slip) on all boundaries}\n\\]\n\n**Initial Conditions:**\nInitialize \\( w = 0 \\) throughout the domain\n\n**Domain:**\n- Spatial domain: square duct with \\( h = 0.1 \\) m\n- Grid size: \\( n_x = n_y = 80 \\), \\( dx = dy = h / (n_x - 1) \\)\n- Steady-state problem: no time stepping\n\n**Numerical Method:**\nFinite Volume Method (FVM)\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Inviscid_Burgers_FOU": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\begin{align*}\n\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} &= 0 \\\\\n\\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} &= 0\n\\end{align*}\n\\]\n\nwhere:\n- \\( u(x,y,t), v(x,y,t) \\): velocity components in the x and y directions\n\n**Boundary Conditions:**\nDirichlet boundary conditions:\n\\[\n  u = 1, \\quad v = 1 \\text{ on all boundaries}\n\\]\n\n**Initial Conditions:**\nSet \\( u = v = 2 \\) for \\( 0.5 \\leq x \\leq 1 \\) and \\( 0.5 \\leq y \\leq 1 \\); else set \\( u = v = 1 \\)\n\n**Domain:**\n- Spatial domain: \\( x, y \\in [0, 2] \\)\n- Grid size: \\( nx = ny = 151 \\), \\( dx = \\frac{2}{nx - 1} \\), \\( dy = \\frac{2}{ny - 1} \\)\n- Time domain: \\( nt = 300 \\) steps, \\( \\sigma = 0.2 \\), \\( dt = \\sigma \\cdot \\frac{\\min(dx, dy)}{2} \\)\n\n**Numerical Method:**\nFinite Difference Method: First-Order Upwind scheme\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Inviscid_Burgers_MK": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\begin{align*}\n\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} &= 0 \\\\\n\\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} &= 0\n\\end{align*}\n\\]\n\nwhere:\n- \\( u(x,y,t), v(x,y,t) \\): velocity components in the x and y directions\n\n**Boundary Conditions:**\nDirichlet boundary conditions:\n\\[\n  u = 1, \\quad v = 1 \\text{ on all boundaries}\n\\]\n\n**Initial Conditions:**\nSet \\( u = v = 2 \\) for \\( 0.5 \\leq x \\leq 1 \\) and \\( 0.5 \\leq y \\leq 1 \\); else set \\( u = v = 1 \\)\n\n**Domain:**\n- Spatial domain: \\( x, y \\in [0, 2] \\)\n- Grid size: \\( nx = ny = 151 \\), \\( dx = \\frac{2}{nx - 1} \\), \\( dy = \\frac{2}{ny - 1} \\)\n- Time domain: \\( nt = 300 \\), \\( \\sigma = 0.2 \\), \\( dt = \\sigma \\cdot \\frac{\\min(dx, dy)}{2} \\)\n\n**Numerical Method:**\nFinite Difference Method: MacCormack Method\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Laplace_Equation": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\frac{\\partial^2 p}{\\partial x^2} + \\frac{\\partial^2 p}{\\partial y^2} = 0\n\\]\n\nwhere:\n- \\( p(x,y) \\): scalar potential field (e.g., temperature, electric potential)\n\n**Boundary Conditions:**\n- Left boundary \\( (x = 0) \\): \\( p = 0 \\)\n- Right boundary \\( (x = 2) \\): \\( p = y \\)\n- Top and bottom boundaries \\( (y = 0, 1) \\): Neumann condition \\( \\partial p / \\partial y = 0 \\)\n\n**Initial Conditions:**\nSet \\( p = 0 \\) throughout the domain initially\n\n**Domain:**\n- Spatial domain: \\( x \\in [0, 2], y \\in [0, 1] \\)\n- Grid resolution: \\( nx = 31, ny = 31 \\)\n- Spatial steps: \\( dx = 2 / (nx - 1), dy = 1 / (ny - 1) \\)\n\n**Numerical Method:**\nFinite Difference Method\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Linear_Convection": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} + c \\frac{\\partial u}{\\partial y} = 0\n\\]\n\nwhere:\n- \\( u(x, y, t) \\): scalar quantity being transported\n- \\( c \\): convection speed in both x and y directions\n\n**Boundary Conditions:**\nDirichlet boundary conditions:\n\\[\n  u = 1 \\quad \\text{for } x = 0, 2 \\text{ and } y = 0, 2\n\\]\n\n**Initial Conditions:**\nSet \\( u = 2 \\) for \\( 0.5 \\leq x \\leq 1 \\) and \\( 0.5 \\leq y \\leq 1 \\); \\( u = 1 \\) elsewhere\n\n**Domain:**\n- Spatial domain: \\( x, y \\in [0, 2] \\)\n- Grid size: \\( nx = ny = 81 \\), \\( dx = dy = \\frac{2}{80} \\)\n- Time domain: \\( nt = 100 \\) time steps\n- CFL-related values: \\( \\sigma = 0.2 \\), \\( dt = \\sigma \\cdot \\min(dx, dy) / c \\)\n\n**Numerical Method:**\nFinite Difference Method\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Navier_Stokes_Cavity": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial x} + \\nu \\left( \\frac{\\partial^2 u}{\\partial x^2} + \\frac{\\partial^2 u}{\\partial y^2} \\right)\n\\]\n\\[\n\\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial y} + \\nu \\left( \\frac{\\partial^2 v}{\\partial x^2} + \\frac{\\partial^2 v}{\\partial y^2} \\right)\n\\]\n\\[\n\\frac{\\partial^2 p}{\\partial x^2} + \\frac{\\partial^2 p}{\\partial y^2} = -\\rho \\left( \\frac{\\partial u}{\\partial x} \\frac{\\partial u}{\\partial x} + 2 \\frac{\\partial u}{\\partial y} \\frac{\\partial v}{\\partial x} + \\frac{\\partial v}{\\partial y} \\frac{\\partial v}{\\partial y} \\right)\n\\]\n\nwhere:\n- \\( u, v \\): velocity components in x and y directions\n- \\( p \\): pressure field\n- \\( \\rho = 1 \\): fluid density\n- \\( \\nu = 0.1 \\): kinematic viscosity\n\n**Boundary Conditions:**\n- Top boundary (lid-driven): \\( u = 1, v = 0 \\)\n- Other walls: no-slip (\\( u = 0, v = 0 \\))\n- Pressure:\n  - \\( \\frac{\\partial p}{\\partial y} = 0 \\) at \\( y = 0 \\)\n  - \\( p = 0 \\) at \\( y = 2 \\)\n  - \\( \\frac{\\partial p}{\\partial x} = 0 \\) at \\( x = 0, 2 \\)\n\n**Initial Conditions:**\n\\[\n  u = 0, \\quad v = 0, \\quad p = 0 \\text{ everywhere in the domain}\n\\]\n\n**Domain:**\n- Spatial domain: \\( x, y \\in [0, 2] \\)\n- Grid size: \\( nx = ny = 51 \\), \\( dx = dy = \\frac{2}{50} \\)\n- Time domain: \\( nt = 500 \\), \\( dt = 0.001 \\)\n\n**Numerical Method:**\nFinite Difference Method\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Navier_Stokes_Channel": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial x} + \\nu \\left( \\frac{\\partial^2 u}{\\partial x^2} + \\frac{\\partial^2 u}{\\partial y^2} \\right) + F\n\\]\n\\[\n\\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial y} + \\nu \\left( \\frac{\\partial^2 v}{\\partial x^2} + \\frac{\\partial^2 v}{\\partial y^2} \\right)\n\\]\n\\[\n\\frac{\\partial^2 p}{\\partial x^2} + \\frac{\\partial^2 p}{\\partial y^2} = -\\rho \\left( \\frac{\\partial u}{\\partial x}^2 + 2 \\frac{\\partial u}{\\partial y} \\frac{\\partial v}{\\partial x} + \\frac{\\partial v}{\\partial y}^2 \\right)\n\\]\n\nwhere:\n- \\( u(x,y,t) \\), \\( v(x,y,t) \\): velocity components\n- \\( p(x,y,t) \\): pressure field\n- \\( \\rho = 1 \\): fluid density\n- \\( \\nu = 0.1 \\): kinematic viscosity\n- \\( F = 1 \\): external force in the x-direction\n\n**Boundary Conditions:**\n- Periodic boundary conditions in x-direction for \\( u, v, p \\)\n- No-slip boundary conditions in y-direction: \\( u = 0, v = 0 \\)\n- \\( \\frac{\\partial p}{\\partial y} = 0 \\) at \\( y = 0, 2 \\)\n\n**Initial Conditions:**\n\\[\n  u = 0, \\quad v = 0, \\quad p = 0 \\text{ everywhere in the domain}\n\\]\n\n**Domain:**\n- Spatial domain: \\( x, y \\in [0, 2] \\)\n- Grid size: \\( nx = ny = 41 \\), \\( dx = dy = \\frac{2}{40} \\)\n- Time domain: \\( nt = 10 \\)\n\n**Numerical Method:**\nFinite Difference Method\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Poisson_Equation": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\frac{\\partial^2 p}{\\partial x^2} + \\frac{\\partial^2 p}{\\partial y^2} = b(x, y)\n\\]\n\nwhere:\n- \\( p(x, y) \\): scalar potential (e.g., pressure)\n- \\( b(x, y) \\): source term defined as:\n  - \\( b = 100 \\) at \\( x = \\frac{1}{4}L_x, y = \\frac{1}{4}L_y \\)\n  - \\( b = -100 \\) at \\( x = \\frac{3}{4}L_x, y = \\frac{3}{4}L_y \\)\n  - \\( b = 0 \\) elsewhere\n\n**Boundary Conditions:**\n- Dirichlet boundary conditions:\n  \\( p = 0 \\) at \\( x = 0, 2 \\) and \\( y = 0, 1 \\)\n\n**Initial Conditions:**\n\\[\n  p(x, y) = 0 \\text{ everywhere in the domain}\n\\]\n\n**Domain:**\n- Spatial domain: \\( x \\in [0, 2], y \\in [0, 1] \\)\n- Grid size: \\( nx = ny = 50 \\), \\( dx = \\frac{2}{49}, dy = \\frac{1}{49} \\)\n\n**Numerical Method:**\nFinite Difference Method\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Steady_Heat_Equation_Gauss": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\frac{\\partial^2 T}{\\partial x^2} + \\frac{\\partial^2 T}{\\partial y^2} = 0\n\\]\n\nwhere:\n- \\( T(x, y) \\): temperature field over the domain\n\n**Boundary Conditions:**\n- Dirichlet boundary conditions:\n  - Left boundary: \\( T = 10^\\circ C \\)\n  - Right boundary: \\( T = 40^\\circ C \\)\n  - Top boundary: \\( T = 0^\\circ C \\)\n  - Bottom boundary: \\( T = 20^\\circ C \\)\n\n**Initial Conditions:**\n\\[\n  T(x, y) = 0 \\text{ everywhere except at the boundaries}\n\\]\n\n**Domain:**\n- Spatial domain: \\( x \\in [0, 5], y \\in [0, 4] \\)\n- Grid spacing: \\( dx = 0.05, dy = 0.05 \\)\n- Grid size: \\( nx = 101, ny = 81 \\)\n\n**Numerical Method:**\nFinite Difference Method using Gauss-Seidel iteration\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Steady_Heat_Equation_Jac": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\frac{\\partial^2 T}{\\partial x^2} + \\frac{\\partial^2 T}{\\partial y^2} = 0\n\\]\n\nwhere:\n- \\( T(x, y) \\): temperature field over the domain\n\n**Boundary Conditions:**\n- Dirichlet boundary conditions:\n  - Left boundary: \\( T = 10^\\circ C \\)\n  - Right boundary: \\( T = 40^\\circ C \\)\n  - Top boundary: \\( T = 0^\\circ C \\)\n  - Bottom boundary: \\( T = 20^\\circ C \\)\n\n**Initial Conditions:**\n\\[\n  T(x, y) = 0 \\text{ everywhere except at the boundaries}\n\\]\n\n**Domain:**\n- Spatial domain: \\( x \\in [0, 5], y \\in [0, 4] \\)\n- Grid spacing: \\( dx = 0.05, dy = 0.05 \\)\n- Grid size: \\( nx = 101, ny = 81 \\)\n\n**Numerical Method:**\nFinite Difference Method using Jacobi iteration\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Steady_Heat_Equation_SOR": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\frac{\\partial^2 T}{\\partial x^2} + \\frac{\\partial^2 T}{\\partial y^2} = 0\n\\]\n\nwhere:\n- \\( T(x, y) \\): temperature field over the domain\n\n**Boundary Conditions:**\n- Dirichlet boundary conditions:\n  - Left boundary: \\( T = 10^\\circ C \\)\n  - Right boundary: \\( T = 40^\\circ C \\)\n  - Top boundary: \\( T = 0^\\circ C \\)\n  - Bottom boundary: \\( T = 20^\\circ C \\)\n\n**Initial Conditions:**\n\\[\n  T(x, y) = 0 \\text{ everywhere except at the boundaries}\n\\]\n\n**Domain:**\n- Spatial domain: \\( x \\in [0, 5], y \\in [0, 4] \\)\n- Grid spacing: \\( dx = 0.05, dy = 0.05 \\)\n- Grid size: \\( nx = 101, ny = 81 \\)\n\n**Numerical Method:**\nFinite Difference Method using Successive Over-Relaxation (SOR)\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Unsteady_Heat_Equation_ADI": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\frac{\\partial T}{\\partial t} - \\alpha \\left( \\frac{\\partial^2 T}{\\partial x^2} + \\frac{\\partial^2 T}{\\partial y^2} \\right) = q(x, y, t)\n\\]\n\nwhere:\n- \\( T(x, y, t) \\): temperature field over time\n- \\( q(x, y, t) = Q_0 \\exp\\left(-\\frac{x^2 + y^2}{2\\sigma^2} \\right) \\): source term, with \\( Q_0 = 200\u00b0C/s \\) and \\( \\sigma = 0.1 \\)\n\n**Boundary Conditions:**\n- Dirichlet boundary conditions: \\( T = 0\u00b0C \\) at all boundaries (\\( x = -1, 1 \\) and \\( y = -1, 1 \\))\n\n**Initial Conditions:**\n\\[\n  T(x, y, 0) = 0 \\text{ everywhere in the domain}\n\\]\n\n**Domain:**\n- Spatial domain: \\( x, y \\in [-1, 1] \\)\n- Grid resolution: \\( nx = 41, ny = 41 \\)\n- Time step: \\( dt = r \\cdot \\frac{dx^2}{\\alpha} \\)\n- Maximum time: \\( t_{max} = 3 \\) seconds\n\n**Numerical Method:**\nAlternating Direction Implicit (ADI) Method\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Unsteady_Heat_Equation_DF": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\frac{\\partial T}{\\partial t} - \\alpha \\left( \\frac{\\partial^2 T}{\\partial x^2} + \\frac{\\partial^2 T}{\\partial y^2} \\right) = q(x, y, t)\n\\]\n\nwhere:\n- \\( T(x, y, t) \\): temperature field over time\n- \\( q(x, y, t) = Q_0 \\exp\\left(-\\frac{x^2 + y^2}{2\\sigma^2} \\right) \\): source term, with \\( Q_0 = 200\u00b0C/s \\) and \\( \\sigma = 0.1 \\)\n\n**Boundary Conditions:**\n- Dirichlet boundary conditions: \\( T = 0\u00b0C \\) at all boundaries (\\( x = -1, 1 \\) and \\( y = -1, 1 \\))\n\n**Initial Conditions:**\n\\[\n  T(x, y, 0) = 0 \\text{ everywhere in the domain}\n\\]\n\n**Domain:**\n- Spatial domain: \\( x, y \\in [-1, 1] \\)\n- Grid resolution: \\( nx = 41, ny = 41 \\)\n- Time step: \\( dt = r \\cdot \\frac{dx^2}{\\alpha} \\)\n- Maximum time: \\( t_{max} = 3 \\) seconds\n\n**Numerical Method:**\nDuFort-Frankel Method\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "2D_Unsteady_Heat_Equation_SE": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\frac{\\partial T}{\\partial t} - \\alpha \\left( \\frac{\\partial^2 T}{\\partial x^2} + \\frac{\\partial^2 T}{\\partial y^2} \\right) = q(x, y, t)\n\\]\n\nwhere:\n- \\( T(x, y, t) \\): temperature field over time\n- \\( q(x, y, t) = Q_0 \\exp\\left(-\\frac{x^2 + y^2}{2\\sigma^2} \\right) \\): source term, with \\( Q_0 = 200\u00b0C/s \\) and \\( \\sigma = 0.1 \\)\n\n**Boundary Conditions:**\n- Dirichlet boundary conditions: \\( T = 0\u00b0C \\) at all boundaries (\\( x = -1, 1 \\) and \\( y = -1, 1 \\))\n\n**Initial Conditions:**\n\\[\n  T(x, y, 0) = 0 \\text{ everywhere in the domain}\n\\]\n\n**Domain:**\n- Spatial domain: \\( x, y \\in [-1, 1] \\)\n- Grid resolution: \\( nx = 41, ny = 41 \\)\n- Time step: \\( dt = r \\cdot \\frac{dx^2}{\\alpha} \\)\n- Maximum time: \\( t_{max} = 3 \\) seconds\n\n**Numerical Method:**\nSimple Explicit Method\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "Fully_Developed_Turbulent_Channel_Flow_CESS": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\frac{d}{dy} \\left( (\\mu + \\mu_t) \\frac{d\\bar{u}}{dy} \\right) = -1.\n\\]\n\nwhere:\n- \\( \\mu \\): molecular viscosity\n- \\( \\mu_t \\): turbulent eddy viscosity, computed using the Cess turbulence model\n- The effective viscosity is defined as \\( \\mu_{\\text{eff}} = \\mu + \\mu_t \\)\n\n**Boundary Conditions:**\n- Dirichlet boundary conditions for velocity: \\( \\bar{u} = 0 \\) at both walls\n- Pressure boundary condition is implicit through the linear system\n\n**Initial Conditions:**\n\\[\n  \\bar{u}(y) = 0 \\text{ everywhere in the domain}\n\\]\n\n**Domain:**\n- Spatial domain: \\( y \\in [0, H] \\) where \\( H = 2 \\)\n- Grid size: \\( n = 100 \\), with non-uniform mesh clustered near the walls\n\n**Numerical Method:**\nFinite Difference Method (FDM) using the Cess algebraic turbulence model\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "Fully_Developed_Turbulent_Channel_Flow_KE": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n0 = P_k - \\rho \\epsilon + \\frac{d}{dy} \\left[ \\left( \\mu + \\frac{\\mu_t}{\\sigma_k} \\right) \\frac{dk}{dy} \\right]\n\\]\n\\[\n0 = \\frac{\\epsilon}{k} \\left( C_{e1} f_1 P_k - C_{e2} f_2 \\epsilon \\right) + \\frac{d}{dy} \\left[ \\left( \\mu + \\frac{\\mu_t}{\\sigma_\\epsilon} \\right) \\frac{d \\epsilon}{dy} \\right]\n\\]\n\\[\n\\mu_t = C_{\\mu} f_\\mu \\rho \\frac{k^2}{\\epsilon}\n\\]\n\nwhere:\n- \\( P_k \\): turbulent production term\n- \\( \\mu_t \\): turbulent eddy viscosity\n- \\( C_{e1}, C_{e2}, C_{\\mu} \\): model constants\n- \\( f_1, f_2 \\): functions for near-wall effects\n- \\( k \\): turbulent kinetic energy\n- \\( \\epsilon \\): turbulent dissipation\n\n**Boundary Conditions:**\n- Dirichlet boundary conditions for velocity at the walls\n- Implicit pressure boundary condition through the linear system\n\n**Initial Conditions:**\n\\[\n  k = 0, \\quad \\epsilon = 0 \\text{ everywhere in the domain}\n\\]\n\n**Domain:**\n- Spatial domain: \\( y \\in [0, H] \\) where \\( H = 2 \\)\n- Grid size: \\( n = 100 \\), with non-uniform mesh clustered near the walls\n\n**Numerical Method:**\nFinite Difference Method (FDM) using the Myong and Kasagi k-\u03b5 turbulence model\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "Fully_Developed_Turbulent_Channel_Flow_SA": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n\\frac{d}{dy} \\left( (\\mu + \\mu_t) \\frac{d\\bar{u}}{dy} \\right) = -1.\n\\]\n\nwhere:\n- \\( \\mu \\): molecular viscosity\n- \\( \\mu_t \\): turbulent eddy viscosity, computed using the Spalart-Allmaras turbulence model\n- The effective viscosity is defined as \\( \\mu_{\\text{eff}} = \\mu + \\mu_t \\)\n\n**Boundary Conditions:**\n- Dirichlet boundary conditions for velocity: \\( \\bar{u} = 0 \\) at both walls\n- Pressure boundary condition is implicit through the linear system\n\n**Initial Conditions:**\n\\[\n  \\bar{u}(y) = 0 \\text{ everywhere in the domain}\n\\]\n\n**Domain:**\n- Spatial domain: \\( y \\in [0, H] \\) where \\( H = 2 \\)\n- Grid size: \\( n = 100 \\), with non-uniform mesh clustered near the walls\n\n**Numerical Method:**\nFinite Difference Method (FDM) using the Spalart-Allmaras turbulence model\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "Fully_Developed_Turbulent_Channel_Flow_SST": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n0 = P_k - \\beta^* \\rho k \\omega + \\frac{d}{dy} \\left[ \\left( \\mu + \\frac{\\mu_t}{\\sigma_k} \\right) \\frac{d k}{dy} \\right]\n\\]\n\\[\n0 = \\frac{\\rho P_k}{\\mu_t} - \\beta \\omega^2 + \\frac{d}{dy} \\left[ \\left( \\mu + \\mu_t \\omega \\right) \\frac{d \\omega}{dy} \\right] + (1 - F_1) C_D k \\omega\n\\]\n\\[\n\\mu_t = \\rho k \\min \\left( \\frac{1}{\\omega}, \\frac{a_1}{\\|S\\| F_2} \\right)\n\\]\n\nwhere:\n- \\( P_k \\): turbulent production term\n- \\( \\mu_t \\): turbulent eddy viscosity\n- \\( C_D \\): constant\n- \\( F_1, F_2 \\): blending functions\n- \\( k \\): turbulent kinetic energy\n- \\( \\omega \\): specific turbulent dissipation\n- \\( S \\): strain rate tensor\n- \\( a_1 \\), constants\n\n**Boundary Conditions:**\n- Dirichlet boundary conditions for velocity at the walls\n- Implicit pressure boundary condition through the linear system\n\n**Initial Conditions:**\n\\[\n  k = 0, \\quad \\omega = 0 \\text{ everywhere in the domain}\n\\]\n\n**Domain:**\n- Spatial domain: \\( y \\in [0, H] \\) where \\( H = 2 \\)\n- Grid size: \\( n = 100 \\), with non-uniform mesh clustered near the walls\n\n**Numerical Method:**\nFinite Difference Method (FDM) using the Menter Shear-Stress Transport (SST) turbulence model\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task.",
    "Fully_Developed_Turbulent_Channel_Flow_V2F": "You are given the following partial differential equation (PDE) problem:\n\n**Equation:**\n\\[\n0 = P_k - \\rho \\epsilon + \\frac{d}{dy} \\left[ \\left( \\mu + \\frac{\\mu_t}{\\sigma_k} \\right) \\frac{d k}{dy} \\right]\n\\]\n\\[\n0 = \\frac{1}{T} \\left( C_{e1} P_k - C_{e2} \\rho \\epsilon \\right) + \\frac{d}{dy} \\left[ \\left( \\mu + \\frac{\\mu_t}{\\sigma_\\epsilon} \\right) \\frac{d \\epsilon}{dy} \\right]\n\\]\n\\[\n0 = \\rho k f - 6 \\rho v^2 \\frac{\\epsilon}{k} + \\frac{d}{dy} \\left[ \\left( \\mu + \\frac{\\mu_t}{\\sigma_k} \\right) \\frac{d v^2}{dy} \\right]\n\\]\n\\[\nL^2 \\frac{d^2 f}{dy^2} - f = \\frac{1}{T} \\left[ C_1 \\left( 6 - v^2 \\right) - \\frac{2}{3} \\left( C_1 - 1 \\right) \\right] - C_2 P_k\n\\]\n\\[\n\\mu_t = C_\\mu \\rho \\left( \\frac{\\epsilon}{k} \\right)^{1/2} T_t\n\\]\n\nwhere:\n- \\( P_k \\): turbulent production term\n- \\( \\mu_t \\): turbulent eddy viscosity\n- \\( C_1, C_2 \\): model constants\n- \\( f \\): wall-normal fluctuation component\n- \\( v^2 \\): wall-normal fluctuation component\n- \\( L \\): characteristic length scale\n- \\( T_t \\): turbulent temperature\n\n**Boundary Conditions:**\n- Dirichlet boundary conditions for velocity at the walls\n- Implicit pressure boundary condition through the linear system\n\n**Initial Conditions:**\n\\[\n  k = 0, \\quad \\epsilon = 0, \\quad v^2 = 0 \\text{ everywhere in the domain}\n\\]\n\n**Domain:**\n- Spatial domain: \\( y \\in [0, H] \\) where \\( H = 2 \\)\n- Grid size: \\( n = 100 \\), with non-uniform mesh clustered near the walls\n\n**Numerical Method:**\nFinite Difference Method (FDM) using the V2F turbulence model\n\n### Task:\n- Write Python code to numerically solve the above CFD problem using the specified numerical method.\n- If the problem is **unsteady**, only compute and save the **solution at the final time step**.\n- Save the final solution as a `.npy` file using NumPy:\n  - For **1D problems**, save a 1D NumPy array.\n  - For **2D problems**, save a 2D NumPy array.\n- The output `.npy` file should contain only the final solution field (not intermediate steps).\n- Return only the complete and runnable Python code that performs this task."
  }
}