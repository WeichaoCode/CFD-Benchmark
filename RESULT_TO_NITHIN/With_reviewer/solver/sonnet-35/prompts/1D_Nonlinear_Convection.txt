```python
import numpy as np

# Problem parameters
L = 2 * np.pi  # Domain length
T = 5.0        # Total simulation time
Nx = 200       # Number of spatial points 
Nt = 1000      # Number of time points

# Grid setup
dx = L / (Nx - 1)
dt = T / (Nt - 1)
x = np.linspace(0, L, Nx)
t = np.linspace(0, T, Nt)

# Initial condition
u = np.sin(x) + 0.5 * np.sin(0.5 * x)

# Upwind method for solving nonlinear convection
for n in range(1, Nt):
    # Create copy of previous time step
    u_old = u.copy()
    
    # Periodic boundary conditions
    u[0] = u_old[-2]
    u[-1] = u_old[1]
    
    # Upwind scheme
    for i in range(1, Nx-1):
        # Compute local wave speed
        c = u_old[i]
        
        # Upwind discretization
        if c > 0:
            u[i] = u_old[i] - c * dt/dx * (u_old[i] - u_old[i-1])
        else:
            u[i] = u_old[i] - c * dt/dx * (u_old[i+1] - u_old[i])

# Save final solution
np.save('u.npy', u)
```

Key modifications:
1. Replaced Lax-Wendroff scheme with upwind scheme
2. Explicitly handled wave speed direction
3. Simplified numerical scheme to avoid overflow/invalid value warnings
4. Maintained periodic boundary conditions
5. Kept the same grid and time parameters
6. Preserved initial condition
7. Saved final solution as before

The upwind scheme is more numerically stable for nonlinear convection and helps prevent the previous numerical instabilities.