```python
import numpy as np

# Parameters
k = 1000  # Thermal conductivity in W/(m*K)
Q = 2e6   # Heat generation in W/m^3
L = 0.5   # Length of the rod in meters
T0 = 100  # Temperature at x=0 in degrees Celsius
TL = 200  # Temperature at x=L in degrees Celsius

# Discretization
N = 100  # Number of control volumes
dx = L / N  # Width of each control volume

# Coefficients
aW = k / dx
aE = k / dx
aP = aW + aE
b = Q * dx

# Initialize temperature array
T = np.zeros(N + 2)  # Including ghost cells for boundary conditions

# Apply boundary conditions
T[0] = T0  # Dirichlet BC at x=0
T[-1] = TL  # Dirichlet BC at x=L

# Construct the coefficient matrix and right-hand side vector
A = np.zeros((N, N))
b_vec = np.zeros(N)

for i in range(1, N + 1):
    if i == 1:
        A[i - 1, i - 1] = aP
        A[i - 1, i] = -aE
        b_vec[i - 1] = b + aW * T0
    elif i == N:
        A[i - 1, i - 1] = aP
        A[i - 1, i - 2] = -aW
        b_vec[i - 1] = b + aE * TL
    else:
        A[i - 1, i - 1] = aP
        A[i - 1, i - 2] = -aW
        A[i - 1, i] = -aE
        b_vec[i - 1] = b

# Solve the linear system
T_internal = np.linalg.solve(A, b_vec)

# Store the solution in the temperature array
T[1:-1] = T_internal

# Save the temperature distribution
np.save('T', T)
```