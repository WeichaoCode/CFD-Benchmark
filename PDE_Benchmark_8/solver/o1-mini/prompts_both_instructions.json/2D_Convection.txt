```python
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Parameters
nx, ny = 101, 101
lx, ly = 2.0, 2.0
dx, dy = lx / (nx - 1), ly / (ny - 1)
sigma = 0.2
dt = sigma * dx
nt = 80

# Create grid
x = np.linspace(0, lx, nx)
y = np.linspace(0, ly, ny)
X, Y = np.meshgrid(x, y)

# Initialize velocity fields
u = np.ones((ny, nx))
v = np.ones((ny, nx))
mask = (X >= 0.5) & (X <= 1.0) & (Y >= 0.5) & (Y <= 1.0)
u[mask] = 2.0
v[mask] = 2.0

# Time-stepping loop
for _ in range(nt):
    u_new = u.copy()
    v_new = v.copy()
    
    # Upwind scheme for u
    u_new[1:-1,1:-1] = u[1:-1,1:-1] + dt * (
        -u[1:-1,1:-1] * (u[1:-1,1:-1] - u[1:-1,0:-2]) / dx
        -v[1:-1,1:-1] * (u[1:-1,1:-1] - u[0:-2,1:-1]) / dy
    )
    
    # Upwind scheme for v
    v_new[1:-1,1:-1] = v[1:-1,1:-1] + dt * (
        -u[1:-1,1:-1] * (v[1:-1,1:-1] - v[1:-1,0:-2]) / dx
        -v[1:-1,1:-1] * (v[1:-1,1:-1] - v[0:-2,1:-1]) / dy
    )
    
    # Apply Dirichlet boundary conditions
    u_new[0,:] = 1.0
    u_new[-1,:] = 1.0
    u_new[:,0] = 1.0
    u_new[:,-1] = 1.0
    
    v_new[0,:] = 1.0
    v_new[-1,:] = 1.0
    v_new[:,0] = 1.0
    v_new[:,-1] = 1.0
    
    # Update fields
    u, v = u_new, v_new

# Visualization for u
fig_u = plt.figure()
ax_u = fig_u.add_subplot(111, projection='3d')
ax_u.plot_surface(X, Y, u, cmap='viridis')
ax_u.set_xlabel('X')
ax_u.set_ylabel('Y')
ax_u.set_zlabel('u')
plt.show()

# Visualization for v
fig_v = plt.figure()
ax_v = fig_v.add_subplot(111, projection='3d')
ax_v.plot_surface(X, Y, v, cmap='viridis')
ax_v.set_xlabel('X')
ax_v.set_ylabel('Y')
ax_v.set_zlabel('v')
plt.show()

# Save final results
np.save('u.npy', u)
np.save('v.npy', v)
```