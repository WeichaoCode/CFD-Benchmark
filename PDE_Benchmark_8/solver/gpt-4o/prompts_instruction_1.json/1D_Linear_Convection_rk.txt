Below is the Python code to solve the given partial differential equation using the specified numerical method. The code uses the 4th-order Runge-Kutta method for time integration and 2nd-order central difference for spatial discretization. The solution is saved as a `.npy` file containing the final solution field.

```python
import numpy as np

# Parameters
c = 1.0  # Convection speed
epsilon = 5e-4  # Damping factor
x_start, x_end = -5, 5  # Spatial domain
N_x = 101  # Number of spatial grid points
dx = (x_end - x_start) / (N_x - 1)  # Spatial step size
x = np.linspace(x_start, x_end, N_x)  # Spatial grid
u_initial = np.exp(-x**2)  # Initial condition

# CFL condition for stability
CFL = 0.5
dt = CFL * dx / c  # Time step size

# Time integration parameters
t_final = 2.0  # Final time
n_steps = int(t_final / dt)  # Number of time steps

# Function to compute spatial derivatives
def compute_derivatives(u):
    # Central difference for first derivative
    du_dx = np.zeros_like(u)
    du_dx[1:-1] = (u[2:] - u[:-2]) / (2 * dx)
    du_dx[0] = (u[1] - u[-1]) / (2 * dx)  # Periodic boundary
    du_dx[-1] = (u[0] - u[-2]) / (2 * dx)  # Periodic boundary

    # Central difference for second derivative
    d2u_dx2 = np.zeros_like(u)
    d2u_dx2[1:-1] = (u[2:] - 2 * u[1:-1] + u[:-2]) / (dx**2)
    d2u_dx2[0] = (u[1] - 2 * u[0] + u[-1]) / (dx**2)  # Periodic boundary
    d2u_dx2[-1] = (u[0] - 2 * u[-1] + u[-2]) / (dx**2)  # Periodic boundary

    return du_dx, d2u_dx2

# Function to compute the right-hand side of the PDE
def rhs(t, u):
    du_dx, d2u_dx2 = compute_derivatives(u)
    return -c * du_dx + epsilon * d2u_dx2

# Runge-Kutta 4th order time integration
u = u_initial.copy()
for _ in range(n_steps):
    k1 = rhs(0, u)
    k2 = rhs(0, u + 0.5 * dt * k1)
    k3 = rhs(0, u + 0.5 * dt * k2)
    k4 = rhs(0, u + dt * k3)
    u += (dt / 6) * (k1 + 2 * k2 + 2 * k3 + k4)

# Save the final solution
np.save('final_solution.npy', u)
```

This code sets up the spatial grid, initializes the solution, and iteratively applies the Runge-Kutta method to advance the solution in time. The final solution is saved as a `.npy` file named `final_solution.npy`. The code handles periodic boundary conditions and ensures stability using the CFL condition.