#!/usr/bin/env python3
import numpy as np

# Parameters
L = 2 * np.pi           # domain length
T = 5.0                 # final time
N = 256                 # number of spatial grid points
dx = L / N              # spatial step size
x = np.linspace(0, L - dx, N)  # periodic domain discretized
# Initial condition: u(x,0) = sin(x) + 0.5*sin(0.5*x)
u = np.sin(x) + 0.5 * np.sin(0.5 * x)

# Flux function for Burgers' equation: f(u) = 0.5*u^2
def flux(u):
    return 0.5 * u**2

# CFL condition: Choose dt based on maximum characteristic speed (|u|) in initial condition
CFL = 0.4
dt = CFL * dx / np.max(np.abs(u))
nsteps = int(T / dt)
dt = T / nsteps  # adjust dt to exactly reach final time step

# Time integration using Lax-Friedrichs scheme
for step in range(nsteps):
    # Periodic boundaries implemented via np.roll
    u_plus = np.roll(u, -1)   # u_{i+1}
    u_minus = np.roll(u, 1)   # u_{i-1}
    # Lax-Friedrichs update
    u = 0.5 * (u_plus + u_minus) - dt / (2 * dx) * (flux(u_plus) - flux(u_minus))

# Save the final solution as a 1D numpy array in a file named 'u.npy'
np.save("u.npy", u)