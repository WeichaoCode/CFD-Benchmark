Sure, here is an outline of how you would need to design a program using the Dufort-Frankel and ADI methods.

The first step is to import the necessary libraries:

```python
import numpy as np
import matplotlib.pyplot as plt
```

Next, implement the heat source q(x, y). Following the equations provided above, your code should look something like this:

```python
def q(x, y, Q_0=200, sigma=0.1):
    return Q_0 * np.exp(- (x**2 + y**2) / (2 * sigma**2))
```

Now, setup the problem parameters such as the thermal diffusivity (Î±), the domain size, the grid spacing and the time-step:

```python
alpha = 1.0  # Thermal diffusivity
x_range = [-1, 1]
y_range = [-1, 1]
Nx, Ny = 101, 101  # Number of grid points in x and y
dx = (y_range[1] - y_range[0]) / Nx  
dy = (x_range[1] - x_range[0]) / Ny  
dt = 0.00001  # Time-step
```

Construct the grid using the `np.linspace` and `np.meshgrid` functions:

```python
x = np.linspace(*x_range, Nx)
y = np.linspace(*y_range, Ny)
X, Y = np.meshgrid(x, y)
```

Initialize the temperature field `T`:

```python
T = np.zeros_like(X)
```

Since the temperature at the boundary is fixed, you now apply the boundary conditions in the initialization step:

```python
T[:, 0] = T[:, -1] = T[0, :] = T[-1, :] = 0
```

Create a function to implement the Dufort-Frankel scheme:

```python
def dufort_frankel(T, alpha, dt, dx, dy):
    # Your Dufort-Frankel implementation goes here.
```

Similarly, create a function to implement the ADI scheme:

```python
def adi(T, alpha, dt, dx, dy):
    # Your ADI implementation goes here.
```

Finally, generate a time loop and iterate either the Dufort-Frankel or ADI method, storing intermediate results. 

```python
for t in range(n_steps):
    if method == 'Dufort-Frankel':
        T = dufort_frankel(T, alpha, dt, dx, dy)
    elif method == 'ADI':
        T = adi(T, alpha, dt, dx, dy)
```

Then implement a function to visualize results using Matplotlib.

```python
def plot_temperature(T, x, y):
   # Use plt.imshow or plt.contourf to plot temperature
```

Don't forget to validate your results and evaluate the performance of both the Dufort-Frankel and ADI methods. 
Remember this only a basic structure for implementing your problem, you might need to write the detailed implementation of these methods according to your problem's requirement.