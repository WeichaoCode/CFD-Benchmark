{
    "problems": [
        {
            "key": 1,
            "name": "1D linear convection",
            "equation": "\\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} - \\pi c e^{-t} \\cos(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n",
            "physical_properties": "wave speed c = 1",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Forward in Time, Centered in Space (FTCS)",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 2,
            "name": "1D linear convection",
            "equation": "\\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} - \\pi c e^{-t} \\cos(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n",
            "physical_properties": "wave speed c = 1",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: First Order Upwind (FOU)",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 3,
            "name": "1D linear convection",
            "equation": "\\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} - \\pi c e^{-t} \\cos(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n",
            "physical_properties": "wave speed c = 1",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Leapfrog",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 4,
            "name": "1D linear convection",
            "equation": "\\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} - \\pi c e^{-t} \\cos(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n",
            "physical_properties": "wave speed c = 1",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Lax-Friedrichs",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 5,
            "name": "1D linear convection",
            "equation": "\\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} - \\pi c e^{-t} \\cos(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n",
            "physical_properties": "wave speed c = 1",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Lax-Wendroff",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 6,
            "name": "1D linear convection",
            "equation": "\\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} - \\pi c e^{-t} \\cos(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n",
            "physical_properties": "wave speed c = 1",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Beam-Warming",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 7,
            "name": "1D nonlinear convection",
            "equation": "\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x) = 0\n",
            "physical_properties": "",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Forward in Time, Centered in Space (FTCS)",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 8,
            "name": "1D nonlinear convection",
            "equation": "\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x) = 0\n",
            "physical_properties": "",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: First Order Upwind (FOU)",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 9,
            "name": "1D nonlinear convection",
            "equation": "\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x) = 0\n",
            "physical_properties": "",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Leapfrog",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 10,
            "name": "1D nonlinear convection",
            "equation": "\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x) = 0\n",
            "physical_properties": "",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Lax-Friedrichs",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 11,
            "name": "1D nonlinear convection",
            "equation": "\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x) = 0\n",
            "physical_properties": "",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Lax-Wendroff",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 12,
            "name": "1D nonlinear convection",
            "equation": "\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x) = 0\n",
            "physical_properties": "",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Beam-Warming",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 13,
            "name": "1D diffusion equation",
            "equation": "\\frac{\\partial u}{\\partial t} - \\nu \\frac{\\partial^2 u}{\\partial x^2} - \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n",
            "physical_properties": "viscosity nu = 0.3",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Forward in Time, Centered in Space (FTCS)",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 14,
            "name": "1D diffusion equation",
            "equation": "\\frac{\\partial u}{\\partial t} - \\nu \\frac{\\partial^2 u}{\\partial x^2} - \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n",
            "physical_properties": "viscosity nu = 0.3",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: First Order Upwind (FOU)",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 15,
            "name": "1D diffusion equation",
            "equation": "\\frac{\\partial u}{\\partial t} - \\nu \\frac{\\partial^2 u}{\\partial x^2} - \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n",
            "physical_properties": "viscosity nu = 0.3",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Leapfrog",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 16,
            "name": "1D diffusion equation",
            "equation": "\\frac{\\partial u}{\\partial t} - \\nu \\frac{\\partial^2 u}{\\partial x^2} - \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n",
            "physical_properties": "viscosity nu = 0.3",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Lax-Friedrichs",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 17,
            "name": "1D diffusion equation",
            "equation": "\\frac{\\partial u}{\\partial t} - \\nu \\frac{\\partial^2 u}{\\partial x^2} - \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n",
            "physical_properties": "viscosity nu = 0.3",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Lax-Wendroff",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 18,
            "name": "1D diffusion equation",
            "equation": "\\frac{\\partial u}{\\partial t} - \\nu \\frac{\\partial^2 u}{\\partial x^2} - \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n",
            "physical_properties": "viscosity nu = 0.3",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Beam-Warming",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 19,
            "name": "1D Burgers' equation",
            "equation": "\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} - \\nu \\frac{\\partial^2 u}{\\partial x^2} \n- \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x)\n",
            "physical_properties": "viscosity nu = 0.07",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Forward in Time, Centered in Space (FTCS)",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 20,
            "name": "1D Burgers' equation",
            "equation": "\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} - \\nu \\frac{\\partial^2 u}{\\partial x^2} \n- \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x)\n",
            "physical_properties": "viscosity nu = 0.07",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: First Order Upwind (FOU)",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 21,
            "name": "1D Burgers' equation",
            "equation": "\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} - \\nu \\frac{\\partial^2 u}{\\partial x^2} \n- \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x)\n",
            "physical_properties": "viscosity nu = 0.07",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Leapfrog",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 22,
            "name": "1D Burgers' equation",
            "equation": "\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} - \\nu \\frac{\\partial^2 u}{\\partial x^2} \n- \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x)\n",
            "physical_properties": "viscosity nu = 0.07",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Lax-Friedrichs",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 23,
            "name": "1D Burgers' equation",
            "equation": "\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} - \\nu \\frac{\\partial^2 u}{\\partial x^2} \n- \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x)\n",
            "physical_properties": "viscosity nu = 0.07",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Lax-Wendroff",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 24,
            "name": "1D Burgers' equation",
            "equation": "\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} - \\nu \\frac{\\partial^2 u}{\\partial x^2} \n- \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x)\n",
            "physical_properties": "viscosity nu = 0.07",
            "boundary conditions": "u = 0 at x = 0, 2",
            "initial conditions": "u = \\sin(\\pi x)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference: Beam-Warming",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method"
        },
        {
            "key": 25,
            "name": "2D linear convection equation",
            "equation": "\\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} + c \\frac{\\partial u}{\\partial y} \n- \\pi c x e^{-t} \\cos(\\pi x y) - \\pi c y e^{-t} \\cos(\\pi x y) + e^{-t} \\sin(\\pi x y)\n",
            "physical_properties": "wave speed c = 1",
            "boundary conditions": "u = 0 for x = 0, y = 0; u = exp(-t)*sin(2*pi*y) at x = 2; u = exp(-t)*sin(2*pi*x) at y = 2",
            "initial conditions": "u = sin(2*pi*x*y)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference, fully-discrete schemes",
            "other information": "Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figur"
        },
        {
            "key": 26,
            "name": "2D convection equation",
            "equation": "\\\\\\\\frac{\\\\\\\\partial u}{\\\\\\\\partial t} + u \\\\\\\\frac{\\\\\\\\partial u}{\\\\\\\\partial x} + v \\\\\\\\frac{\\\\\\\\partial u}{\\\\\\\\partial y} = 0 \\\\\\\\] \\\\n \\\\\\\\[ \\\\\\\\frac{\\\\\\\\partial v}{\\\\\\\\partial t} + u \\\\\\\\frac{\\\\\\\\partial v}{\\\\\\\\partial x} + v \\\\\\\\frac{\\\\\\\\partial v}{\\\\\\\\partial y} = 0",
            "physical_properties": "",
            "boundary conditions": "u, v = 0 for x = 0, y = 0; u, v = exp(-t)*sin(2*pi*y) at x = 2; u, v = exp(-t)*sin(2*pi*x) at y = 2",
            "initial conditions": "u, v = sin(2*pi*x*y)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference, fully-discrete schemes",
            "other information": "write python code, do not call external packages"
        },
        {
            "key": 27,
            "name": "2D diffusion equation",
            "equation": "\\\\n \\\\\\\\[ \\\\\\\\frac{\\\\\\\\partial u}{\\\\\\\\partial t} = \\\\\\\\nu \\\\\\\\frac{\\\\\\\\partial^2 u}{\\\\\\\\partial x^2} + \\\\\\\\nu \\\\\\\\frac{\\\\\\\\partial^2 u}{\\\\\\\\partial y^2} \\\\\\\\]",
            "physical_properties": "viscosity nu =0.05",
            "boundary conditions": "u = 0 for x = 0, y = 0; u = exp(-t)*sin(2*pi*y) at x = 2; u = exp(-t)*sin(2*pi*x) at y = 2",
            "initial conditions": "u = sin(2*pi*x*y)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference, fully-discrete schemes",
            "other information": "write python code, do not call external packages"
        },
        {
            "key": 28,
            "name": "2D Burgers' equation",
            "equation": "\\\\frac{\\\\partial u}{\\\\partial t} + u \\\\frac{\\\\partial u}{\\\\partial x} + v \\\\frac{\\\\partial u}{\\\\partial y} = \\\\nu \\\\left( \\\\frac{\\\\partial^2 u}{\\\\partial x^2} + \\\\frac{\\\\partial^2 u}{\\\\partial y^2} \\\\right) \\\\frac{\\\\partial v}{\\\\partial t} + u \\\\frac{\\\\partial v}{\\\\partial x} + v \\\\frac{\\\\partial v}{\\\\partial y} = \\\\nu \\\\left( \\\\frac{\\\\partial^2 v}{\\\\partial x^2} + \\\\frac{\\\\partial^2 v}{\\\\partial y^2} \\\\right)",
            "physical_properties": "viscosity nu = 0.01",
            "boundary conditions": "u, v = 0 for x = 0, y = 0; u, v = exp(-t)*sin(2*pi*y) at x = 2; u, v = exp(-t)*sin(2*pi*x) at y = 2",
            "initial conditions": "u, v = sin(2*pi*x*y)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference, fully-discrete schemes",
            "other information": "write python code, do not call external packages"
        },
        {
            "key": 29,
            "name": "2D Laplace equation",
            "equation": "\\\\frac{\\\\partial^2 p}{\\\\partial x^2} + \\\\frac{\\\\partial^2 p}{\\\\partial y^2} = 0",
            "physical_properties": "",
            "boundary conditions": "p = 0 for x = 0, y = 0; p = exp(-t)*sin(2*pi*y) at x = 2; p = exp(-t)*sin(2*pi*x) at y = 2",
            "initial conditions": "p = sin(2*pi*x*y)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference, fully-discrete schemes",
            "other information": "write python code, do not call external packages"
        },
        {
            "key": 30,
            "name": "2D Poisson equation",
            "equation": "\\\\frac{\\\\partial^2 p}{\\\\partial x^2} + \\\\frac{\\\\partial^2 p}{\\\\partial y^2} = b\\n",
            "physical_properties": "source term: b_{i,j} = 100 at i = nx/4, j=ny/4; b_{i,j}=-100 at i=3nx/4, j=3ny/4; b_{i,j}=0, elsewhere",
            "boundary conditions": "p = 0 for x = 0, y = 0; p = exp(-t)*sin(2*pi*y) at x = 2; p = exp(-t)*sin(2*pi*x) at y = 2",
            "initial conditions": "p = sin(2*pi*x*y)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference, fully-discrete schemes",
            "other information": "write python code, do not call external packages"
        },
        {
            "key": 31,
            "name": "Channel Flow with Navier Stokes",
            "equation": "\\\\begin{align}\\n\\\\frac{\\\\partial u}{\\\\partial t} + u \\\\frac{\\\\partial u}{\\\\partial x} + v \\\\frac{\\\\partial u}{\\\\partial y} &= -\\\\frac{1}{\\\\rho} \\\\frac{\\\\partial p}{\\\\partial x} + \\\\nu \\\\left( \\\\frac{\\\\partial^2 u}{\\\\partial x^2} + \\\\frac{\\\\partial^2 u}{\\\\partial y^2} \\\\right) + F \\\\\\\\\\n\\\\frac{\\\\partial v}{\\\\partial t} + u \\\\frac{\\\\partial v}{\\\\partial x} + v \\\\frac{\\\\partial v}{\\\\partial y} &= -\\\\frac{1}{\\\\rho} \\\\frac{\\\\partial p}{\\\\partial y} + \\\\nu \\\\left( \\\\frac{\\\\partial^2 v}{\\\\partial x^2} + \\\\frac{\\\\partial^2 v}{\\\\partial y^2} \\\\right) \\\\\\\\\\n\\\\frac{\\\\partial^2 p}{\\\\partial x^2} + \\\\frac{\\\\partial^2 p}{\\\\partial y^2} &= -\\\\rho \\\\left( \\\\frac{\\\\partial u}{\\\\partial x} \\\\frac{\\\\partial u}{\\\\partial x} + 2 \\\\frac{\\\\partial u}{\\\\partial y} \\\\frac{\\\\partial v}{\\\\partial x} + \\\\frac{\\\\partial v}{\\\\partial y} \\\\frac{\\\\partial v}{\\\\partial y} \\\\right)\\n\\\\end{align}",
            "physical_properties": "source term: F=1  everywhere; density: rho = 1, viscosity: nu = 0.1",
            "boundary conditions": "p, u, v = 0 for x = 0, y = 0; p, u, v = exp(-t)*sin(2*pi*y) at x = 2; p, u ,v = exp(-t)*sin(2*pi*x) at y = 2",
            "initial conditions": "p, u, v = sin(2*pi*x*y)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference, fully-discrete schemes",
            "other information": "write python code, do not call external packages"
        },
        {
            "key": 32,
            "name": "Cavity Flow with Navier Stokes",
            "equation": "\\\\begin{align}\\n\\\\frac{\\\\partial u}{\\\\partial t} + u \\\\frac{\\\\partial u}{\\\\partial x} + v \\\\frac{\\\\partial u}{\\\\partial y} &= -\\\\frac{1}{\\\\rho} \\\\frac{\\\\partial p}{\\\\partial x} + \\\\nu \\\\left( \\\\frac{\\\\partial^2 u}{\\\\partial x^2} + \\\\frac{\\\\partial^2 u}{\\\\partial y^2} \\\\right) \\\\\\\\\\n\\\\frac{\\\\partial v}{\\\\partial t} + u \\\\frac{\\\\partial v}{\\\\partial x} + v \\\\frac{\\\\partial v}{\\\\partial y} &= -\\\\frac{1}{\\\\rho} \\\\frac{\\\\partial p}{\\\\partial y} + \\\\nu \\\\left( \\\\frac{\\\\partial^2 v}{\\\\partial x^2} + \\\\frac{\\\\partial^2 v}{\\\\partial y^2} \\\\right) \\\\\\\\\\n\\\\frac{\\\\partial^2 p}{\\\\partial x^2} + \\\\frac{\\\\partial^2 p}{\\\\partial y^2} &= -\\\\rho \\\\left( \\\\frac{\\\\partial u}{\\\\partial x} \\\\frac{\\\\partial u}{\\\\partial x} + 2 \\\\frac{\\\\partial u}{\\\\partial y} \\\\frac{\\\\partial v}{\\\\partial x} + \\\\frac{\\\\partial v}{\\\\partial y} \\\\frac{\\\\partial v}{\\\\partial y} \\\\right)\\n\\\\end{align}",
            "physical_properties": "density: rho = 1, viscosity: nu = 0.1",
            "boundary conditions": "p, u, v = 0 for x = 0, y = 0; p, u, v = exp(-t)*sin(2*pi*y) at x = 2; p, u ,v = exp(-t)*sin(2*pi*x) at y = 2",
            "initial conditions": "p, u, v = sin(2*pi*x*y)",
            "spatial domain": "x: [0, 2]",
            "temporal domain": "T: [0, 2]",
            "mesh": "structured",
            "numerical method": "finite difference, fully-discrete schemes",
            "other information": "write python code, do not call external packages"
        }
    ]
}