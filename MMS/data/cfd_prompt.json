{
    "prompts": [
        {
            "key": 1,
            "name": "1D linear convection",
            "prompt": "Simulate the problem: 1D linear convection. Key: 1. Equation: \\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} - \\pi c e^{-t} \\cos(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n. Physical properties: wave speed c = 1. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Forward in Time, Centered in Space (FTCS). Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 2,
            "name": "1D linear convection",
            "prompt": "Simulate the problem: 1D linear convection. Key: 2. Equation: \\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} - \\pi c e^{-t} \\cos(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n. Physical properties: wave speed c = 1. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: First Order Upwind (FOU). Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 3,
            "name": "1D linear convection",
            "prompt": "Simulate the problem: 1D linear convection. Key: 3. Equation: \\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} - \\pi c e^{-t} \\cos(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n. Physical properties: wave speed c = 1. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Leapfrog. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 4,
            "name": "1D linear convection",
            "prompt": "Simulate the problem: 1D linear convection. Key: 4. Equation: \\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} - \\pi c e^{-t} \\cos(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n. Physical properties: wave speed c = 1. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Lax-Friedrichs. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 5,
            "name": "1D linear convection",
            "prompt": "Simulate the problem: 1D linear convection. Key: 5. Equation: \\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} - \\pi c e^{-t} \\cos(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n. Physical properties: wave speed c = 1. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Lax-Wendroff. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 6,
            "name": "1D linear convection",
            "prompt": "Simulate the problem: 1D linear convection. Key: 6. Equation: \\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} - \\pi c e^{-t} \\cos(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n. Physical properties: wave speed c = 1. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Beam-Warming. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 7,
            "name": "1D nonlinear convection",
            "prompt": "Simulate the problem: 1D nonlinear convection. Key: 7. Equation: \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x) = 0\n. Physical properties: . Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Forward in Time, Centered in Space (FTCS). Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 8,
            "name": "1D nonlinear convection",
            "prompt": "Simulate the problem: 1D nonlinear convection. Key: 8. Equation: \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x) = 0\n. Physical properties: . Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: First Order Upwind (FOU). Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 9,
            "name": "1D nonlinear convection",
            "prompt": "Simulate the problem: 1D nonlinear convection. Key: 9. Equation: \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x) = 0\n. Physical properties: . Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Leapfrog. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 10,
            "name": "1D nonlinear convection",
            "prompt": "Simulate the problem: 1D nonlinear convection. Key: 10. Equation: \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x) = 0\n. Physical properties: . Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Lax-Friedrichs. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 11,
            "name": "1D nonlinear convection",
            "prompt": "Simulate the problem: 1D nonlinear convection. Key: 11. Equation: \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x) = 0\n. Physical properties: . Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Lax-Wendroff. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 12,
            "name": "1D nonlinear convection",
            "prompt": "Simulate the problem: 1D nonlinear convection. Key: 12. Equation: \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x) = 0\n. Physical properties: . Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Beam-Warming. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 13,
            "name": "1D diffusion equation",
            "prompt": "Simulate the problem: 1D diffusion equation. Key: 13. Equation: \\frac{\\partial u}{\\partial t} - \\nu \\frac{\\partial^2 u}{\\partial x^2} - \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n. Physical properties: viscosity nu = 0.3. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Forward in Time, Centered in Space (FTCS). Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 14,
            "name": "1D diffusion equation",
            "prompt": "Simulate the problem: 1D diffusion equation. Key: 14. Equation: \\frac{\\partial u}{\\partial t} - \\nu \\frac{\\partial^2 u}{\\partial x^2} - \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n. Physical properties: viscosity nu = 0.3. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: First Order Upwind (FOU). Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 15,
            "name": "1D diffusion equation",
            "prompt": "Simulate the problem: 1D diffusion equation. Key: 15. Equation: \\frac{\\partial u}{\\partial t} - \\nu \\frac{\\partial^2 u}{\\partial x^2} - \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n. Physical properties: viscosity nu = 0.3. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Leapfrog. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 16,
            "name": "1D diffusion equation",
            "prompt": "Simulate the problem: 1D diffusion equation. Key: 16. Equation: \\frac{\\partial u}{\\partial t} - \\nu \\frac{\\partial^2 u}{\\partial x^2} - \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n. Physical properties: viscosity nu = 0.3. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Lax-Friedrichs. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 17,
            "name": "1D diffusion equation",
            "prompt": "Simulate the problem: 1D diffusion equation. Key: 17. Equation: \\frac{\\partial u}{\\partial t} - \\nu \\frac{\\partial^2 u}{\\partial x^2} - \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n. Physical properties: viscosity nu = 0.3. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Lax-Wendroff. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 18,
            "name": "1D diffusion equation",
            "prompt": "Simulate the problem: 1D diffusion equation. Key: 18. Equation: \\frac{\\partial u}{\\partial t} - \\nu \\frac{\\partial^2 u}{\\partial x^2} - \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n. Physical properties: viscosity nu = 0.3. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Beam-Warming. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 19,
            "name": "1D Burgers' equation",
            "prompt": "Simulate the problem: 1D Burgers' equation. Key: 19. Equation: \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} - \\nu \\frac{\\partial^2 u}{\\partial x^2} \n- \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x)\n. Physical properties: viscosity nu = 0.07. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Forward in Time, Centered in Space (FTCS). Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 20,
            "name": "1D Burgers' equation",
            "prompt": "Simulate the problem: 1D Burgers' equation. Key: 20. Equation: \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} - \\nu \\frac{\\partial^2 u}{\\partial x^2} \n- \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x)\n. Physical properties: viscosity nu = 0.07. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: First Order Upwind (FOU). Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 21,
            "name": "1D Burgers' equation",
            "prompt": "Simulate the problem: 1D Burgers' equation. Key: 21. Equation: \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} - \\nu \\frac{\\partial^2 u}{\\partial x^2} \n- \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x)\n. Physical properties: viscosity nu = 0.07. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Leapfrog. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 22,
            "name": "1D Burgers' equation",
            "prompt": "Simulate the problem: 1D Burgers' equation. Key: 22. Equation: \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} - \\nu \\frac{\\partial^2 u}{\\partial x^2} \n- \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x)\n. Physical properties: viscosity nu = 0.07. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Lax-Friedrichs. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 23,
            "name": "1D Burgers' equation",
            "prompt": "Simulate the problem: 1D Burgers' equation. Key: 23. Equation: \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} - \\nu \\frac{\\partial^2 u}{\\partial x^2} \n- \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x)\n. Physical properties: viscosity nu = 0.07. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Lax-Wendroff. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 24,
            "name": "1D Burgers' equation",
            "prompt": "Simulate the problem: 1D Burgers' equation. Key: 24. Equation: \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} - \\nu \\frac{\\partial^2 u}{\\partial x^2} \n- \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x)\n. Physical properties: viscosity nu = 0.07. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference: Beam-Warming. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figure, figure title is equation name + numerical method."
        },
        {
            "key": 25,
            "name": "2D linear convection equation",
            "prompt": "Simulate the problem: 2D linear convection equation. Key: 25. Equation: \\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} + c \\frac{\\partial u}{\\partial y} \n- \\pi c x e^{-t} \\cos(\\pi x y) - \\pi c y e^{-t} \\cos(\\pi x y) + e^{-t} \\sin(\\pi x y)\n. Physical properties: wave speed c = 1. Boundary conditions: u = 0 for x = 0, y = 0; u = exp(-t)*sin(2*pi*y) at x = 2; u = exp(-t)*sin(2*pi*x) at y = 2. Initial conditions: u = sin(2*pi*x*y). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference, fully-discrete schemes. Other information: Write a Python program to solve the given PDE using a numerical method. Do not use external packages. Ensure the solution is stable by applying von Neumann stability analysis. Plot the solution at key time steps: t = 0, t = T/4, t = T/2, and t = T in the same figur."
        },
        {
            "key": 26,
            "name": "2D convection equation",
            "prompt": "Simulate the problem: 2D convection equation. Key: 26. Equation: \\\\\\\\frac{\\\\\\\\partial u}{\\\\\\\\partial t} + u \\\\\\\\frac{\\\\\\\\partial u}{\\\\\\\\partial x} + v \\\\\\\\frac{\\\\\\\\partial u}{\\\\\\\\partial y} = 0 \\\\\\\\] \\\\n \\\\\\\\[ \\\\\\\\frac{\\\\\\\\partial v}{\\\\\\\\partial t} + u \\\\\\\\frac{\\\\\\\\partial v}{\\\\\\\\partial x} + v \\\\\\\\frac{\\\\\\\\partial v}{\\\\\\\\partial y} = 0. Physical properties: . Boundary conditions: u, v = 0 for x = 0, y = 0; u, v = exp(-t)*sin(2*pi*y) at x = 2; u, v = exp(-t)*sin(2*pi*x) at y = 2. Initial conditions: u, v = sin(2*pi*x*y). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference, fully-discrete schemes. Other information: write python code, do not call external packages."
        },
        {
            "key": 27,
            "name": "2D diffusion equation",
            "prompt": "Simulate the problem: 2D diffusion equation. Key: 27. Equation: \\\\n \\\\\\\\[ \\\\\\\\frac{\\\\\\\\partial u}{\\\\\\\\partial t} = \\\\\\\\nu \\\\\\\\frac{\\\\\\\\partial^2 u}{\\\\\\\\partial x^2} + \\\\\\\\nu \\\\\\\\frac{\\\\\\\\partial^2 u}{\\\\\\\\partial y^2} \\\\\\\\]. Physical properties: viscosity nu =0.05. Boundary conditions: u = 0 for x = 0, y = 0; u = exp(-t)*sin(2*pi*y) at x = 2; u = exp(-t)*sin(2*pi*x) at y = 2. Initial conditions: u = sin(2*pi*x*y). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference, fully-discrete schemes. Other information: write python code, do not call external packages."
        },
        {
            "key": 28,
            "name": "2D Burgers' equation",
            "prompt": "Simulate the problem: 2D Burgers' equation. Key: 28. Equation: \\\\frac{\\\\partial u}{\\\\partial t} + u \\\\frac{\\\\partial u}{\\\\partial x} + v \\\\frac{\\\\partial u}{\\\\partial y} = \\\\nu \\\\left( \\\\frac{\\\\partial^2 u}{\\\\partial x^2} + \\\\frac{\\\\partial^2 u}{\\\\partial y^2} \\\\right) \\\\frac{\\\\partial v}{\\\\partial t} + u \\\\frac{\\\\partial v}{\\\\partial x} + v \\\\frac{\\\\partial v}{\\\\partial y} = \\\\nu \\\\left( \\\\frac{\\\\partial^2 v}{\\\\partial x^2} + \\\\frac{\\\\partial^2 v}{\\\\partial y^2} \\\\right). Physical properties: viscosity nu = 0.01. Boundary conditions: u, v = 0 for x = 0, y = 0; u, v = exp(-t)*sin(2*pi*y) at x = 2; u, v = exp(-t)*sin(2*pi*x) at y = 2. Initial conditions: u, v = sin(2*pi*x*y). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference, fully-discrete schemes. Other information: write python code, do not call external packages."
        },
        {
            "key": 29,
            "name": "2D Laplace equation",
            "prompt": "Simulate the problem: 2D Laplace equation. Key: 29. Equation: \\\\frac{\\\\partial^2 p}{\\\\partial x^2} + \\\\frac{\\\\partial^2 p}{\\\\partial y^2} = 0. Physical properties: . Boundary conditions: p = 0 for x = 0, y = 0; p = exp(-t)*sin(2*pi*y) at x = 2; p = exp(-t)*sin(2*pi*x) at y = 2. Initial conditions: p = sin(2*pi*x*y). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference, fully-discrete schemes. Other information: write python code, do not call external packages."
        },
        {
            "key": 30,
            "name": "2D Poisson equation",
            "prompt": "Simulate the problem: 2D Poisson equation. Key: 30. Equation: \\\\frac{\\\\partial^2 p}{\\\\partial x^2} + \\\\frac{\\\\partial^2 p}{\\\\partial y^2} = b\\n. Physical properties: source term: b_{i,j} = 100 at i = nx/4, j=ny/4; b_{i,j}=-100 at i=3nx/4, j=3ny/4; b_{i,j}=0, elsewhere. Boundary conditions: p = 0 for x = 0, y = 0; p = exp(-t)*sin(2*pi*y) at x = 2; p = exp(-t)*sin(2*pi*x) at y = 2. Initial conditions: p = sin(2*pi*x*y). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference, fully-discrete schemes. Other information: write python code, do not call external packages."
        },
        {
            "key": 31,
            "name": "Channel Flow with Navier Stokes",
            "prompt": "Simulate the problem: Channel Flow with Navier Stokes. Key: 31. Equation: \\\\begin{align}\\n\\\\frac{\\\\partial u}{\\\\partial t} + u \\\\frac{\\\\partial u}{\\\\partial x} + v \\\\frac{\\\\partial u}{\\\\partial y} &= -\\\\frac{1}{\\\\rho} \\\\frac{\\\\partial p}{\\\\partial x} + \\\\nu \\\\left( \\\\frac{\\\\partial^2 u}{\\\\partial x^2} + \\\\frac{\\\\partial^2 u}{\\\\partial y^2} \\\\right) + F \\\\\\\\\\n\\\\frac{\\\\partial v}{\\\\partial t} + u \\\\frac{\\\\partial v}{\\\\partial x} + v \\\\frac{\\\\partial v}{\\\\partial y} &= -\\\\frac{1}{\\\\rho} \\\\frac{\\\\partial p}{\\\\partial y} + \\\\nu \\\\left( \\\\frac{\\\\partial^2 v}{\\\\partial x^2} + \\\\frac{\\\\partial^2 v}{\\\\partial y^2} \\\\right) \\\\\\\\\\n\\\\frac{\\\\partial^2 p}{\\\\partial x^2} + \\\\frac{\\\\partial^2 p}{\\\\partial y^2} &= -\\\\rho \\\\left( \\\\frac{\\\\partial u}{\\\\partial x} \\\\frac{\\\\partial u}{\\\\partial x} + 2 \\\\frac{\\\\partial u}{\\\\partial y} \\\\frac{\\\\partial v}{\\\\partial x} + \\\\frac{\\\\partial v}{\\\\partial y} \\\\frac{\\\\partial v}{\\\\partial y} \\\\right)\\n\\\\end{align}. Physical properties: source term: F=1  everywhere; density: rho = 1, viscosity: nu = 0.1. Boundary conditions: p, u, v = 0 for x = 0, y = 0; p, u, v = exp(-t)*sin(2*pi*y) at x = 2; p, u ,v = exp(-t)*sin(2*pi*x) at y = 2. Initial conditions: p, u, v = sin(2*pi*x*y). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference, fully-discrete schemes. Other information: write python code, do not call external packages."
        },
        {
            "key": 32,
            "name": "Cavity Flow with Navier Stokes",
            "prompt": "Simulate the problem: Cavity Flow with Navier Stokes. Key: 32. Equation: \\\\begin{align}\\n\\\\frac{\\\\partial u}{\\\\partial t} + u \\\\frac{\\\\partial u}{\\\\partial x} + v \\\\frac{\\\\partial u}{\\\\partial y} &= -\\\\frac{1}{\\\\rho} \\\\frac{\\\\partial p}{\\\\partial x} + \\\\nu \\\\left( \\\\frac{\\\\partial^2 u}{\\\\partial x^2} + \\\\frac{\\\\partial^2 u}{\\\\partial y^2} \\\\right) \\\\\\\\\\n\\\\frac{\\\\partial v}{\\\\partial t} + u \\\\frac{\\\\partial v}{\\\\partial x} + v \\\\frac{\\\\partial v}{\\\\partial y} &= -\\\\frac{1}{\\\\rho} \\\\frac{\\\\partial p}{\\\\partial y} + \\\\nu \\\\left( \\\\frac{\\\\partial^2 v}{\\\\partial x^2} + \\\\frac{\\\\partial^2 v}{\\\\partial y^2} \\\\right) \\\\\\\\\\n\\\\frac{\\\\partial^2 p}{\\\\partial x^2} + \\\\frac{\\\\partial^2 p}{\\\\partial y^2} &= -\\\\rho \\\\left( \\\\frac{\\\\partial u}{\\\\partial x} \\\\frac{\\\\partial u}{\\\\partial x} + 2 \\\\frac{\\\\partial u}{\\\\partial y} \\\\frac{\\\\partial v}{\\\\partial x} + \\\\frac{\\\\partial v}{\\\\partial y} \\\\frac{\\\\partial v}{\\\\partial y} \\\\right)\\n\\\\end{align}. Physical properties: density: rho = 1, viscosity: nu = 0.1. Boundary conditions: p, u, v = 0 for x = 0, y = 0; p, u, v = exp(-t)*sin(2*pi*y) at x = 2; p, u ,v = exp(-t)*sin(2*pi*x) at y = 2. Initial conditions: p, u, v = sin(2*pi*x*y). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Mesh: structured. Numerical method: finite difference, fully-discrete schemes. Other information: write python code, do not call external packages."
        }
    ]
}