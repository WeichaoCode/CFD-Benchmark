Here's a sample Python code using NumPy and Matplotlib to solve the given problem:

```python
import numpy as np
import matplotlib.pyplot as plt

# Step 1: Define Parameters
L = 10.0  # size of the domain
Nx = 101  # number of spatial grid points
dx = L/(Nx-1)  # spatial grid size
c = 1.0  # convection speed
epsilon_values = [0.0, 0.0005]  # damping factor for undamped and damped cases
dt = 0.5 * dx / c  # time step size based on CFL condition

# Step 2: Discretize the Domain
x = np.linspace(-L/2, L/2, Nx)

# Step 3: Initialize Variables
u_initial = np.exp(-x**2)

# Step 4: Time Integration using Explicit Euler Method
for epsilon in epsilon_values:
    u = u_initial.copy()
    un = np.zeros_like(u)  # intermediate update variable
    for n in range(100):
        un = u.copy()
        # Apply central difference scheme for spatial derivatives and explicit Euler method for time stepping
        for i in range(1, Nx-1):
            u[i] = un[i] - c * dt / dx * (un[i] - un[i-1]) + epsilon * (dt / dx**2) * (un[i+1] - 2*un[i] + un[i-1])
        # Apply periodic boundary conditions
        u[0] = un[0] - c * dt / dx * (un[0] - un[-1]) + epsilon * (dt / dx**2) * (un[1] - 2*un[0] + un[-1])
        u[-1] = un[-1] - c * dt / dx * (un[-1] - un[-2]) + epsilon * (dt / dx**2) * (un[0] - 2*un[-1] + un[-2])
        
    # Step 5: Visualization
    plt.plot(x, u_initial, label = 'Initial', color='grey')
    plt.plot(x, u, label = f"Damped epsilon={epsilon}")
    plt.legend()
    plt.xlim([-L/2, L/2])
    plt.show()
    
    # Save the final solution
    np.save(f"CFD_solution_e_{epsilon}.npy", u)
```
This solution assumes that the wave propagates for 100 time steps in a periodic domain and considers the undamped (epsilon=0) and damped (epsilon=0.0005) cases. The wave profiles at the beginning and after the simulation are plotted for each case. The computed solutions are also saved as .npy files.