```python
import numpy as np
from scipy.io import savemat

# Parameters
alpha = 0.1
Q_0 = 200
sigma = 0.1
T_final = 3
Nx = 101
Ny = 101
dx = 2 / (Nx - 1)
dy = 2 / (Ny - 1)
dt = 0.01

# Spatial grid
x = np.linspace(-1, 1, Nx)
y = np.linspace(-1, 1, Ny)
X, Y = np.meshgrid(x, y)

# Initial condition
T = 1 + 200 * np.exp(-(X**2 + Y**2) / (2 * 0.1**2))

# Time loop
for t in np.arange(0, T_final, dt):
    # Calculate source term
    q = Q_0 * np.exp(-(X**2 + Y**2) / (2 * sigma**2))

    # Finite difference approximation of the Laplacian
    dT_dx2 = (T[2:, :] - 2 * T[1:-1, :] + T[:-2, :]) / (dx**2)
    dT_dy2 = (T[:, 2:] - 2 * T[:, 1:-1] + T[:, :-2]) / (dy**2)

    # Update temperature
    T[1:-1, 1:-1] = T[1:-1, 1:-1] + alpha * dt * (dT_dx2 + dT_dy2) + dt * q[1:-1, 1:-1]

# Save results
savemat('T_final.mat', {'T': T})
```