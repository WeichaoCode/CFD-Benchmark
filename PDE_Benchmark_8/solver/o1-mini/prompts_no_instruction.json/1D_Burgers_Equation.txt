```python
import numpy as np

# Parameters
nu = 0.07
nx = 101
nt = 100
L = 2 * np.pi
dx = L / (nx - 1)
dt = dx * nu

# Spatial grid
x = np.linspace(0, L, nx)

# Initial condition
phi = np.exp(-x**2 / (4 * nu)) + np.exp(-(x - L)**2 / (4 * nu))
dphi_dx = np.zeros(nx)
dphi_dx[1:-1] = (phi[2:] - phi[:-2]) / (2 * dx)
# Periodic boundary conditions for derivative
dphi_dx[0] = (phi[1] - phi[-1]) / (2 * dx)
dphi_dx[-1] = (phi[0] - phi[-2]) / (2 * dx)
u = -2 * nu / phi * dphi_dx + 4

# Time-stepping
for _ in range(nt):
    u_x = np.zeros(nx)
    u_x[1:-1] = (u[2:] - u[:-2]) / (2 * dx)
    # Periodic boundary conditions for u_x
    u_x[0] = (u[1] - u[-1]) / (2 * dx)
    u_x[-1] = (u[0] - u[-2]) / (2 * dx)
    
    u_xx = np.zeros(nx)
    u_xx[1:-1] = (u[2:] - 2 * u[1:-1] + u[:-2]) / dx**2
    # Periodic boundary conditions for u_xx
    u_xx[0] = (u[1] - 2 * u[0] + u[-1]) / dx**2
    u_xx[-1] = (u[0] - 2 * u[-1] + u[-2]) / dx**2
    
    # Update u
    u = u + dt * (-u * u_x + nu * u_xx)

# Save the final solution
np.save('u.npy', u)
```