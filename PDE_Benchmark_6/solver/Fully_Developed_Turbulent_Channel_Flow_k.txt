Here is a Python code that implements the solution:

```python
import numpy as np
import matplotlib.pyplot as plt
from scipy.sparse import diags
from scipy.sparse.linalg import spsolve

# Constants
mu = 1.0e-5  # molecular viscosity
rho = 1.0  # density
dy = 0.01  # grid resolution
y = np.arange(0, 1+dy, dy)  # grid points
n = len(y)  # number of grid points

# Turbulence model constants
C_mu = 0.09
C_epsilon1 = 1.44
C_epsilon2 = 1.92
sigma_k = 1.0
sigma_epsilon = 1.3

# Initial conditions
k = np.ones(n)  # turbulent kinetic energy
epsilon = np.ones(n)  # turbulent dissipation rate

# Solve for turbulent quantities
for _ in range(100):  # iterate until convergence
    f_mu = np.tanh(np.power(y / 25, 2))  # damping function
    mu_t = C_mu * f_mu * rho * np.power(k, 2) / epsilon  # eddy viscosity
    mu_eff = mu + mu_t  # effective viscosity

    # Solve for k
    A = diags([mu_eff[:-1] / sigma_k / dy**2, -2 * mu_eff / sigma_k / dy**2, mu_eff[1:] / sigma_k / dy**2], [-1, 0, 1], shape=(n, n))
    b = -rho * epsilon
    k = spsolve(A, b)

    # Solve for epsilon
    A = diags([mu_eff[:-1] / sigma_epsilon / dy**2, -2 * mu_eff / sigma_epsilon / dy**2, mu_eff[1:] / sigma_epsilon / dy**2], [-1, 0, 1], shape=(n, n))
    b = -rho * epsilon / k * (C_epsilon1 * f_mu * k - C_epsilon2 * epsilon)
    epsilon = spsolve(A, b)

# Solve for velocity
A = diags([mu_eff[:-1] / dy**2, -2 * mu_eff / dy**2, mu_eff[1:] / dy**2], [-1, 0, 1], shape=(n, n))
b = -np.ones(n)
u = spsolve(A, b)

# Save the velocity profile
np.save('velocity.npy', u)

# Plot the velocity profile
plt.figure()
plt.plot(u, y)
plt.xlabel('Velocity')
plt.ylabel('y')
plt.title('Velocity profile in a turbulent channel flow')
plt.grid(True)
plt.show()
```

This code first solves for the turbulent kinetic energy `k` and the turbulent dissipation rate `epsilon` using the Myong and Kasagi \( k-\epsilon \) model. Then, it solves for the mean velocity `u` using the Reynolds-averaged Navier-Stokes (RANS) equation. The velocity profile is saved in `.npy` format and also plotted using Matplotlib.