Below is the Python code to solve the given 1D heat equation using a finite difference method. The code computes the solution at the final time step and saves it as a `.npy` file.

```python
import numpy as np

# Parameters
nx = 41
nt = 20
nu = 0.3
sigma = 0.2

# Spatial and temporal discretization
dx = 2 / (nx - 1)
dt = sigma * dx**2 / nu

# Initialize the solution array
u = np.ones(nx)
u[int(0.5 / dx):] = 2  # Initial condition

# Time-stepping loop
for n in range(nt):
    un = u.copy()
    for i in range(1, nx - 1):
        u[i] = un[i] + nu * dt / dx**2 * (un[i+1] - 2*un[i] + un[i-1])
    # Apply boundary conditions
    u[0] = 1
    u[-1] = 0

# Save the final solution
np.save('final_solution.npy', u)
```

### Explanation:
- **Initialization**: The solution array `u` is initialized with the initial conditions. The region from `x = 0.5` to `x = 1` is set to 2, and the rest is set to 1.
- **Time-stepping loop**: The loop iterates over the number of time steps `nt`. For each time step, the finite difference scheme updates the solution `u` using the previous time step's values `un`.
- **Boundary conditions**: The Dirichlet boundary conditions are applied at each time step.
- **Saving the solution**: The final solution at the last time step is saved to a file named `final_solution.npy`.

This code will produce a 1D NumPy array representing the solution at the final time step, which is saved as specified.