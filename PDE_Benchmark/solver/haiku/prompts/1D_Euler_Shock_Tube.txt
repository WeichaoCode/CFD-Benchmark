```python
import numpy as np

# Parameters
gamma = 1.4
nx = 400  # Number of grid points
dx = 2.0/nx  # Grid spacing
x = np.linspace(-1, 1, nx)  # Grid points
CFL = 0.5
t_final = 0.25

# Initialize arrays
rho = np.zeros(nx)
u = np.zeros(nx)
p = np.zeros(nx)
E = np.zeros(nx)

# Set initial conditions
rho[x < 0] = 1.0
rho[x >= 0] = 0.125
p[x < 0] = 1.0
p[x >= 0] = 0.1
E[x < 0] = p[x < 0]/(gamma-1)/rho[x < 0]
E[x >= 0] = p[x >= 0]/(gamma-1)/rho[x >= 0]

# Conservative variables
U = np.zeros((3, nx))
F = np.zeros((3, nx))
F_plus = np.zeros((3, nx))
F_minus = np.zeros((3, nx))

def compute_conservatives(rho, u, E):
    U[0] = rho
    U[1] = rho*u
    U[2] = rho*E

def compute_fluxes(U):
    rho = np.maximum(U[0], 1e-10)
    u = U[1]/rho
    E = U[2]/rho
    p = (gamma-1)*rho*(E - 0.5*u*u)
    p = np.maximum(p, 1e-10)
    
    c = np.sqrt(gamma*p/rho)
    lam = np.maximum(np.abs(u) + c, 1e-10)
    
    F[0] = rho*u
    F[1] = rho*u*u + p
    F[2] = u*(rho*E + p)
    
    return lam

# Lax-Friedrich flux splitting
def flux_splitting(U, lam):
    for i in range(3):
        F_plus[i] = 0.5*(F[i] + lam*U[i])
        F_minus[i] = 0.5*(F[i] - lam*U[i])

# Initial conservative variables
compute_conservatives(rho, u, E)

# Time stepping
t = 0
n_steps = 0
max_steps = 10000  # Add maximum number of steps

while t < t_final and n_steps < max_steps:
    # Compute fluxes and maximum wave speed
    lam = compute_fluxes(U)
    dt = CFL * dx / np.max(lam)
    
    # Split fluxes
    flux_splitting(U, np.max(lam))
    
    U_old = U.copy()
    
    # Update solution
    for i in range(1, nx-1):
        U[:,i] = U_old[:,i] - dt/dx*(F_plus[:,i] - F_plus[:,i-1]) - dt/dx*(F_minus[:,i+1] - F_minus[:,i])
    
    # Reflective boundary conditions
    U[:,0] = U[:,1]
    U[:,0][1] = -U[:,1][1]
    U[:,-1] = U[:,-2]
    U[:,-1][1] = -U[:,-2][1]
    
    t += dt
    n_steps += 1

# Compute final primitive variables
rho = U[0]
u = U[1]/U[0]
E = U[2]/U[0]
p = (gamma-1)*(U[2] - 0.5*rho*u*u)

# Save final solutions
np.save('rho.npy', rho)
np.save('u.npy', u)
np.save('p.npy', p)
np.save('E.npy', E)
```