Here's a sample implementation using the specifications you provided.

```python
import numpy as np
import matplotlib.pyplot as plt

# Function to define boundary conditions
def boundary_conditions(p, nx, ny, Ly):
    p[:, 0] = 0     # p = 0 at x = 0
    p[:, -1] = np.linspace(0, Ly, ny)  # p = y at x = Lx
    p[0, :] = p[1, :]    # dp/dy = 0 at y = 0
    p[-1, :] = p[-2, :]  # dp/dy = 0 at y = Ly
    return p

# Function to implement central difference scheme
def central_diff(p, nx, ny, dx, dy):
    pn = p.copy()
    pn[:, 0] = 0
    pn[:, -1] = np.linspace(0, Ly, ny)
    p[1:-1, 1:-1] = ((dy**2 * (pn[1:-1, 0:-2] + pn[1:-1, 2:]) + 
                      dx**2 * (pn[0:-2, 1:-1] + pn[2:, 1:-1])) /
                      (2 * (dx**2 + dy**2)))
    return p

# Parameters
Lx = 2.
Ly = 1.
nx = 31
ny = 31
dx = Lx / (nx - 1)
dy = Ly / (ny - 1)

# Initialization
p = np.zeros((ny, nx))
p = boundary_conditions(p, nx, ny, Ly)

# Solver
l1_target = 1e-6
l1_norm = 1
while l1_norm > l1_target:
    pn = p.copy()
    p = central_diff(p, nx, ny, dx, dy)
    p = boundary_conditions(p, nx, ny, Ly)
    l1_norm = (np.sum(np.abs(p[:]) - np.abs(pn[:])) /
               np.sum(np.abs(pn[:])))

# Plotting
x = np.linspace(0, Lx, nx)
y = np.linspace(0, Ly, ny)
X, Y = np.meshgrid(x, y)
plt.figure(figsize=(6, 5))
plt.contourf(X, Y, p)
plt.colorbar(label='p(x,y)')
plt.xlabel('X')
plt.ylabel('Y')
plt.show()
```

This script initializes arrays for the x and y coordinates and a grid of initial values for p. The central difference scheme is implemented with the updating formula derived from the five-point difference scheme. Then, the problem is solved iteratively until the change in p is small enough. The result is visualized as a contour plot. Boundary conditions are maintained throughout the iterations.