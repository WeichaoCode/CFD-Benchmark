```python
import numpy as np

# Parameters
nx, ny = 51, 51
nt = 500
dx = dy = 2.0 / (nx - 1)
dt = 0.001
rho = 1.0
nu = 0.1

# Initialize fields
u = np.zeros((ny, nx))
v = np.zeros((ny, nx))
p = np.zeros((ny, nx))
b = np.zeros((ny, nx))

# Boundary conditions
u[-1, :] = 1  # Lid-driven top boundary

# Helper function for pressure Poisson equation
def pressure_poisson(p, dx, dy):
    pn = np.empty_like(p)
    for _ in range(50):  # Iterations for Poisson equation
        pn = p.copy()
        p[1:-1, 1:-1] = (((pn[1:-1, 2:] + pn[1:-1, :-2]) * dy**2 +
                          (pn[2:, 1:-1] + pn[:-2, 1:-1]) * dx**2) /
                         (2 * (dx**2 + dy**2)) -
                         dx**2 * dy**2 / (2 * (dx**2 + dy**2)) * b[1:-1, 1:-1])

        # Pressure boundary conditions
        p[:, -1] = p[:, -2]  # dp/dx = 0 at x = 2
        p[:, 0] = p[:, 1]    # dp/dx = 0 at x = 0
        p[-1, :] = 0         # p = 0 at y = 2
        p[0, :] = p[1, :]    # dp/dy = 0 at y = 0
    return p

# Time-stepping loop
for n in range(nt):
    un = u.copy()
    vn = v.copy()

    # Build up the RHS of the pressure Poisson equation
    b[1:-1, 1:-1] = (rho * (1 / dt *
                            ((un[1:-1, 2:] - un[1:-1, :-2]) / (2 * dx) +
                             (vn[2:, 1:-1] - vn[:-2, 1:-1]) / (2 * dy)) -
                            ((un[1:-1, 2:] - un[1:-1, :-2]) / (2 * dx))**2 -
                            2 * ((un[2:, 1:-1] - un[:-2, 1:-1]) / (2 * dy) *
                                 (vn[1:-1, 2:] - vn[1:-1, :-2]) / (2 * dx)) -
                            ((vn[2:, 1:-1] - vn[:-2, 1:-1]) / (2 * dy))**2))

    # Solve pressure Poisson equation
    p = pressure_poisson(p, dx, dy)

    # Update velocity fields
    u[1:-1, 1:-1] = (un[1:-1, 1:-1] -
                     un[1:-1, 1:-1] * dt / dx *
                     (un[1:-1, 1:-1] - un[1:-1, :-2]) -
                     vn[1:-1, 1:-1] * dt / dy *
                     (un[1:-1, 1:-1] - un[:-2, 1:-1]) -
                     dt / (2 * rho * dx) * (p[1:-1, 2:] - p[1:-1, :-2]) +
                     nu * (dt / dx**2 *
                           (un[1:-1, 2:] - 2 * un[1:-1, 1:-1] + un[1:-1, :-2]) +
                           dt / dy**2 *
                           (un[2:, 1:-1] - 2 * un[1:-1, 1:-1] + un[:-2, 1:-1])))

    v[1:-1, 1:-1] = (vn[1:-1, 1:-1] -
                     un[1:-1, 1:-1] * dt / dx *
                     (vn[1:-1, 1:-1] - vn[1:-1, :-2]) -
                     vn[1:-1, 1:-1] * dt / dy *
                     (vn[1:-1, 1:-1] - vn[:-2, 1:-1]) -
                     dt / (2 * rho * dy) * (p[2:, 1:-1] - p[:-2, 1:-1]) +
                     nu * (dt / dx**2 *
                           (vn[1:-1, 2:] - 2 * vn[1:-1, 1:-1] + vn[1:-1, :-2]) +
                           dt / dy**2 *
                           (vn[2:, 1:-1] - 2 * vn[1:-1, 1:-1] + vn[:-2, 1:-1])))

    # Enforce boundary conditions
    u[0, :] = 0
    u[:, 0] = 0
    u[:, -1] = 0
    u[-1, :] = 1  # Lid-driven top boundary

    v[0, :] = 0
    v[-1, :] = 0
    v[:, 0] = 0
    v[:, -1] = 0

# Save the final solutions
np.save('u.npy', u)
np.save('v.npy', v)
np.save('p.npy', p)
```