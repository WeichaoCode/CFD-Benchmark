```python
import numpy as np

# Domain setup
nx = 200  # Number of spatial points
x = np.linspace(0, 2*np.pi, nx)
dx = x[1] - x[0]
t_final = 5.0

# Set very conservative time step
dt = 0.0001
nt = int(t_final/dt)

# Initial condition
u = np.sin(x) + 0.5*np.sin(0.5*x)

# Time stepping using Lax-Friedrichs method
for n in range(nt):
    # Periodic boundary conditions
    u_left = np.roll(u, 1)
    u_right = np.roll(u, -1)
    
    # Lax-Friedrichs scheme
    u_new = 0.5*(u_right + u_left) - 0.5*dt/(2*dx)*(u_right*u_right - u_left*u_left)
    
    # Update solution
    u = u_new.copy()

# Save final solution
np.save('u.npy', u)
```