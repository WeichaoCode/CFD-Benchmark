Here is a Python code implementation for the given problem:

```python
import numpy as np
import matplotlib.pyplot as plt

def compute_flux(U, gamma):
    """Compute the flux vector for given conservative variables."""
    rho = U[0]
    u = U[1] / rho
    E = U[2] / rho
    p = (gamma - 1) * (rho * E - 0.5 * rho * u**2)
    F = np.zeros_like(U)
    F[0] = rho * u
    F[1] = rho * u**2 + p
    F[2] = u * (rho * E + p)
    return F

def maccormack(U, gamma, dx, dt):
    """Compute the solution at the next time step using the MacCormack method."""
    U_star = U.copy()
    F = compute_flux(U, gamma)
    U_star[:, :-1] = U[:, :-1] - dt/dx * (F[:, 1:] - F[:, :-1])
    F_star = compute_flux(U_star, gamma)
    U_new = 0.5 * (U + U_star - dt/dx * (F_star - F))
    return U_new

def solve_shock_tube(U0, gamma, dx, dt, Nt, save_steps):
    """Solve the shock tube problem."""
    U = U0.copy()
    results = []
    for i in range(Nt):
        U = maccormack(U, gamma, dx, dt)
        if i % save_steps == 0:
            results.append(U.copy())
    return results

# Define parameters
L = 2.0
Nx = 81
T = 0.25
gamma = 1.4
x0 = 0.5 * L
dx = L / (Nx - 1)
CFL = 1.0
dt = CFL * dx / np.sqrt(gamma)
Nt = int(T / dt) + 1
save_steps = Nt // 4

# Discretize the domain
x = np.linspace(-1, 1, Nx)

# Initialize variables
U0 = np.zeros((3, Nx))
U0[0, :] = 1.0
U0[0, x < x0] = 0.125
U0[1, :] = 0.0
U0[2, :] = 1.0 / (gamma - 1)
U0[2, x < x0] = 0.1 / (gamma - 1)

# Solve the shock tube problem
results = solve_shock_tube(U0, gamma, dx, dt, Nt, save_steps)

# Visualization
plt.figure(figsize=(12, 9))
for i, U in enumerate(results):
    rho = U[0]
    u = U[1] / rho
    E = U[2] / rho
    p = (gamma - 1) * (rho * E - 0.5 * rho * u**2)
    plt.subplot(3, 1, 1)
    plt.plot(x, rho, label=f't = {i * save_steps * dt:.2f}')
    plt.subplot(3, 1, 2)
    plt.plot(x, u, label=f't = {i * save_steps * dt:.2f}')
    plt.subplot(3, 1, 3)
    plt.plot(x, p, label=f't = {i * save_steps * dt:.2f}')
plt.subplot(3, 1, 1)
plt.legend()
plt.title('Density')
plt.subplot(3, 1, 2)
plt.legend()
plt.title('Velocity')
plt.subplot(3, 1, 3)
plt.legend()
plt.title('Pressure')
plt.tight_layout()
plt.show()
```
This code uses the MacCormack method to solve the one-dimensional Euler equations governing the shock tube problem. The results are visualized as profiles of density, velocity, and pressure at different time steps. The formation of shock waves, contact discontinuities, and expansion fans can be observed in these plots.