```python
import numpy as np
from scipy.sparse import lil_matrix
from scipy.sparse.linalg import spsolve

# Domain parameters
Lx, Ly = 2.0, 1.0
nx, ny = 50, 50  # Number of grid points
dx, dy = Lx / (nx - 1), Ly / (ny - 1)

# Create grid
x = np.linspace(0, Lx, nx)
y = np.linspace(0, Ly, ny)

# Initialize p and b
p = np.zeros((ny, nx))
b = np.zeros((ny, nx))

# Set source term b
b[int(ny / 4), int(nx / 4)] = 100
b[int(3 * ny / 4), int(3 * nx / 4)] = -100

# Create coefficient matrix A and right-hand side vector B
A = lil_matrix((nx * ny, nx * ny))
B = np.zeros(nx * ny)

# Fill the matrix A and vector B
for j in range(ny):
    for i in range(nx):
        row = j * nx + i
        if i == 0 or i == nx - 1 or j == 0 or j == ny - 1:
            # Apply Dirichlet boundary conditions
            A[row, row] = 1
            B[row] = 0
        else:
            # Interior points
            A[row, row] = -2 / dx**2 - 2 / dy**2
            A[row, row - 1] = 1 / dx**2
            A[row, row + 1] = 1 / dx**2
            A[row, row - nx] = 1 / dy**2
            A[row, row + nx] = 1 / dy**2
            B[row] = b[j, i]

# Solve the linear system
A = A.tocsr()
p_flat = spsolve(A, B)

# Reshape the solution to 2D
p = p_flat.reshape((ny, nx))

# Save the solution
np.save('p.npy', p)
```