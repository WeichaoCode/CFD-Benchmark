Below is the Python code to solve the given 2D diffusion equation using a finite difference scheme. The code initializes the field according to the specified initial and boundary conditions, iterates over the time steps, and saves the final solution to a `.npy` file.

```python
import numpy as np

# Parameters
nx, ny = 31, 31
nt = 50
nu = 1.0
sigma = 0.25

# Spatial domain
x = np.linspace(0, 2, nx)
y = np.linspace(0, 2, ny)
dx = x[1] - x[0]
dy = y[1] - y[0]

# Time step
dt = sigma * dx * dy / nu

# Initialize the field
u = np.ones((ny, nx))
u[int(0.5 / dy):int(1 / dy + 1), int(0.5 / dx):int(1 / dx + 1)] = 2

# Time-stepping loop
for n in range(nt):
    un = u.copy()
    u[1:-1, 1:-1] = (un[1:-1, 1:-1] +
                     nu * dt / dx**2 * (un[1:-1, 2:] - 2 * un[1:-1, 1:-1] + un[1:-1, :-2]) +
                     nu * dt / dy**2 * (un[2:, 1:-1] - 2 * un[1:-1, 1:-1] + un[:-2, 1:-1]))
    
    # Apply Dirichlet boundary conditions
    u[0, :] = 1
    u[-1, :] = 1
    u[:, 0] = 1
    u[:, -1] = 1

# Save the final solution
np.save('final_solution.npy', u)
```

This code sets up the initial conditions, applies the finite difference scheme to update the solution over time, and enforces the Dirichlet boundary conditions at each time step. Finally, it saves the final solution to a file named `final_solution.npy`.