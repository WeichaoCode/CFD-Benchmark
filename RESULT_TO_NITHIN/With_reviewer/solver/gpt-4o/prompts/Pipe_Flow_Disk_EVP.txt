```python
import numpy as np
from scipy.sparse import diags, kron, eye
from scipy.sparse.linalg import eigs

# Parameters
Re = 1e4
k_z = 1
N_r = 50  # Number of radial points
N_phi = 50  # Number of azimuthal points

# Radial grid
r = np.linspace(0, 1, N_r)
dr = r[1] - r[0]

# Azimuthal grid
phi = np.linspace(0, 2 * np.pi, N_phi)
dphi = phi[1] - phi[0]

# Background flow
w0 = 1 - r**2

# Construct finite difference matrices
D2_r = diags([1, -2, 1], [-1, 0, 1], shape=(N_r, N_r)) / dr**2
D2_r = D2_r.tolil()
D2_r[0, 0] = D2_r[-1, -1] = 1  # Dirichlet BC at r=0 and r=1

# Azimuthal derivative matrix (Fourier space)
D2_phi = diags([-2, 1, 1], [0, -1, 1], shape=(N_phi, N_phi)) / dphi**2
D2_phi = D2_phi.tolil()
D2_phi[0, -1] = D2_phi[-1, 0] = 1  # Periodic BC

# Identity matrices
I_r = eye(N_r)
I_phi = eye(N_phi)

# Construct the linear operator for the eigenvalue problem
L = kron(I_phi, D2_r) + kron(D2_phi, I_r) - k_z**2 * eye(N_r * N_phi)
L = (1/Re) * L

# Solve the eigenvalue problem
eigenvalues, eigenvectors = eigs(L, k=1, which='LR')

# Extract the most unstable mode
u_phi = eigenvectors[:, 0].real.reshape((N_r, N_phi))
w = eigenvectors[:, 0].imag.reshape((N_r, N_phi))

# Save the results
np.save('u_phi.npy', u_phi)
np.save('w.npy', w)
```