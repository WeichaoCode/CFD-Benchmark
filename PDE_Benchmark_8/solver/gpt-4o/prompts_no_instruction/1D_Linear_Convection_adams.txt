```python
import numpy as np

# Parameters
c = 1.0  # Convection speed
epsilon_values = [0, 5e-4]  # Damping factors
x_start, x_end = -5, 5  # Spatial domain
N_x = 101  # Number of spatial grid points
dx = (x_end - x_start) / (N_x - 1)  # Spatial step size
x = np.linspace(x_start, x_end, N_x)  # Spatial grid

# Initial condition
u_initial = np.exp(-x**2)

# Time step based on CFL condition
CFL = 0.5  # CFL number
dt = CFL * dx / c  # Time step size
t_final = 2.0  # Final time
N_t = int(t_final / dt)  # Number of time steps

# Function to apply periodic boundary conditions
def apply_periodic_boundary(u):
    u[0] = u[-2]
    u[-1] = u[1]

# Function to compute the spatial derivatives
def compute_spatial_derivatives(u, dx, epsilon):
    # Central difference for first derivative
    du_dx = (np.roll(u, -1) - np.roll(u, 1)) / (2 * dx)
    # Central difference for second derivative
    d2u_dx2 = (np.roll(u, -1) - 2 * u + np.roll(u, 1)) / (dx**2)
    return du_dx, d2u_dx2

# Time integration using Adams-Bashforth method
for epsilon in epsilon_values:
    # Initialize solution
    u = u_initial.copy()
    
    # First time step using Explicit Euler
    du_dx, d2u_dx2 = compute_spatial_derivatives(u, dx, epsilon)
    u_new = u - dt * (c * du_dx - epsilon * d2u_dx2)
    apply_periodic_boundary(u_new)
    
    # Time-stepping loop
    for n in range(1, N_t):
        # Compute spatial derivatives
        du_dx, d2u_dx2 = compute_spatial_derivatives(u_new, dx, epsilon)
        
        # Adams-Bashforth step
        u_next = u_new - dt * (c * du_dx - epsilon * d2u_dx2)
        
        # Apply periodic boundary conditions
        apply_periodic_boundary(u_next)
        
        # Update solutions
        u = u_new
        u_new = u_next
    
    # Save the final solution
    if epsilon == 0:
        np.save('u_undamped.npy', u_new)
    else:
        np.save('u_damped.npy', u_new)
```

This code solves the given PDE using the specified numerical method and saves the final solution for both the undamped and damped cases as separate `.npy` files. The solution is computed on a 1D spatial grid with periodic boundary conditions.