#!/usr/bin/env python3
import numpy as np

# Parameters
nu = 0.05
Lx = 2.0
Ly = 2.0
t_final = 0.3777

# Spatial discretization
nx = 101
ny = 101
dx = Lx / (nx - 1)
dy = Ly / (ny - 1)
x = np.linspace(0, Lx, nx)
y = np.linspace(0, Ly, ny)

# Time discretization
dt = 0.0001  # time step chosen for stability of explicit scheme
nt = int(t_final / dt)

# Initialize u with Dirichlet boundary conditions u = 1
u = np.ones((ny, nx))

# Set initial condition: u = 2 in region where 0.5 <= x, y <= 1
X, Y = np.meshgrid(x, y)
u[np.logical_and(np.logical_and(X >= 0.5, X <= 1.0), np.logical_and(Y >= 0.5, Y <= 1.0))] = 2.0

# Time stepping loop (explicit finite difference method)
for n in range(nt):
    u_new = u.copy()
    # Update interior points using central differences in space
    u_new[1:-1, 1:-1] = (u[1:-1, 1:-1] +
                         dt * nu * (
                             (u[1:-1, 2:] - 2*u[1:-1, 1:-1] + u[1:-1, 0:-2]) / dx**2 +
                             (u[2:, 1:-1] - 2*u[1:-1, 1:-1] + u[0:-2, 1:-1]) / dy**2
                         ))
    # Reapply Dirichlet boundary conditions: u = 1 on all boundaries
    u_new[0, :] = 1.0
    u_new[-1, :] = 1.0
    u_new[:, 0] = 1.0
    u_new[:, -1] = 1.0

    u = u_new.copy()

# Save the final solution in a .npy file
np.save("u.npy", u)