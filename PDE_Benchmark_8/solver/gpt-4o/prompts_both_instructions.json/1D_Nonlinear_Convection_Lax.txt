Below is the Python code to solve the given partial differential equation using the Lax method. The code will simulate the wave propagation over 500 time steps and save the final solution in a `.npy` file.

```python
import numpy as np

# Parameters
L = 2 * np.pi
nu = 0.5
dt = 0.01
T = 500

# Calculate dx based on the given relationship
dx = dt / nu

# Discretize the spatial domain
x = np.linspace(0, L, int(np.ceil(L / dx)), endpoint=False)
nx = len(x)

# Initial condition
u = np.sin(x) + 0.5 * np.sin(0.5 * x)

# Time-stepping using the Lax method
for n in range(T):
    u_next = np.zeros_like(u)
    # Apply the Lax method
    for j in range(nx):
        u_next[j] = 0.5 * (u[(j + 1) % nx] + u[(j - 1) % nx]) - \
                    (dt / (2 * dx)) * (0.5 * u[(j + 1) % nx]**2 - 0.5 * u[(j - 1) % nx]**2)
    u = u_next

# Save the final solution
np.save('final_solution.npy', u)
```

### Explanation:
- **Parameters**: The spatial domain is discretized using `dx = dt / nu`, and the temporal domain is set for 500 time steps.
- **Initial Condition**: The initial wave profile is set as \( u(x, 0) = \sin(x) + 0.5 \sin(0.5x) \).
- **Lax Method**: The Lax method is used to update the solution at each time step. The periodic boundary conditions are applied using modulo operations.
- **Saving the Solution**: The final solution after 500 time steps is saved in a `.npy` file using NumPy's `save` function. The solution is a 1D array representing the wave amplitude at the final time step.