In Python, we can implement the method as follows: 

```python
# Importing the required libraries
import numpy as np
import matplotlib.pyplot as plt

# Define parameters 
Lx, Ly = 1.0, 1.0
nx, ny = 50, 50
dx, dy = Lx / (nx - 1), Ly / (ny - 1)

# Initialize the solution
p = np.zeros((nx, ny))

# Apply boundary conditions
p[:, 0] = 0  # p = 0 at x = 0
p[:, -1] = np.linspace(0, Ly, ny)  # p = y at x = Lx 
p[0, :] = p[1, :]  # dp/dy = 0 at y = 0
p[-1, :] = p[-2, :]  # dp/dy = 0 at y = Ly 

# Iterative solver
def laplace_2d(p, dx, dy, l1norm_target):
    l1norm = 1
    pn = np.empty_like(p)
    
    while l1norm > l1norm_target:
        pn = p.copy()
        p[1:-1, 1:-1] = ((dy**2 * (pn[1:-1, 2:] + pn[1:-1, 0:-2]) +
                         dx**2 * (pn[2:, 1:-1] + pn[0:-2, 1:-1])) /
                        (2 * (dx**2 + dy**2)))
            
        p[0, :] = p[1, :]  # dp/dy = 0 at y = 0
        p[-1, :] = p[-2, :]  # dp/dy = 0 at y = Ly 
        l1norm = (np.sum(np.abs(p[:]) - np.abs(pn[:])) /
                np.sum(np.abs(pn[:])))
     
    return p

# Call the solver function
p = laplace_2d(p, dx, dy, 1e-4)


# Plotting the solution
plt.contourf(p)
plt.colorbar()
plt.title('Steady State Distribution of p(x,y)')
plt.xlabel('X Direction')
plt.ylabel('Y Direction')
plt.show()
```
Note: This script creates a contour plot of the steady-state solution of the 2D Laplace equation. It uses the Gauss-Seidel method as the iterative solver. The boundary conditions are applied explicitly in the while loop.