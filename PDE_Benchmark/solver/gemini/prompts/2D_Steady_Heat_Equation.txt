```python
import numpy as np

def solve_laplace(width, height, T_left, T_right, T_top, T_bottom, nx, ny, max_iter=10000, tolerance=1e-6):
    """
    Solves the Laplace equation on a rectangular domain using the finite difference method.

    Args:
        width (float): Width of the domain.
        height (float): Height of the domain.
        T_left (float): Temperature on the left boundary.
        T_right (float): Temperature on the right boundary.
        T_top (float): Temperature on the top boundary.
        T_bottom (float): Temperature on the bottom boundary.
        nx (int): Number of grid points in the x-direction.
        ny (int): Number of grid points in the y-direction.
        max_iter (int): Maximum number of iterations.
        tolerance (float): Convergence tolerance.

    Returns:
        numpy.ndarray: Temperature field.
    """

    # Grid spacing
    dx = width / (nx - 1)
    dy = height / (ny - 1)

    # Initialize temperature field
    T = np.zeros((ny, nx))

    # Apply boundary conditions
    T[:, 0] = T_left  # Left boundary
    T[:, -1] = T_right # Right boundary
    T[0, :] = T_bottom # Bottom boundary
    T[-1, :] = T_top   # Top boundary

    # Iterate until convergence
    for iteration in range(max_iter):
        T_old = np.copy(T)

        # Update interior points using finite difference approximation
        for i in range(1, ny - 1):
            for j in range(1, nx - 1):
                T[i, j] = 0.25 * (T[i+1, j] + T[i-1, j] + T[i, j+1] + T[i, j-1])

        # Check for convergence
        max_diff = np.max(np.abs(T - T_old))
        if max_diff < tolerance:
            print(f"Converged after {iteration+1} iterations.")
            break
    else:
        print("Did not converge within the maximum number of iterations.")

    return T

if __name__ == '__main__':
    # Problem parameters
    width = 5.0
    height = 4.0
    T_left = 10.0
    T_right = 40.0
    T_top = 0.0
    T_bottom = 20.0
    nx = 50
    ny = 40

    # Solve the Laplace equation
    T = solve_laplace(width, height, T_left, T_right, T_top, T_bottom, nx, ny)

    # Save the temperature field
    np.save('T.npy', T)
```