```python
import numpy as np
import matplotlib.pyplot as plt

# Define parameters
nu = 0.5  # CFL number
dt = 0.01
T = 500
dx = dt / nu
L = 2 * np.pi
nx = int(L / dx)
x = np.linspace(0, L, nx, endpoint=False)

# Initial condition
u = np.sin(x) + 0.5 * np.sin(0.5 * x)

# Function to compute flux
def flux(u):
    return 0.5 * u**2

def macCormack(u, dx, dt):
    # Predictor step
    f = flux(u)
    u_star = u.copy()
    for j in range(nx):
        u_star[j] = u[j] - (dt / dx) * (f[(j+1) % nx] - f[j])

    # Corrector step
    f_star = flux(u_star)
    u_new = u.copy()
    for j in range(nx):
        u_new[j] = 0.5 * (u[j] + u_star[j]
                          - (dt / dx) * (f_star[j] - f_star[j-1]))

    return u_new

# Run the simulation
for n in range(T):
    u = macCormack(u, dx, dt)

# Save the final result
np.save('macCormack_solution.npy', u)

# Comparison plotting (not implemented here for Lax and Lax-Wendroff)
plt.plot(x, u, label='MacCormack', color='r')
plt.title('1D Nonlinear Convection using MacCormack method')
plt.xlabel('x')
plt.ylabel('u(x)')
plt.legend()
plt.show()
```

### Highlights and Considerations:

1. **Initial Conditions & Boundary Setup**:
   - The initial condition, `u(x,0)`, is defined using a combination of sine functions to model wave shapes.
   - The domain configuration assumes periodicity, ensuring continuity at the boundaries by utilizing modulo operations (`% nx`).

2. **MacCormack Scheme**:
   - The method is split into `predictor` and `corrector` steps, executed in loops to theoretically handle each point in the spatial grid.
   - The predictor step estimates the next time step values.
   - The corrector step refines these predictions using flux calculations on the intermediate values.
  
3. **Numerical Stability**:
   - The parameters `dt`, `dx`, and CFL `nu` are crucial to maintaining numerical stability and realistic simulation outcomes.
  
4. **Performance & Optimization**:
   - NumPy enhances performance, using vectorized operations for efficient computation of arrays.
   - Periodic boundary conditions are implemented using array indexing, enabling seamless domain wrapping.

5. **Visualization**:
   - Matplotlib provides a straightforward means to visualize the results, aiding interpretation of the wave propagation.
   - Extension: Implement Lax and Lax-Wendroff for result comparison to assess accuracy and stability (not included here).

6. **Output Handling**:
   - The final result is saved using `.npy`, enabling persistence and post-processing for deeper analysis or validation with alternate methods.