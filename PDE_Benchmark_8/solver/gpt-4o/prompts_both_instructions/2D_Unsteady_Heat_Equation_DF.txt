```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
alpha = 0.01  # Thermal diffusivity
Q0 = 200.0  # Source term strength
sigma = 0.1  # Source term spread
nx, ny = 41, 41  # Grid resolution
x_min, x_max = -1.0, 1.0
y_min, y_max = -1.0, 1.0
t_max = 3.0  # Maximum time
r = 0.25  # Stability parameter

# Derived parameters
dx = (x_max - x_min) / (nx - 1)
dy = (y_max - y_min) / (ny - 1)
dt = r * dx**2 / alpha
nt = int(t_max / dt) + 1
beta2 = (dx / dy)**2

# Grid
x = np.linspace(x_min, x_max, nx)
y = np.linspace(y_min, y_max, ny)
X, Y = np.meshgrid(x, y)

# Initial condition
T = np.zeros((ny, nx))
T_new = np.zeros_like(T)
T_old = np.zeros_like(T)

# Source term
q = Q0 * np.exp(-(X**2 + Y**2) / (2 * sigma**2))

# Time-stepping loop
for n in range(1, nt):
    # Update T using DuFort-Frankel method
    T_new[1:-1, 1:-1] = (
        (2 * r * (T[1:-1, 2:] + T[1:-1, :-2]) +
         2 * beta2 * r * (T[2:, 1:-1] + T[:-2, 1:-1]) +
         T_old[1:-1, 1:-1] + 2 * dt * q[1:-1, 1:-1]) /
        (1 + 2 * r + 2 * beta2 * r)
    )
    
    # Apply Dirichlet boundary conditions
    T_new[0, :] = 0
    T_new[-1, :] = 0
    T_new[:, 0] = 0
    T_new[:, -1] = 0
    
    # Update old and current temperature fields
    T_old[:, :] = T
    T[:, :] = T_new

# Save the final temperature field
np.save('T_final.npy', T)

# Plot the final temperature field
plt.contourf(X, Y, T, 50, cmap='hot')
plt.colorbar(label='Temperature (Â°C)')
plt.title('Temperature Field at Final Time Step')
plt.xlabel('x')
plt.ylabel('y')
plt.show()
```

This code solves the given PDE using the DuFort-Frankel method and saves the final temperature field as a `.npy` file. The contour plot visualizes the temperature distribution at the final time step.