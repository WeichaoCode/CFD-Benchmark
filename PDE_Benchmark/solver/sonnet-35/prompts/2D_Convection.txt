```python
import numpy as np
import matplotlib.pyplot as plt

# Problem parameters
Lx, Ly = 2.0, 2.0  # Domain size
nx, ny = 100, 100  # Grid points
nt = 200  # Time steps
dt = 0.32 / nt  # Time step size
dx = Lx / (nx-1)  # Spatial step x
dy = Ly / (ny-1)  # Spatial step y

# Initialize solution arrays
u = np.ones((ny, nx))
v = np.ones((ny, nx))

# Initial condition modification
u[(0.5/dy <= np.arange(ny)*dy) & (np.arange(ny)*dy <= 1)] = 2
v[(0.5/dy <= np.arange(ny)*dy) & (np.arange(ny)*dy <= 1)] = 2

# Boundary conditions
u[0,:] = u[-1,:] = u[:,0] = u[:,-1] = 1
v[0,:] = v[-1,:] = v[:,0] = v[:,-1] = 1

# Finite difference solver (MacCormack method)
for _ in range(nt):
    # Predictor step
    u_pred = u.copy()
    v_pred = v.copy()
    
    for i in range(1, ny-1):
        for j in range(1, nx-1):
            u_pred[i,j] = u[i,j] - dt * (u[i,j] * (u[i,j+1] - u[i,j-1])/(2*dx) + 
                                          v[i,j] * (u[i+1,j] - u[i-1,j])/(2*dy))
            v_pred[i,j] = v[i,j] - dt * (u[i,j] * (v[i,j+1] - v[i,j-1])/(2*dx) + 
                                          v[i,j] * (v[i+1,j] - v[i-1,j])/(2*dy))
    
    # Corrector step
    for i in range(1, ny-1):
        for j in range(1, nx-1):
            u[i,j] = 0.5 * (u[i,j] + u_pred[i,j] - 
                             dt * (u_pred[i,j] * (u_pred[i,j+1] - u_pred[i,j-1])/(2*dx) + 
                                   v_pred[i,j] * (u_pred[i+1,j] - u_pred[i-1,j])/(2*dy)))
            v[i,j] = 0.5 * (v[i,j] + v_pred[i,j] - 
                             dt * (u_pred[i,j] * (v_pred[i,j+1] - v_pred[i,j-1])/(2*dx) + 
                                   v_pred[i,j] * (v_pred[i+1,j] - v_pred[i-1,j])/(2*dy)))
    
    # Enforce boundary conditions
    u[0,:] = u[-1,:] = u[:,0] = u[:,-1] = 1
    v[0,:] = v[-1,:] = v[:,0] = v[:,-1] = 1

# Save final solutions
np.save('u.npy', u)
np.save('v.npy', v)
```