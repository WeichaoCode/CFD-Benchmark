#!/usr/bin/env python3
import numpy as np

# Parameters
nx = 81
ny = 81
lx = 2.0
ly = 2.0
dx = lx / (nx - 1)
dy = ly / (ny - 1)
nu = 0.01
t_final = 0.027

# Time-stepping parameters
dt = 0.0005
nt = int(t_final / dt)

# Create grid
x = np.linspace(0, lx, nx)
y = np.linspace(0, ly, ny)
X, Y = np.meshgrid(x, y)

# Initialize u and v
u = np.ones((ny, nx))
v = np.ones((ny, nx))

# Apply initial condition for region 0.5 <= x,y <= 1
u[np.logical_and(X >= 0.5, X <= 1) & np.logical_and(Y >= 0.5, Y <= 1)] = 2.0
v[np.logical_and(X >= 0.5, X <= 1) & np.logical_and(Y >= 0.5, Y <= 1)] = 2.0

# Enforce Dirichlet BC on boundaries
u[0, :] = 1.0
u[-1, :] = 1.0
u[:, 0] = 1.0
u[:, -1] = 1.0
v[0, :] = 1.0
v[-1, :] = 1.0
v[:, 0] = 1.0
v[:, -1] = 1.0

# Time stepping
for n in range(nt):
    un = u.copy()
    vn = v.copy()
    
    # Compute interior points update using central differences for diffusion and convection
    # u equation update
    u[1:-1, 1:-1] = (un[1:-1, 1:-1] -
                      dt * (un[1:-1, 1:-1] * (un[1:-1, 2:] - un[1:-1, 0:-2]) / (2 * dx) +
                            vn[1:-1, 1:-1] * (un[2:, 1:-1] - un[0:-2, 1:-1]) / (2 * dy)) +
                      nu * dt * ((un[1:-1, 2:] - 2 * un[1:-1, 1:-1] + un[1:-1, 0:-2]) / dx**2 +
                                 (un[2:, 1:-1] - 2 * un[1:-1, 1:-1] + un[0:-2, 1:-1]) / dy**2))
    
    # v equation update
    v[1:-1, 1:-1] = (vn[1:-1, 1:-1] -
                      dt * (un[1:-1, 1:-1] * (vn[1:-1, 2:] - vn[1:-1, 0:-2]) / (2 * dx) +
                            vn[1:-1, 1:-1] * (vn[2:, 1:-1] - vn[0:-2, 1:-1]) / (2 * dy)) +
                      nu * dt * ((vn[1:-1, 2:] - 2 * vn[1:-1, 1:-1] + vn[1:-1, 0:-2]) / dx**2 +
                                 (vn[2:, 1:-1] - 2 * vn[1:-1, 1:-1] + vn[0:-2, 1:-1]) / dy**2))
    
    # Re-apply Dirichlet BCs
    u[0, :] = 1.0
    u[-1, :] = 1.0
    u[:, 0] = 1.0
    u[:, -1] = 1.0

    v[0, :] = 1.0
    v[-1, :] = 1.0
    v[:, 0] = 1.0
    v[:, -1] = 1.0

# Save final solutions as numpy arrays (2D arrays as specified)
np.save('u.npy', u)
np.save('v.npy', v)