```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
nx, ny = 31, 31
lx, ly = 2.0, 1.0
dx, dy = lx / (nx - 1), ly / (ny - 1)
tolerance = 1e-6
max_iterations = 10000

# Grid
x = np.linspace(0, lx, nx)
y = np.linspace(0, ly, ny)

# Initialize potential field
p = np.zeros((ny, nx))

# Apply Dirichlet boundary conditions
p[:, 0] = 0.0        # Left boundary (x=0)
p[:, -1] = y         # Right boundary (x=2)

# Iterative solver (Jacobi)
for iteration in range(max_iterations):
    p_new = p.copy()
    
    # Update interior points
    p_new[1:-1, 1:-1] = ((dy**2 * (p[1:-1, 2:] + p[1:-1, 0:-2]) +
                            dx**2 * (p[2:, 1:-1] + p[0:-2, 1:-1])) /
                           (2 * (dx**2 + dy**2)))
    
    # Apply Neumann boundary conditions (top and bottom)
    p_new[0, 1:-1] = p_new[1, 1:-1]      # Top boundary (y=0)
    p_new[-1, 1:-1] = p_new[-2, 1:-1]    # Bottom boundary (y=1)
    
    # Apply Dirichlet boundary conditions
    p_new[:, 0] = 0.0                    # Left boundary (x=0)
    p_new[:, -1] = y                      # Right boundary (x=2)
    
    # Check for convergence
    delta = np.max(np.abs(p_new - p))
    if delta < tolerance:
        break
    p = p_new

# Save the final solution
save_values = ['p']
np.save('p.npy', p)

# Visualization
X, Y = np.meshgrid(x, y)
plt.contourf(X, Y, p, 50, cmap='viridis')
plt.colorbar(label='Potential p')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Potential Contour')
plt.show()
```