```python
import numpy as np
from scipy.linalg import solve_banded
import matplotlib.pyplot as plt

# Parameters
alpha = 1.0
Q0 = 200.0
sigma = 0.1
x_min, x_max = -1.0, 1.0
y_min, y_max = -1.0, 1.0
nx, ny = 41, 41
dx = (x_max - x_min) / (nx - 1)
dy = dx
r = 1.0
dt = r * dx**2 / alpha
t_max = 3.0
nt = int(t_max / dt) + 1

# Grid
x = np.linspace(x_min, x_max, nx)
y = np.linspace(y_min, y_max, ny)
X, Y = np.meshgrid(x, y, indexing='ij')

# Initial condition
T = 1.0 + Q0 * np.exp(- (X**2 + Y**2) / (2 * sigma**2))

# Source term
q = Q0 * np.exp(- (X**2 + Y**2) / (2 * sigma**2))

# ADI coefficients
rx = alpha * dt / (2 * dx**2)
ry = alpha * dt / (2 * dy**2)

# Tridiagonal matrix for x-direction
ab_x = np.zeros((3, nx-2))
ab_x[0, 1:] = -rx
ab_x[1, :] = 1 + 2 * rx
ab_x[2, :-1] = -rx

# Tridiagonal matrix for y-direction
ab_y = np.zeros((3, ny-2))
ab_y[0, 1:] = -ry
ab_y[1, :] = 1 + 2 * ry
ab_y[2, :-1] = -ry

for n in range(nt):
    # Intermediate step: implicit in x, explicit in y
    T_star = np.copy(T)
    for i in range(1, nx-1):
        b = rx * T[i+1,1:-1] + (1 - 2 * rx) * T[i,1:-1] + rx * T[i-1,1:-1] + ry * (T[i,2:] - 2 * T[i,1:-1] + T[i,0:-2]) * 0.5 * dt + 0.5 * dt * q[i,1:-1]
        T_star[i,1:-1] = solve_banded((1,1), ab_x, b)
    # Apply boundary conditions
    T_star[0, :] = 1.0
    T_star[-1, :] = 1.0
    T_star[:,0] = 1.0
    T_star[:,-1] = 1.0

    # Final step: implicit in y, explicit in x
    T_new = np.copy(T_star)
    for j in range(1, ny-1):
        b = ry * T_star[1:-1,j+1] + (1 - 2 * ry) * T_star[1:-1,j] + ry * T_star[1:-1,j-1] + rx * (T_star[2:,j] - 2 * T_star[1:-1,j] + T_star[0:-2,j]) * 0.5 * dt + 0.5 * dt * q[1:-1,j]
        T_new[1:-1,j] = solve_banded((1,1), ab_y, b)
    # Apply boundary conditions
    T_new[0, :] = 1.0
    T_new[-1, :] = 1.0
    T_new[:,0] = 1.0
    T_new[:,-1] = 1.0

    T = T_new

# Save the final temperature distribution
np.save('T.npy', T)

# Visualization
plt.figure(figsize=(8,6))
cp = plt.contourf(X, Y, T, levels=50, cmap='hot')
plt.colorbar(cp)
plt.xlabel('x')
plt.ylabel('y')
plt.title('Temperature Distribution at t = {:.2f} s'.format(t_max))
plt.show()
```