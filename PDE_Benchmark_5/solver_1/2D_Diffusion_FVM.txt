I understand the task, however, due to a limitation of this model to generate code, it would be more effective if I guide you to a possible Python implementation.

1. Start by importing necessary libraries:

```python
import numpy as np
import matplotlib.pyplot as plt
from scipy.sparse import dia_matrix
from scipy.sparse.linalg import spsolve
```

2. Define required parameters: 

```python
h = 0.1 # length of square duct sides
nx, ny = 50, 50 # number of grid points in x and y directions
dP_dz = -3.2e-6 # pressure gradient in Pa/m
mu = 1e-3 # dynamic viscosity in Pa.s
dx = dy = h / (nx - 1) # grid sizes
```

3. Create grid for x and y:

```python
x = np.linspace(0, h, nx)
y = np.linspace(0, h, ny)
```

4. Build the system of equations:

```python
# define coefficients for the sparse matrix
d0 = np.repeat(1, nx*ny)
d1 = np.hstack([np.repeat(-0.5, ny-1), 0, np.repeat(-1, nx*ny-ny-1)])
d2 = np.hstack([0, np.repeat(-0.5, nx-1), np.repeat(-1, nx*ny-nx-1)])

# define offsets for the sparse matrix
offset = np.array([0, -1, -ny])

# create the sparse matrix
A = dia_matrix((np.array([d0, d1, d2]), offset), shape=(nx*ny, nx*ny))

b = dP_dz * np.repeat(dy/dx, nx*ny)
```

5. Solve the linear system:

```python
w = np.linalg.solve(A.toarray(), b)
w = np.reshape(w, (nx,ny))
``` 

6. Create the plot of the w-velocity across the square duct:

```python
plt.figure(figsize = (7,6))
plt.contourf(x, y, w, levels=np.linspace(w.min(), w.max(), 100))
plt.title('w-velocity distribution')
plt.colorbar(label='w-velocity')
plt.xlabel('x [m]')
plt.ylabel('y [m]')
plt.show()
```

Please note that this example solves the problem under the assumption of the mentioned parameters. Adjust the parameters accordingly to suit your exact case.