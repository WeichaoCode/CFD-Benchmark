#!/usr/bin/env python3
import numpy as np

# Domain and discretization parameters
N = 201            # number of grid points
y_start = 0.0
y_end = 2.0
y = np.linspace(y_start, y_end, N)
dy = y[1] - y[0]

# Given parameters
Re_tau = 395.0
mu = 1.0 / Re_tau      # molecular viscosity
kappa = 0.42
A = 25.4

# Compute effective viscosity using the Cess turbulence model.
# Standard Cess model gives the turbulent viscosity ratio; effective viscosity is:
#   mu_eff = mu + mu_t = mu * (1 + 0.5*(sqrt(1 + F) - 1))   where:
#   F = (1/9)*kappa^2 * Re_tau^2 * (2y - y^2)^2 * (3 - 4y + 2y^2)^2 * [1 - exp(-y^+/A)]^2,
#   with y^+ = y * Re_tau.
y_plus = y * Re_tau
F = (1.0/9.0) * kappa**2 * Re_tau**2 * (2*y - y**2)**2 * (3 - 4*y + 2*y**2)**2 * (1 - np.exp(-y_plus/A))**2
mu_eff = mu * (1.0 + 0.5*(np.sqrt(1.0 + F) - 1.0))

# Assemble the finite difference matrix from discretization of:
# d/dy ( mu_eff(y) du/dy ) = -1,  with u(0)=0 and u(2)=0.
# We use a staggered evaluation of mu_eff at half nodes.
mu_half = 0.5 * (mu_eff[:-1] + mu_eff[1:])

# Build the coefficient matrix A and RHS vector b for interior nodes (1 to N-2)
N_interior = N - 2
A_matrix = np.zeros((N_interior, N_interior))
b_vector = -np.ones(N_interior) * dy**2  # multiplied by dy^2

for i in range(N_interior):
    # Global index = i+1
    # Coefficient corresponding to u[i] at global index i+1
    # Left neighbor coefficient: mu_half[i] (for i+1-1/2)
    if i > 0:
        A_matrix[i, i-1] = mu_half[i]  # index i corresponds to global node i+1 so left half node index = i
    # Diagonal coefficient: - (mu_half[i] + mu_half[i+1])
    A_matrix[i, i] = - (mu_half[i] + mu_half[i+1])
    # Right neighbor coefficient:
    if i < N_interior - 1:
        A_matrix[i, i+1] = mu_half[i+1]

# Solve the linear system for interior velocities
u_interior = np.linalg.solve(A_matrix, b_vector)

# Assemble full solution with Dirichlet boundary conditions: u(0)=0, u(2)=0.
u = np.zeros(N)
u[1:-1] = u_interior

# The other variables remain at their initial condition values:
mu_t = np.zeros(N)         # zero eddy viscosity
k = np.full(N, 0.01)         # turbulent kinetic energy
epsilon = np.full(N, 0.001)  # dissipation rate
omega = np.full(N, 1.0)      # specific dissipation rate
nu_SA = np.full(N, 1.0/Re_tau)  # Spalart-Allmaras working variable

# Save the final solution for each variable into .npy files
np.save("u.npy", u)
np.save("mu_t.npy", mu_t)
np.save("k.npy", k)
np.save("epsilon.npy", epsilon)
np.save("omega.npy", omega)
np.save("nu_SA.npy", nu_SA)