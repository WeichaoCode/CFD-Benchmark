```python
import numpy as np

# Parameters
L = 2.0  # Length of domain
nx = 200  # Number of spatial points
nt = 1000  # Number of time steps
dx = L / (nx-1)
nu = 0.3  # Diffusion coefficient
dt = 0.0333/nt  # Time step size

# Initialize grid
x = np.linspace(0, L, nx)
u = np.ones(nx)  # Initialize with u=1 everywhere

# Set initial condition
u[(x >= 0.5) & (x <= 1.0)] = 2.0

# Time stepping
for n in range(nt):
    un = u.copy()
    
    # Interior points
    u[1:-1] = un[1:-1] + nu*dt/(dx*dx)*(un[2:] - 2*un[1:-1] + un[:-2])
    
    # Neumann boundary conditions
    u[0] = u[1]  
    u[-1] = u[-2]

# Save final solution
np.save('u', u)
```