```python
import numpy as np

# Parameters
nx, ny = 51, 51
nt = 500
dx = dy = 2 / 50
dt = 0.001
rho = 1.0
nu = 0.1

# Initialize arrays
u = np.zeros((ny, nx))
v = np.zeros((ny, nx))
p = np.zeros((ny, nx))

# Boundary conditions
u[-1, :] = 1  # Top lid moving at u=1

# Finite difference solver
def solve_navier_stokes():
    global u, v, p
    
    for _ in range(nt):
        # Store old values
        un = u.copy()
        vn = v.copy()
        pn = p.copy()
        
        # Compute derivatives
        du_dx = np.zeros_like(u)
        du_dy = np.zeros_like(u)
        dv_dx = np.zeros_like(v)
        dv_dy = np.zeros_like(v)
        d2u_dx2 = np.zeros_like(u)
        d2u_dy2 = np.zeros_like(u)
        d2v_dx2 = np.zeros_like(v)
        d2v_dy2 = np.zeros_like(v)
        
        # Central difference for interior points
        for i in range(1, ny-1):
            for j in range(1, nx-1):
                du_dx[i,j] = (un[i,j+1] - un[i,j-1]) / (2*dx)
                du_dy[i,j] = (un[i+1,j] - un[i-1,j]) / (2*dy)
                dv_dx[i,j] = (vn[i,j+1] - vn[i,j-1]) / (2*dx)
                dv_dy[i,j] = (vn[i+1,j] - vn[i-1,j]) / (2*dy)
                
                d2u_dx2[i,j] = (un[i,j+1] - 2*un[i,j] + un[i,j-1]) / (dx**2)
                d2u_dy2[i,j] = (un[i+1,j] - 2*un[i,j] + un[i-1,j]) / (dy**2)
                d2v_dx2[i,j] = (vn[i,j+1] - 2*vn[i,j] + vn[i,j-1]) / (dx**2)
                d2v_dy2[i,j] = (vn[i+1,j] - 2*vn[i,j] + vn[i-1,j]) / (dy**2)
        
        # Momentum equations
        u[1:-1, 1:-1] = (un[1:-1, 1:-1] 
                         - un[1:-1, 1:-1] * du_dx[1:-1, 1:-1] * dt
                         - vn[1:-1, 1:-1] * du_dy[1:-1, 1:-1] * dt
                         + nu * (d2u_dx2[1:-1, 1:-1] + d2u_dy2[1:-1, 1:-1]) * dt)
        
        v[1:-1, 1:-1] = (vn[1:-1, 1:-1] 
                         - un[1:-1, 1:-1] * dv_dx[1:-1, 1:-1] * dt
                         - vn[1:-1, 1:-1] * dv_dy[1:-1, 1:-1] * dt
                         + nu * (d2v_dx2[1:-1, 1:-1] + d2v_dy2[1:-1, 1:-1]) * dt)
        
        # Pressure Poisson equation
        for i in range(1, ny-1):
            for j in range(1, nx-1):
                p[i,j] = (((du_dx[i,j]**2 + 
                           2*du_dy[i,j]*dv_dx[i,j] + 
                           dv_dy[i,j]**2) / dt))
        
        # Boundary conditions
        u[0, :] = 0  # Bottom wall
        u[:, 0] = 0  # Left wall
        u[:, -1] = 0  # Right wall
        u[-1, :] = 1  # Top lid
        
        v[0, :] = 0  # Bottom wall
        v[:, 0] = 0  # Left wall
        v[:, -1] = 0  # Right wall
        v[-1, :] = 0  # Top lid
    
    return u, v, p

# Solve and save results
u, v, p = solve_navier_stokes()

# Save final solutions
np.save('u.npy', u)
np.save('v.npy', v)
np.save('p.npy', p)
```