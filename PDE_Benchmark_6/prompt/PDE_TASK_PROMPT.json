{
    "1D_Burgers_Equation": "You are given the **one-dimensional Burgers' equation**, a fundamental PDE that models **nonlinear convection** and **diffusion**:\n\n\\[\n\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} = \\nu \\frac{\\partial^2 u}{\\partial x^2}\n\\]\n\nwhere:\n- \\( u(x,t) \\) is the velocity field,\n- \\( \\nu \\) is the viscosity coefficient,\n- \\( x \\) is the spatial coordinate,\n- \\( t \\) is time.\nvariable declarations: \n- number of grid points in x: nx = 101\n- number of time steps: nt = 100\n- dx = 2 * numpy.pi / (nx - 1)\n- viscosity coefficient: nu = .07\n- dt = dx * nu\n\n### **Task:**\n1. **Numerically solve Burgers' equation** over a given spatial and temporal domain.\n2. Apply **periodic boundary conditions**:\n   \\[\n   u(0) = u(2\\pi)\n   \\]\n3. Use the following **initial condition**:\n   \\[\n   u = -\\frac{2\\nu}{\\phi} \\frac{\\partial \\phi}{\\partial x} + 4\n   \\]\n   where:\n   \\[\n   \\phi = \\exp{\\left(\\frac{-x^2}{4\\nu}\\right)} + \\exp{\\left(\\frac{-(x - 2\\pi)^2}{4\\nu}\\right)}\n   \\]\n4. Compare the numerical solution to the **analytical solution** given by:\n   \\[\n   u = -\\frac{2\\nu}{\\phi} \\frac{\\partial \\phi}{\\partial x} + 4\n   \\]\n   where:\n   \\[\n   \\phi = \\exp{\\left(\\frac{-(x - 4t)^2}{4\\nu(t + 1)}\\right)} + \\exp{\\left(\\frac{-(x - 4t - 2\\pi)^2}{4\\nu(t + 1)}\\right)}\n   \\]\n\n### **Requirements:**\n- Use an appropriate **finite difference scheme** for the numerical solution.\n- Ensure **stability and accuracy** of the scheme.\n- Output the numerical solution in a format that allows easy comparison with the analytical solution.\n- Save the velocity field at last time step in a .npy file.\n\n**Return only the Python code that implements this solution.**\n",
    "1D_Diffusion": "You are given the **one-dimensional diffusion equation**, a fundamental PDE that models **diffusive transport**:\n\n\\[\n\\frac{\\partial u}{\\partial t} = \\nu \\frac{\\partial^2 u}{\\partial x^2}\n\\]\n\nwhere:\n- \\( u(x,t) \\) represents the quantity being diffused (e.g., temperature, concentration),\n- \\( \\nu \\) is the diffusion coefficient,\n- \\( x \\) is the spatial coordinate,\n- \\( t \\) is time.\n\n### **Variable Declarations:**\n- Number of grid points in x: `nx = 41`\n- Number of time steps: `nt = 20`\n- Grid spacing: `dx = 2 / (nx - 1)`\n- Diffusion coefficient: `nu = 0.3`\n- sigma = 0.2\n- Time step: `dt = sigma * dx**2 / nu`\n\n### **Task:**\n1. **Numerically solve the diffusion equation** over a given spatial and temporal domain.\n2. Apply **Dirichlet boundary conditions**:\n   \\[\n   u(0) = 1, \\quad u(1) = 0\n   \\]\n3. Use the following **initial condition**:\n   - At \\( t = 0 \\), let \\( u(x, 0) = 2 \\) for \\( 0.5 \\leq x \\leq 1 \\), and \\( u = 1 \\) elsewhere.\n4. **Visualize the solution**:\n   - Generate plots showing how the field \\( u(x, t) \\) evolves over time.\n   - Show the final solution at \\( t = T \\).\n\n### **Requirements:**\n- Use an appropriate **finite difference scheme** for the numerical solution.\n- Ensure **stability and accuracy** by choosing an appropriate time step.\n- Save the computed solution in a `.npy` file.\n\n**Return only the Python code that implements this solution.**\n"
}