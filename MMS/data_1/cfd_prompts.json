{
    "prompts": [
        {
            "key": 1,
            "name": "1D Linear Convection",
            "prompt": "Simulate the problem: 1D Linear Convection. Key: 1. Equation: \\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} - \\pi c e^{-t} \\cos(\\pi x) + e^{-t} \\sin(\\pi x) = 0. Physical properties: Wave speed c = 1. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Instructions: Formulate a numerical scheme to solve the given PDE that ensures stability, consistency, and convergence. Select the most appropriate finite difference method (e.g., First Order Upwind, Lax-Wendroff, Crank-Nicolson, etc.) based on the nature of the PDE and the stability requirements. Justify the choice of numerical scheme by considering the CFL condition, von Neumann stability analysis, or other relevant stability criteria. Ensure the solution remains stable under the chosen discretization parameters (e.g., time step size and spatial resolution). Use only Python\u2019s standard library (no external packages).Plot the solution at key time steps: t = 0, t = T/4, t = T/2, t = T and display all plots in the same figure.The figure title should be: 'equation name - numerical method'. Provide only the Python code without additional explanations.."
        },
        {
            "key": 2,
            "name": "1D Nonlinear Convection",
            "prompt": "Simulate the problem: 1D Nonlinear Convection. Key: 2. Equation: \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x) = 0\n. Physical properties: Wave speed c = 1. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Instructions: Formulate a numerical scheme to solve the given PDE that ensures stability, consistency, and convergence. Select the most appropriate finite difference method (e.g., First Order Upwind, Lax-Wendroff, Crank-Nicolson, etc.) based on the nature of the PDE and the stability requirements. Justify the choice of numerical scheme by considering the CFL condition, von Neumann stability analysis, or other relevant stability criteria. Ensure the solution remains stable under the chosen discretization parameters (e.g., time step size and spatial resolution). Use only Python\u2019s standard library (no external packages).Plot the solution at key time steps: t = 0, t = T/4, t = T/2, t = T and display all plots in the same figure.The figure title should be: 'equation name - numerical method'. Provide only the Python code without additional explanations.."
        },
        {
            "key": 3,
            "name": "1D Diffusion equation",
            "prompt": "Simulate the problem: 1D Diffusion equation. Key: 3. Equation: \frac{\\partial u}{\\partial t} - \\nu \\frac{\\partial^2 u}{\\partial x^2} - \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) = 0\n. Physical properties: Wave speed c = 1. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Instructions: Formulate a numerical scheme to solve the given PDE that ensures stability, consistency, and convergence. Select the most appropriate finite difference method (e.g., First Order Upwind, Lax-Wendroff, Crank-Nicolson, etc.) based on the nature of the PDE and the stability requirements. Justify the choice of numerical scheme by considering the CFL condition, von Neumann stability analysis, or other relevant stability criteria. Ensure the solution remains stable under the chosen discretization parameters (e.g., time step size and spatial resolution). Use only Python\u2019s standard library (no external packages).Plot the solution at key time steps: t = 0, t = T/4, t = T/2, t = T and display all plots in the same figure.The figure title should be: 'equation name - numerical method'. Provide only the Python code without additional explanations.."
        },
        {
            "key": 4,
            "name": "1D Burgers' equation",
            "prompt": "Simulate the problem: 1D Burgers' equation. Key: 4. Equation: \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} - \\nu \\frac{\\partial^2 u}{\\partial x^2} \n- \\pi^2 \\nu e^{-t} \\sin(\\pi x) + e^{-t} \\sin(\\pi x) - \\pi e^{-2t} \\sin(\\pi x) \\cos(\\pi x)\n. Physical properties: Wave speed c = 1. Boundary conditions: u = 0 at x = 0, 2. Initial conditions: u = \\sin(\\pi x). Spatial domain: x: [0, 2]. Temporal domain: T: [0, 2]. Instructions: Formulate a numerical scheme to solve the given PDE that ensures stability, consistency, and convergence. Select the most appropriate finite difference method (e.g., First Order Upwind, Lax-Wendroff, Crank-Nicolson, etc.) based on the nature of the PDE and the stability requirements. Justify the choice of numerical scheme by considering the CFL condition, von Neumann stability analysis, or other relevant stability criteria. Ensure the solution remains stable under the chosen discretization parameters (e.g., time step size and spatial resolution). Use only Python\u2019s standard library (no external packages).Plot the solution at key time steps: t = 0, t = T/4, t = T/2, t = T and display all plots in the same figure.The figure title should be: 'equation name - numerical method'. Provide only the Python code without additional explanations.."
        }
    ]
}