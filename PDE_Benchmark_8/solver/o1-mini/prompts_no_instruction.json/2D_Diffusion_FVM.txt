```python
import numpy as np

# Parameters
mu = 1e-3  # Dynamic viscosity (PaÂ·s)
dPdz = -3.2  # Pressure gradient (Pa/m)
b = dPdz / mu  # Source term

# Domain
h = 0.1  # meters
nx = ny = 80
dx = dy = h / (nx - 1)

# Initialize w
w = np.zeros((ny, nx))

# Iterative solver parameters
tolerance = 1e-6
max_iterations = 10000
converged = False

# Precompute coefficients
dx2 = dx * dx
dy2 = dy * dy
denominator = 2 * (1/dx2 + 1/dy2)

for iteration in range(max_iterations):
    w_old = w.copy()
    # Update interior points
    w[1:-1,1:-1] = ((w[1:-1,2:] + w[1:-1,0:-2]) / dx2 +
                    (w[2:,1:-1] + w[0:-2,1:-1]) / dy2 +
                    b) / denominator
    # Apply boundary conditions (w=0 on all boundaries)
    w[0, :] = 0
    w[-1, :] = 0
    w[:, 0] = 0
    w[:, -1] = 0
    # Check for convergence
    diff = np.max(np.abs(w - w_old))
    if diff < tolerance:
        converged = True
        break

# Save the final solution
np.save('w.npy', w)
```