These error messages indicate there is a mismatch between the array shapes in the calculation and it is caused by improper indexing that resulted in 'un' and 'vn' arrays having mismatching sizes. Here's an example corrected Python code:

```python
import numpy as np
import matplotlib.pyplot as plt

# Simulation parameters
L = 1.0   # length of square domain
nx = 100  # number of grid points in x-direction
ny = 100  # number of grid points in y-direction
nt = 500  # number of time steps
Re = 100  # Reynolds number
dt = 0.001  # time step size

# Grid spacing
dx = L / (nx - 1)
dy = L / (ny - 1)

# Initialize velocity and pressure fields
u = np.zeros((ny, nx))
v = np.zeros((ny, nx))
p = np.zeros((ny, nx))

# Time integration using an explicit method
for n in range(nt):
    un = u.copy()
    vn = v.copy()
    pn = p.copy()
    
    un[1:-1, 1:-1] -= dt * un[1:-1, 1:-1] * (un[1:-1, 1:-1] - un[:-2, 1:-1])/dx - dt * vn[1:-1, 1:-1]*(un[1:-1, 1:-1] - un[1:-1, :-2])/dy - dt*(p[2:, 1:-1] - p[:-2, 1:-1])/(2*dy) + dt/Re*(un[2:, 1:-1] - 2*un[1:-1, 1:-1] + un[:-2, 1:-1])/dx**2 + dt/Re*(un[1:-1, 2:] - 2*un[1:-1, 1:-1] + un[1:-1, :-2])/dy**2
    vn[1:-1, 1:-1] -= dt * un[1:-1, 1:-1] * (vn[1:-1, 1:-1] - vn[:-2, 1:-1])/dx - dt * vn[1:-1, 1:-1]*(vn[1:-1, 1:-1] - vn[1:-1, :-2])/dy - dt*(p[2:, 1:-1] - p[:-2, 1:-1])/(2*dy) + dt/Re*(vn[2:, 1:-1] - 2*vn[1:-1, 1:-1] + vn[:-2, 1:-1])/dx**2 + dt/Re*(vn[1:-1, 2:] - 2*vn[1:-1, 1:-1] + vn[1:-1, :-2])/dy**2
    
    # Boundary conditions
    u[0, :] = 0
    u[-1, :] = 1  # Lid velocity
    u[:, 0] = 0
    u[:, -1] = 0
    
    v[0, :] = 0
    v[-1, :] = 0
    v[:, 0] = 0
    v[:, -1] = 0

    # Pressure correction
    for i in range(50):
        pn = p.copy()
        p[1:-1, 1:-1] = ((pn[2:, 1:-1] + pn[:-2, 1:-1])*dy**2 + (pn[1:-1, 2:] + pn[1:-1, :-2])*dx**2)/(2*(dx**2 + dy**2)) - dx**2*dy**2/(2*(dx**2 + dy**2))*(u[2:, 1:-1] - u[:-2, 1:-1])/(2*dx) - (v[1:-1, 2:] - v[1:-1, :-2])/(2*dy)

    # Residual check
    if np.sum(np.abs(u - un)) + np.sum(np.abs(v - vn)) < 1e-6:
        break

# Plotting and visualization
X, Y = np.meshgrid(np.linspace(0, L, nx), np.linspace(0, L, ny))

plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.contourf(X, Y, p, cmap='viridis')
plt.title('Pressure Contours')

plt.subplot(1, 2, 2)
plt.quiver(X[::2, ::2], Y[::2, ::2], u[::2, ::2], v[::2, ::2])
plt.title('Velocity Vectors')

plt.tight_layout()
plt.show()
```
This provided Python script will solve the 2D Navier-Stokes equations for a lid-driven cavity using finite difference method. It includes the initialization of simulation parameters, discretization of the equations and the integration in time using the explicit method. The script outputs a quiver plot of velocity vectors and a contour plot of pressure field. It checks the L2 norm of the change in the fields 'u' and 'v' in each time-step for convergence.