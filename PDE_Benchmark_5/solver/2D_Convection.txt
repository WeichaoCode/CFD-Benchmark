Here's a script following your requested implementation steps. This script requires numpy and matplotlib libraries.

```python
import numpy as np
import matplotlib.pyplot as plt

# Step 1: Define parameters
Lx, Ly = 2, 2
T = 1.0
nx, ny, nt = 101, 101, 100
dx, dy = Lx/(nx-1), Ly/(ny-1)
dt = T/(nt-1)

# Ensure CFL stability
cfl = dt * np.max(np.array([1/dx, 1/dy]))
assert cfl < 1, f"CFL condition not met: {cfl} >= 1.0"

# Step 2: Discretize space and time
x = np.linspace(0, Lx, nx)
y = np.linspace(0, Ly, ny)
u = np.ones((ny, nx))  # Initialize u
v = np.ones((ny, nx))  # Initialize v

# Step 3: Apply Initial Condition
u[int(0.5/dy):int(1/dy + 1), int(0.5/dx):int(1/dx + 1)] = 2
v[int(0.5/dy):int(1/dy + 1), int(0.5/dx):int(1/dx + 1)] = 2

def solve(u, v, nt, dt, dx, dy):
    un = np.empty_like(u)
    vn = np.empty_like(v)

    for n in range(nt):
        un = u.copy()
        vn = v.copy()

        u[1:, 1:] = (un[1:, 1:] - 
                     un[1:, 1:] * dt / dx * (un[1:, 1:] - un[1:, :-1]) - 
                     vn[1:, 1:] * dt / dy * (un[1:, 1:] - un[:-1, 1:]))
        
        v[1:, 1:] = (vn[1:, 1:] -
                     un[1:, 1:] * dt / dx * (vn[1:, 1:] - vn[1:, :-1]) -
                     vn[1:, 1:] * dt / dy * (vn[1:, 1:] - vn[:-1, 1:]))

        # Step 4: Apply Boundary Conditions
        u[0, :] = 1
        u[-1, :] = 1
        u[:, 0] = 1
        u[:, -1] = 1

        v[0, :] = 1
        v[-1, :] = 1
        v[:, 0] = 1
        v[:, -1] = 1
        
    return u, v

# Step 5: Evolve the system
u, v = solve(u, v, nt, dt, dx, dy)

# Step 6: Visualize
X, Y = np.meshgrid(x, y)
fig = plt.figure(figsize=(7, 5))
plt.quiver(X[::3, ::3], Y[::3, ::3], u[::3, ::3], v[::3, ::3])
plt.xlabel('X')
plt.ylabel('Y')
plt.title('2D Convection: Velocity field at T = ' + str(T))
plt.show()
```
This program first checks for the CFL condition to ensure numerical stability, then it sets up the computational domain and then applies initial and boundary conditions. The governing equations are then solved using the finite difference method, and the results are visualized using a quiver plot. Please adjust the parameters and initial/boundary conditions to match your specific problem.