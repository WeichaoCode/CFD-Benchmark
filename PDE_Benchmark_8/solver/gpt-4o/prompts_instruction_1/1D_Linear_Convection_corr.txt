Below is the Python code to solve the given partial differential equation using the specified numerical method. The code uses the Predictor-Corrector method for time integration and central differences for spatial discretization. It handles both the undamped and damped cases and saves the final solution as a `.npy` file.

```python
import numpy as np

# Parameters
c = 1.0  # Convection speed
epsilon = 5e-4  # Damping factor
x_start, x_end = -5, 5
N_x = 101
dx = (x_end - x_start) / (N_x - 1)
x = np.linspace(x_start, x_end, N_x)

# Initial condition
u_initial = np.exp(-x**2)

# CFL condition for stability
CFL = 0.5
dt = CFL * dx / c

# Time integration parameters
t_final = 2.0  # Final time
n_steps = int(t_final / dt)

# Function to compute spatial derivatives
def compute_derivatives(u):
    # Central difference for first derivative
    du_dx = np.zeros_like(u)
    du_dx[1:-1] = (u[2:] - u[:-2]) / (2 * dx)
    du_dx[0] = (u[1] - u[-1]) / (2 * dx)  # Periodic BC
    du_dx[-1] = (u[0] - u[-2]) / (2 * dx)  # Periodic BC

    # Central difference for second derivative
    d2u_dx2 = np.zeros_like(u)
    d2u_dx2[1:-1] = (u[2:] - 2 * u[1:-1] + u[:-2]) / (dx**2)
    d2u_dx2[0] = (u[1] - 2 * u[0] + u[-1]) / (dx**2)  # Periodic BC
    d2u_dx2[-1] = (u[0] - 2 * u[-1] + u[-2]) / (dx**2)  # Periodic BC

    return du_dx, d2u_dx2

# Time integration using Predictor-Corrector method
u = u_initial.copy()
for n in range(n_steps):
    # Compute derivatives
    du_dx, d2u_dx2 = compute_derivatives(u)
    
    # Predictor step
    f_n = -c * du_dx + epsilon * d2u_dx2
    u_star = u + dt * f_n
    
    # Corrector step
    du_dx_star, d2u_dx2_star = compute_derivatives(u_star)
    f_star = -c * du_dx_star + epsilon * d2u_dx2_star
    u = u + (dt / 2) * (f_n + f_star)

# Save the final solution
np.save('final_solution.npy', u)
```

This code sets up the spatial grid, initializes the solution with the given initial condition, and iteratively updates the solution using the Predictor-Corrector method. The periodic boundary conditions are applied by wrapping the indices. The final solution is saved as a `.npy` file.