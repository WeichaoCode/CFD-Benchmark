```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
nx, ny = 51, 51
nt = 500
dx = 2 / (nx - 1)
dy = 2 / (ny - 1)
rho = 1
nu = 0.1
dt = 0.001

# Create grid
x = np.linspace(0, 2, nx)
y = np.linspace(0, 2, ny)
X, Y = np.meshgrid(x, y)

# Initialize velocity and pressure fields
u = np.zeros((ny, nx))
v = np.zeros((ny, nx))
p = np.zeros((ny, nx))
b = np.zeros((ny, nx))

# Function to build the RHS of the pressure Poisson equation
def build_up_b(u, v, rho, dt, dx, dy):
    b = np.zeros_like(u)
    b[1:-1,1:-1] = (rho * (1/dt * 
                    ((u[1:-1,2:] - u[1:-1,0:-2]) / (2*dx) + 
                     (v[2:,1:-1] - v[0:-2,1:-1]) / (2*dy)) -
                    ((u[1:-1,2:] - u[1:-1,0:-2]) / (2*dx))**2 -
                      2 * ((u[2:,1:-1] - u[0:-2,1:-1]) / (2*dy) *
                           (v[1:-1,2:] - v[1:-1,0:-2]) / (2*dx)) -
                    ((v[2:,1:-1] - v[0:-2,1:-1]) / (2*dy))**2))
    return b

# Pressure Poisson solver
def pressure_poisson(p, dx, dy, b, nit=50):
    pn = np.empty_like(p)
    for q in range(nit):
        pn = p.copy()
        p[1:-1,1:-1] = (((pn[1:-1,2:] + pn[1:-1,0:-2]) * dy**2 +
                         (pn[2:,1:-1] + pn[0:-2,1:-1]) * dx**2) /
                        (2 * (dx**2 + dy**2)) -
                        dx**2 * dy**2 / (2 * (dx**2 + dy**2)) * b[1:-1,1:-1])

        # Pressure boundary conditions
        p[:, -1] = p[:, -2]      # dp/dx = 0 at x = 2
        p[:, 0] = p[:,1]         # dp/dx = 0 at x = 0
        p[-1, :] = 0             # p = 0 at y = 2
        p[0, :] = p[1, :]        # dp/dy = 0 at y = 0
    return p

# Time-stepping loop
for n in range(nt):
    un = u.copy()
    vn = v.copy()

    # Build up the RHS of the pressure Poisson equation
    b = build_up_b(un, vn, rho, dt, dx, dy)

    # Solve pressure Poisson equation
    p = pressure_poisson(p, dx, dy, b)

    # Update velocity field
    u[1:-1,1:-1] = (un[1:-1,1:-1] -
                    un[1:-1,1:-1] * dt / dx * 
                   (un[1:-1,1:-1] - un[1:-1,0:-2]) -
                    vn[1:-1,1:-1] * dt / dy * 
                   (un[1:-1,1:-1] - un[0:-2,1:-1]) -
                    dt / (2 * rho * dx) * 
                   (p[1:-1,2:] - p[1:-1,0:-2]) +
                    nu * (dt / dx**2 * 
                   (un[1:-1,2:] - 2 * un[1:-1,1:-1] + un[1:-1,0:-2]) +
                   dt / dy**2 * 
                   (un[2:,1:-1] - 2 * un[1:-1,1:-1] + un[0:-2,1:-1])))

    v[1:-1,1:-1] = (vn[1:-1,1:-1] -
                    un[1:-1,1:-1] * dt / dx * 
                   (vn[1:-1,1:-1] - vn[1:-1,0:-2]) -
                    vn[1:-1,1:-1] * dt / dy * 
                   (vn[1:-1,1:-1] - vn[0:-2,1:-1]) -
                    dt / (2 * rho * dy) * 
                   (p[2:,1:-1] - p[0:-2,1:-1]) +
                    nu * (dt / dx**2 * 
                   (vn[1:-1,2:] - 2 * vn[1:-1,1:-1] + vn[1:-1,0:-2]) +
                   dt / dy**2 * 
                   (vn[2:,1:-1] - 2 * vn[1:-1,1:-1] + vn[0:-2,1:-1])))

    # Boundary conditions
    # Top lid
    u[-1, :] = 1
    v[-1, :] = 0

    # Bottom and side walls
    u[0, :] = 0
    u[:, 0] = 0
    u[:, -1] = 0

    v[0, :] = 0
    v[:, 0] = 0
    v[:, -1] = 0

# Visualization
plt.figure(figsize=(11,7), dpi=100)
plt.quiver(X, Y, u, v)
plt.title('Velocity Field')
plt.xlabel('X')
plt.ylabel('Y')
plt.savefig('velocity_field.png')
plt.close()

plt.figure(figsize=(11,7), dpi=100)
cp = plt.contourf(X, Y, p, alpha=0.5, cmap='jet')
plt.colorbar(cp)
plt.contour(X, Y, p, colors='k')
plt.title('Pressure Contour')
plt.xlabel('X')
plt.ylabel('Y')
plt.savefig('pressure_contour.png')
plt.close()

# Save the results
np.save('u_final.npy', u)
np.save('v_final.npy', v)
np.save('p_final.npy', p)
```