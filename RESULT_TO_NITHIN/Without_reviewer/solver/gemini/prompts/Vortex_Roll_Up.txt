```python
import numpy as np

def solve_cfd():
    # Parameters
    nx = 64
    ny = 64
    nt = 100
    nu = 0.001
    dt = 0.001
    dx = 1.0 / (nx - 1)
    dy = 1.0 / (ny - 1)

    # Initialize variables
    psi = np.zeros((ny, nx))
    omega = np.zeros((ny, nx))

    # Initial condition: vortex initialization
    center_x = 0.5
    center_y = 0.5
    radius = 0.1
    strength = 10.0

    for i in range(ny):
        for j in range(nx):
            x = j * dx
            y = i * dy
            r = np.sqrt((x - center_x)**2 + (y - center_y)**2)
            if r < radius:
                omega[i, j] = strength * np.exp(-r**2 / (2 * radius**2))

    # Time loop
    for n in range(nt):
        # Solve Poisson equation for streamfunction
        psi_old = psi.copy()
        for it in range(50):  # Iterate to convergence
            psi[1:-1, 1:-1] = 0.25 * (psi[1:-1, 0:-2] + psi[1:-1, 2:] +
                                     psi[0:-2, 1:-1] + psi[2:, 1:-1] +
                                     dx * dy * omega[1:-1, 1:-1])
            # Boundary conditions for psi
            psi[:, 0] = psi[:, -2]  # Periodic in x
            psi[:, -1] = psi[:, 1]  # Periodic in x
            psi[0, :] = 0  # Dirichlet in y
            psi[-1, :] = 0  # Dirichlet in y

            if np.max(np.abs(psi - psi_old)) < 1e-6:
                break
            psi_old = psi.copy()

        # Calculate velocities
        u = np.zeros((ny, nx))
        v = np.zeros((ny, nx))
        u[1:-1, 1:-1] = (psi[1:-1, 2:] - psi[1:-1, 0:-2]) / (2 * dx)
        v[1:-1, 1:-1] = -(psi[2:, 1:-1] - psi[0:-2, 1:-1]) / (2 * dy)

        # Solve vorticity transport equation
        omega_old = omega.copy()
        omega[1:-1, 1:-1] = (omega_old[1:-1, 1:-1] +
                             dt * (-u[1:-1, 1:-1] * (omega_old[1:-1, 2:] - omega_old[1:-1, 0:-2]) / (2 * dx)
                                  - v[1:-1, 1:-1] * (omega_old[2:, 1:-1] - omega_old[0:-2, 1:-1]) / (2 * dy)
                                  + nu * ((omega_old[1:-1, 2:] - 2 * omega_old[1:-1, 1:-1] + omega_old[1:-1, 0:-2]) / dx**2
                                          + (omega_old[2:, 1:-1] - 2 * omega_old[1:-1, 1:-1] + omega_old[0:-2, 1:-1]) / dy**2)))

        # Boundary conditions for omega
        omega[:, 0] = omega[:, -2]  # Periodic in x
        omega[:, -1] = omega[:, 1]  # Periodic in x
        omega[0, :] = omega[1, :] # Extrapolate from interior
        omega[-1, :] = omega[-2, :] # Extrapolate from interior

    # Save the final solutions
    np.save('psi.npy', psi)
    np.save('omega.npy', omega)

solve_cfd()
```