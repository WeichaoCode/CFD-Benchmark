#!/usr/bin/env python3
import numpy as np

# Physical parameters
u = 0.2                # velocity [m/s]
rho = 1.0              # density [kg/m^3]
Gamma = 0.001          # diffusion coefficient [kg/(m s)]
D = Gamma/rho          # diffusion coefficient for the equation

# Domain and initial condition parameters
L = 2.0                # Length of the domain [m]
T_end = 2.5            # Final time [s]
m = 0.5                # Gaussian center
s = 0.1                # Gaussian width

# Numerical parameters
N = 201                # Number of cells
dx = L / N             # Uniform cell width
x = np.linspace(0, L, N, endpoint=False)  # Cell centers

# Initial condition
phi = np.exp(-((x - m) / s) ** 2)

# Time step calculation based on CFL conditions for convection and diffusion stability
CFL_conv = 0.5
dt_conv = CFL_conv * dx / abs(u)
CFL_diff = 0.25
dt_diff = CFL_diff * dx**2 / D
dt = min(dt_conv, dt_diff)

# Time integration (explicit Euler)
t = 0.0
while t < T_end:
    # Adjust dt for the final time step to exactly hit T_end
    if t + dt > T_end:
        dt = T_end - t

    # Periodic shifts using np.roll for finite volume updates:
    # Upwind convection: since u > 0, use backward difference
    dphi_dx = (phi - np.roll(phi, 1)) / dx

    # Central difference for diffusion term
    d2phi_dx2 = (np.roll(phi, -1) - 2*phi + np.roll(phi, 1)) / dx**2

    # Update equation: dphi/dt = - u * dphi_dx + D * d2phi_dx2
    phi = phi + dt * (- u * dphi_dx + D * d2phi_dx2)
    t += dt

# Save the final solution for variable phi as a 1D NumPy array to a .npy file.
np.save("phi.npy", phi)