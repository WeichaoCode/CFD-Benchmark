Below is the Python code to solve the given partial differential equation using the MacCormack method. The code implements the specified numerical method, applies periodic boundary conditions, and saves the final solution at the last time step in a `.npy` file.

```python
import numpy as np

# Parameters
L = 2 * np.pi
nu = 0.5
dt = 0.01
dx = dt / nu
T = 500  # number of time steps

# Discretize the spatial domain
x = np.linspace(0, L, int(np.ceil(L / dx)), endpoint=False)
nx = len(x)

# Initial condition
u = np.sin(x) + 0.5 * np.sin(0.5 * x)

# MacCormack method
for n in range(T):
    # Predictor step
    u_star = np.empty_like(u)
    for j in range(nx):
        jp1 = (j + 1) % nx  # periodic boundary condition
        u_star[j] = u[j] - dt / dx * (0.5 * u[jp1]**2 - 0.5 * u[j]**2)
    
    # Corrector step
    u_new = np.empty_like(u)
    for j in range(nx):
        jm1 = (j - 1) % nx  # periodic boundary condition
        u_new[j] = 0.5 * (u[j] + u_star[j] - dt / dx * (0.5 * u_star[j]**2 - 0.5 * u_star[jm1]**2))
    
    # Update solution
    u = u_new

# Save the final solution
np.save('final_solution.npy', u)
```

### Explanation:
- **Parameters**: The spatial domain is discretized based on the given `dx = dt / nu`. The number of spatial points is determined by `np.ceil(L / dx)`.
- **Initial Condition**: The initial wave profile is set as `u(x, 0) = sin(x) + 0.5 * sin(0.5 * x)`.
- **MacCormack Method**: The predictor and corrector steps are implemented in a loop over `T` time steps. Periodic boundary conditions are applied using modulo operations.
- **Saving the Solution**: The final solution at the last time step is saved as a 1D NumPy array in a `.npy` file named `final_solution.npy`.

This code will compute the solution to the PDE and save the final state after 500 time steps.