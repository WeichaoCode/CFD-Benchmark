We'll start by importing the necessary modules:

```python
import numpy as np
import matplotlib.pyplot as plt
```

Then, let's define the necessary parameters, viscous terms and the number of grid points. They are set arbitrarily for now and might be adjusted for actual problem requirements.

```python
# Define Parameters
H = 1.0          # channel height
ny = 51          # number of grid points
mu = 0.01        # viscosity
mu_t = 0.001     # eddy viscosity

# Eddy viscosity profile
y = np.linspace(0, H, ny)  # y-coordinates
mu_t = mu_t * np.ones(ny)  # constant eddy viscosity profile
```
Now, we discretize the domain using finite difference approximations and assemble the coefficient matrix A and right-hand side vector b:

```python
# Discretization and System Assembly
dy = H / (ny - 1)       # grid size
A = np.zeros((ny, ny))  # coefficient matrix
b = np.ones(ny)         # right-hand side vector

# Assemble A using finite difference method
for i in range(1, ny - 1):
    A[i, i-1] = -(mu + mu_t[i]) / dy**2
    A[i, i]   =  2 * (mu + mu_t[i]) / dy**2
    A[i, i+1] = -(mu + mu_t[i]) / dy**2

# Boundary conditions (no-slip at y=0, y=H)
A[0, 0] = A[-1, -1] = 1.0
b[0] = b[-1] = 0.0
```
Now we solve the resulting linear system Au = -1 using a direct linear solver:

```python
# Solve the System
u = np.linalg.solve(A, b)
```
Finally, we visualize the velocity profile u(y):

```python
# Plot the Solution
plt.figure(figsize=(6, 8))
plt.plot(u, y, 'o-', label='FD Solution')
plt.xlabel('Velocity u')
plt.ylabel('Height y')
plt.title('Velocity Profile in Turbulent Channel Flow')
plt.legend()
plt.grid()
plt.show()
```

This simple code gives you a quick approximation of the velocity profile under specified conditions.