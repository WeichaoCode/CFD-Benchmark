```python
import numpy as np

# Parameters
nx, ny = 151, 151
dx, dy = 2 / (nx - 1), 2 / (ny - 1)
nt = 300
sigma = 0.2
dt = sigma * min(dx, dy) / 2

# Initialize velocity fields
u = np.ones((ny, nx))
v = np.ones((ny, nx))

# Create meshgrid
x = np.linspace(0, 2, nx)
y = np.linspace(0, 2, ny)
X, Y = np.meshgrid(x, y)

# Apply initial conditions
u[np.where((X >= 0.5) & (X <= 1) & (Y >= 0.5) & (Y <= 1))] = 2
v[np.where((X >= 0.5) & (X <= 1) & (Y >= 0.5) & (Y <= 1))] = 2

# Time-stepping
for _ in range(nt):
    un = u.copy()
    vn = v.copy()
    
    u[1:,1:] = un[1:,1:] - dt * (
        un[1:,1:] * (un[1:,1:] - un[:-1,1:]) / dx +
        vn[1:,1:] * (un[1:,1:] - un[1:,:-1]) / dy
    )
    
    v[1:,1:] = vn[1:,1:] - dt * (
        un[1:,1:] * (vn[1:,1:] - vn[:-1,1:]) / dx +
        vn[1:,1:] * (vn[1:,1:] - vn[1:,:-1]) / dy
    )
    
    # Apply Dirichlet boundary conditions
    u[0, :] = 1
    u[-1, :] = 1
    u[:, 0] = 1
    u[:, -1] = 1
    
    v[0, :] = 1
    v[-1, :] = 1
    v[:, 0] = 1
    v[:, -1] = 1

# Save the final velocity fields
np.save('u.npy', u)
np.save('v.npy', v)
```