Below is the Python code to solve the given 2D Laplace equation using the finite difference method with the specified boundary conditions. The code uses the Jacobi iterative method to update the potential field until convergence. The final solution is saved as a `.npy` file.

```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
nx, ny = 31, 31
dx = 2 / (nx - 1)
dy = 1 / (ny - 1)
tolerance = 1e-5

# Initialize the potential field
p = np.zeros((ny, nx))

# Boundary conditions
p[:, 0] = 0  # Left boundary
p[:, -1] = np.linspace(0, 1, ny)  # Right boundary

# Iterative solver using Jacobi method
def solve_laplace(p, dx, dy, tolerance):
    pn = np.empty_like(p)
    diff = tolerance + 1  # Initialize difference to enter the loop
    while diff > tolerance:
        pn[:] = p[:]
        # Update the potential field using the 5-point stencil
        p[1:-1, 1:-1] = ((dy**2 * (pn[1:-1, 2:] + pn[1:-1, :-2]) +
                          dx**2 * (pn[2:, 1:-1] + pn[:-2, 1:-1])) /
                         (2 * (dx**2 + dy**2)))
        
        # Neumann boundary conditions (top and bottom)
        p[0, :] = p[1, :]  # Top boundary
        p[-1, :] = p[-2, :]  # Bottom boundary
        
        # Reapply Dirichlet boundary conditions
        p[:, 0] = 0  # Left boundary
        p[:, -1] = np.linspace(0, 1, ny)  # Right boundary
        
        # Calculate the maximum difference for convergence check
        diff = np.max(np.abs(p - pn))
    
    return p

# Solve the PDE
p_final = solve_laplace(p, dx, dy, tolerance)

# Save the final solution to a .npy file
np.save('laplace_solution.npy', p_final)

# Plot the final solution
plt.figure(figsize=(8, 4))
plt.contourf(np.linspace(0, 2, nx), np.linspace(0, 1, ny), p_final, 20, cmap='viridis')
plt.colorbar(label='Potential')
plt.title('Laplace Equation Solution')
plt.xlabel('x')
plt.ylabel('y')
plt.show()
```

This code initializes the potential field `p` with zeros and applies the specified boundary conditions. It then iteratively updates the field using the Jacobi method until the solution converges to within the specified tolerance. The final solution is saved to a file named `laplace_solution.npy` and visualized using a contour plot.