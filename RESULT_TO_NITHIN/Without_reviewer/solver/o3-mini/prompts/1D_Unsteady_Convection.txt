#!/usr/bin/env python3
import numpy as np

# Parameters
u = 0.2                   # m/s
x_min = 0.0
x_max = 2.0
t_final = 2.5             # final time [s]
m = 0.5                   # center of Gaussian
s = 0.1                   # width of Gaussian

# Discretization parameters
Nx = 101                  # number of cells
dx = (x_max - x_min) / (Nx - 1)
x = np.linspace(x_min, x_max, Nx)

# CFL condition and time step
CFL = 0.5
dt = CFL * dx / abs(u)
Nt = int(t_final / dt) + 1

# Initial condition: Gaussian profile
phi = np.exp(-((x - m) / s)**2)

# Apply Dirichlet BC at boundaries
phi[0] = 0.0
phi[-1] = 0.0

# Time integration using an upwind finite volume scheme
for n in range(Nt):
    phi_old = phi.copy()
    # Update interior points; upwind scheme for u>0 uses phi_old[i] - phi_old[i-1]
    for i in range(1, Nx):
        phi[i] = phi_old[i] - u * dt/dx * (phi_old[i] - phi_old[i-1])
    # Reapply Dirichlet BC
    phi[0] = 0.0
    phi[-1] = 0.0

# Save the final solution as a 1D numpy array in the file "phi.npy"
np.save('phi.npy', phi)