```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
nx = ny = 31
dx = dy = 2.0 / (nx - 1)
nu = 1.0
sigma = 0.25
dt = sigma * dx * dy / nu
nt = 50

# Create grid
x = np.linspace(0, 2, nx)
y = np.linspace(0, 2, ny)
X, Y = np.meshgrid(x, y)

# Initialize u
u = np.ones((ny, nx))
u[np.where((X >= 0.5) & (X <= 1.0) & (Y >= 0.5) & (Y <= 1.0))] = 2.0

# Time-stepping
for _ in range(nt):
    u_new = u.copy()
    u_new[1:-1, 1:-1] = u[1:-1, 1:-1] + dt * nu * (
        (u[2:, 1:-1] - 2 * u[1:-1, 1:-1] + u[:-2, 1:-1]) / dx**2 +
        (u[1:-1, 2:] - 2 * u[1:-1, 1:-1] + u[1:-1, :-2]) / dy**2
    )
    # Apply Dirichlet boundary conditions
    u_new[0, :] = 1.0
    u_new[-1, :] = 1.0
    u_new[:, 0] = 1.0
    u_new[:, -1] = 1.0
    u = u_new

# Visualization
plt.contourf(X, Y, u, cmap='viridis')
plt.colorbar()
plt.title('Final u')
plt.xlabel('x')
plt.ylabel('y')
plt.show()

# Save the final solution
np.save('u.npy', u)
```