Below is the Python code to solve the given PDE problem using the Finite Difference Method. The code initializes the potential field, applies the boundary conditions, iteratively updates the field until convergence, and finally saves the solution to a `.npy` file. It also includes a visualization of the solution using contour plots.

```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
nx, ny = 31, 31
dx = 2 / (nx - 1)
dy = 1 / (ny - 1)
tolerance = 1e-5

# Initialize p with zeros
p = np.zeros((ny, nx))

# Iterative solver
def solve_poisson(p, dx, dy, tolerance):
    max_diff = tolerance + 1
    while max_diff > tolerance:
        p_old = p.copy()
        
        # Update interior points
        p[1:-1, 1:-1] = ((p_old[1:-1, 2:] + p_old[1:-1, :-2]) * dy**2 +
                         (p_old[2:, 1:-1] + p_old[:-2, 1:-1]) * dx**2) / (2 * (dx**2 + dy**2))
        
        # Apply boundary conditions
        p[:, 0] = 0  # Left boundary
        p[:, -1] = np.linspace(0, 1, ny)  # Right boundary
        p[0, :] = p[1, :]  # Bottom boundary (Neumann)
        p[-1, :] = p[-2, :]  # Top boundary (Neumann)
        
        # Calculate the maximum difference for convergence check
        max_diff = np.max(np.abs(p - p_old))
    
    return p

# Solve the PDE
p_final = solve_poisson(p, dx, dy, tolerance)

# Save the final solution to a .npy file
np.save('solution.npy', p_final)

# Visualization
X, Y = np.meshgrid(np.linspace(0, 2, nx), np.linspace(0, 1, ny))
plt.contourf(X, Y, p_final, 20, cmap='viridis')
plt.colorbar(label='Potential p(x, y)')
plt.title('Contour plot of the potential field')
plt.xlabel('x')
plt.ylabel('y')
plt.show()
```

### Explanation:
1. **Initialization**: The potential field `p` is initialized to zeros.
2. **Iterative Solver**: The function `solve_poisson` iteratively updates the potential field using the finite difference method until the maximum change between iterations is less than the specified tolerance.
3. **Boundary Conditions**: The boundary conditions are applied in each iteration:
   - Left boundary: Dirichlet condition \( p = 0 \).
   - Right boundary: Dirichlet condition \( p = y \).
   - Top and bottom boundaries: Neumann condition \( \partial p / \partial y = 0 \).
4. **Saving the Solution**: The final solution is saved to a `.npy` file.
5. **Visualization**: A contour plot of the potential field is generated to visualize the solution.

This code will solve the problem and save the final potential field to `solution.npy`.