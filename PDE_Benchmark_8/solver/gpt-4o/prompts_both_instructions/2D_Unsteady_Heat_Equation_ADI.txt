```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
alpha = 0.01  # thermal diffusivity
Q0 = 200.0  # source term strength
sigma = 0.1  # source term spread
nx, ny = 41, 41  # grid points
x_min, x_max = -1.0, 1.0
y_min, y_max = -1.0, 1.0
t_max = 3.0  # maximum time
r = 0.25  # stability parameter

# Derived parameters
dx = (x_max - x_min) / (nx - 1)
dy = (y_max - y_min) / (ny - 1)
dt = r * dx**2 / alpha
nt = int(t_max / dt)  # number of time steps

# Grid
x = np.linspace(x_min, x_max, nx)
y = np.linspace(y_min, y_max, ny)
X, Y = np.meshgrid(x, y)

# Initial condition
T = np.zeros((ny, nx))

# Source term
def source_term(x, y, t):
    return Q0 * np.exp(-(x**2 + y**2) / (2 * sigma**2))

# ADI method
for n in range(nt):
    # Intermediate step: Implicit in x, explicit in y
    T_half = np.copy(T)
    for j in range(1, ny-1):
        A = np.zeros((nx, nx))
        b = np.zeros(nx)
        for i in range(1, nx-1):
            A[i, i-1] = -0.5 * r
            A[i, i] = 1 + r
            A[i, i+1] = -0.5 * r
            b[i] = (0.5 * r * (T[i+1, j] - 2*T[i, j] + T[i-1, j]) +
                    0.5 * r * (T[i, j+1] - 2*T[i, j] + T[i, j-1]) +
                    T[i, j] + 0.5 * dt * source_term(x[i], y[j], n*dt))
        A[0, 0] = A[-1, -1] = 1  # Dirichlet BCs
        b[0] = b[-1] = 0
        T_half[:, j] = np.linalg.solve(A, b)

    # Final step: Implicit in y, explicit in x
    T_new = np.copy(T_half)
    for i in range(1, nx-1):
        A = np.zeros((ny, ny))
        b = np.zeros(ny)
        for j in range(1, ny-1):
            A[j, j-1] = -0.5 * r
            A[j, j] = 1 + r
            A[j, j+1] = -0.5 * r
            b[j] = (0.5 * r * (T_half[i+1, j] - 2*T_half[i, j] + T_half[i-1, j]) +
                    0.5 * r * (T_half[i, j+1] - 2*T_half[i, j] + T_half[i, j-1]) +
                    T_half[i, j] + 0.5 * dt * source_term(x[i], y[j], (n+0.5)*dt))
        A[0, 0] = A[-1, -1] = 1  # Dirichlet BCs
        b[0] = b[-1] = 0
        T_new[i, :] = np.linalg.solve(A, b)

    # Update temperature field
    T = T_new

# Save the final temperature field
np.save('T_final.npy', T)

# Plot the final temperature distribution
plt.contourf(X, Y, T, 20, cmap='hot')
plt.colorbar(label='Temperature (Â°C)')
plt.title('Temperature Distribution at t = {:.2f} s'.format(t_max))
plt.xlabel('x')
plt.ylabel('y')
plt.show()
```

This code solves the given PDE using the ADI method and saves the final temperature distribution as a `.npy` file. The code also includes a plot of the final temperature distribution.