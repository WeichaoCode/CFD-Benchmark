#!/usr/bin/env python3
import numpy as np

def main():
    # Domain and problem parameters
    L = 0.1              # length of the domain (m)
    phi0 = 10.0          # Dirichlet boundary at x = 0
    phiL = 100.0         # Dirichlet boundary at x = L
    Gamma = 1e-4         # diffusion coefficient (m^2/s)

    # Discretization parameters
    Nx = 101             # number of nodes
    dx = L / (Nx - 1)    # uniform grid spacing

    # Initialize coefficient matrix A and RHS vector b
    A = np.zeros((Nx, Nx))
    b = np.zeros(Nx)

    # Apply Dirichlet boundary conditions directly
    A[0, 0] = 1.0
    b[0] = phi0
    A[-1, -1] = 1.0
    b[-1] = phiL

    # Build the finite volume discretization for interior nodes
    # For steady state diffusion: Gamma*(phi[i+1] - 2*phi[i] + phi[i-1]) / dx^2 = 0
    # Cancel Gamma/dx^2 (nonzero constant) to obtain: phi[i-1] - 2*phi[i] + phi[i+1] = 0
    for i in range(1, Nx - 1):
        A[i, i - 1] = 1.0
        A[i, i]     = -2.0
        A[i, i + 1] = 1.0
        # Note: b[i] remains 0

    # Solve the linear system
    phi = np.linalg.solve(A, b)

    # Save the final 1D solution in a .npy file named 'phi.npy'
    np.save("phi.npy", phi)

if __name__ == '__main__':
    main()