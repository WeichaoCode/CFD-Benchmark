Below is the Python code to solve the given steady-state PDE problem using the Finite Volume Method (FVM) with the specified parameters and conditions. The code uses Jacobi iteration to solve the system of equations and saves the final solution to a `.npy` file.

```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
mu = 1e-3  # dynamic viscosity (PaÂ·s)
dPdz = -3.2  # pressure gradient (Pa/m)
h = 0.1  # domain height (m)
n_x = n_y = 80  # number of grid points
dx = dy = h / (n_x - 1)  # grid spacing

# Initialize the velocity field
w = np.zeros((n_x, n_y))

# Coefficients
a_E = a_W = mu * dy / dx
a_N = a_S = mu * dx / dy
a_P = a_E + a_W + a_N + a_S
S_u = dPdz * dx * dy

# Jacobi iteration parameters
tolerance = 1e-6
max_iterations = 10000

# Jacobi iteration
for iteration in range(max_iterations):
    w_old = w.copy()
    
    # Update the interior points
    for i in range(1, n_x - 1):
        for j in range(1, n_y - 1):
            w[i, j] = (a_W * w_old[i-1, j] + a_E * w_old[i+1, j] +
                       a_S * w_old[i, j-1] + a_N * w_old[i, j+1] +
                       S_u) / a_P
    
    # Check for convergence
    if np.linalg.norm(w - w_old, ord=np.inf) < tolerance:
        print(f"Converged after {iteration+1} iterations.")
        break
else:
    print("Did not converge within the maximum number of iterations.")

# Save the final solution to a .npy file
np.save('w_solution.npy', w)

# Visualize the final solution
plt.contourf(w, levels=50, cmap='viridis')
plt.colorbar(label='Velocity w (m/s)')
plt.title('Velocity Contour Plot')
plt.xlabel('x')
plt.ylabel('y')
plt.show()
```

### Explanation:
1. **Initialization**: The velocity field `w` is initialized to zero across the domain.
2. **Coefficients Calculation**: The coefficients for the finite volume method are calculated based on the given parameters.
3. **Jacobi Iteration**: The Jacobi iterative method is used to solve the system of equations. The loop continues until the solution converges within a specified tolerance or the maximum number of iterations is reached.
4. **Convergence Check**: The solution is checked for convergence using the infinity norm.
5. **Saving the Solution**: The final velocity field `w` is saved to a `.npy` file.
6. **Visualization**: A contour plot of the velocity field is generated for visualization.

This code will solve the steady-state problem and save the final solution as a 2D NumPy array in a file named `w_solution.npy`.