```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
nx, ny = 41, 41
x = np.linspace(-1, 1, nx)
y = np.linspace(-1, 1, ny)
dx = x[1] - x[0]
dy = dx  # Uniform grid
beta = dx / dy  # 1.0
alpha = 1.0
sigma = 0.1
Q0 = 200.0
r = 1.0  # Stability parameter
dt = r * dx**2 / alpha
t_max = 3.0
n_steps = int(t_max / dt)

# Create meshgrid
xx, yy = np.meshgrid(x, y, indexing='ij')

# Source term
q = Q0 * np.exp(-(xx**2 + yy**2) / (2 * sigma**2))

# Initialize temperature arrays
T_prev = np.zeros((nx, ny))
T_current = np.zeros((nx, ny))
T_next = np.zeros((nx, ny))

# Time-stepping loop
for step in range(n_steps):
    # Update interior points
    T_next[1:-1, 1:-1] = (
        2 * r * (
            T_current[2:, 1:-1] + T_current[:-2, 1:-1] +
            T_current[1:-1, 2:] + T_current[1:-1, :-2]
        ) +
        T_prev[1:-1, 1:-1] +
        2 * dt * q[1:-1, 1:-1]
    ) / (1 + 4 * r)
    
    # Enforce Dirichlet boundary conditions (T=0)
    T_next[0, :] = 0
    T_next[-1, :] = 0
    T_next[:, 0] = 0
    T_next[:, -1] = 0
    
    # Update for next time step
    T_prev, T_current, T_next = T_current, T_next, T_prev

# Save the final temperature distribution
np.save('solution.npy', T_current)

# Visualization
plt.figure(figsize=(6, 5))
plt.imshow(T_current, extent=[-1, 1, -1, 1], origin='lower', cmap='hot')
plt.colorbar(label='Temperature (Â°C)')
plt.title(f'Temperature Distribution at t = {t_max} s')
plt.xlabel('x')
plt.ylabel('y')
plt.show()
```