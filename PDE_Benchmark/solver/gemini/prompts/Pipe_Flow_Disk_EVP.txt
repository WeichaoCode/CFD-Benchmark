```python
import numpy as np
import scipy.linalg
from scipy.sparse import diags
from scipy.sparse.linalg import eig

def solve_stability(nr, kz, Re):
    """
    Solves the linearized incompressible Navier-Stokes equations in cylindrical coordinates
    for the stability of a pipe flow.

    Args:
        nr (int): Number of radial grid points.
        kz (float): Axial wavenumber.
        Re (float): Reynolds number.

    Returns:
        tuple: Eigenvalues and eigenvectors.
    """

    dr = 1.0 / (nr - 1)
    r = np.linspace(0, 1, nr)
    w0 = 1 - r**2
    dw0_dr = -2 * r

    # Create finite difference matrices
    def create_matrix(diag, lower=None, upper=None):
        diagonals = [diag]
        if lower is not None:
            diagonals.append(lower)
        if upper is not None:
            diagonals.append(upper)
        offsets = [0]
        if lower is not None:
            offsets.append(-1)
        if upper is not None:
            offsets.append(1)
        return diags(diagonals, offsets=offsets, shape=(nr, nr), format='csc')

    # First derivative matrix
    d_r = create_matrix(np.zeros(nr), lower=-1/(2*dr)*np.ones(nr-1), upper=1/(2*dr)*np.ones(nr-1))
    d_r = d_r.toarray()
    d_r[0, 0] = -3/(2*dr)
    d_r[0, 1] = 4/(2*dr)
    d_r[0, 2] = -1/(2*dr)
    d_r[-1, -1] = 3/(2*dr)
    d_r[-1, -2] = -4/(2*dr)
    d_r[-1, -3] = 1/(2*dr)
    d_r = create_matrix(d_r.diagonal(0), d_r.diagonal(-1), d_r.diagonal(1))

    # Second derivative matrix
    d2_r2 = create_matrix(np.zeros(nr), lower=np.ones(nr-1)/dr**2, upper=np.ones(nr-1)/dr**2)
    d2_r2 = d2_r2.toarray()
    for i in range(nr):
        d2_r2[i, i] = -2/dr**2
    d2_r2[0, 0] = 2/dr**2
    d2_r2[0, 1] = -5/dr**2
    d2_r2[0, 2] = 4/dr**2
    d2_r2[0, 3] = -1/dr**2
    d2_r2[-1, -1] = 2/dr**2
    d2_r2[-1, -2] = -5/dr**2
    d2_r2[-1, -3] = 4/dr**2
    d2_r2[-1, -4] = -1/dr**2
    d2_r2 = create_matrix(d2_r2.diagonal(0), d2_r2.diagonal(-1), d2_r2.diagonal(1))

    # Identity matrix
    I = np.eye(nr)

    # Construct the matrices for the eigenvalue problem
    A = np.zeros((3*nr, 3*nr), dtype=complex)
    B = np.zeros((3*nr, 3*nr), dtype=complex)

    # Continuity equation
    A[:nr, :nr] = d_r.toarray() + np.diag(1/r)
    A[:nr, nr:2*nr] = 1j * kz * I
    
    # r-momentum equation
    A[nr:2*nr, :nr] = np.diag(w0) @ (1j * kz * I)
    A[nr:2*nr, 2*nr:] = d_r.toarray()
    B[nr:2*nr, :nr] = (d2_r2.toarray() + np.diag(1/r) @ d_r.toarray() - np.diag(1/r**2) - kz**2 * I) / Re

    # z-momentum equation
    A[2*nr:, :nr] = np.diag(dw0_dr)
    A[2*nr:, nr:2*nr] = np.diag(w0) @ (1j * kz * I)
    A[2*nr:, 2*nr:] = 1j * kz * I
    B[2*nr:, nr:2*nr] = (d2_r2.toarray() + np.diag(1/r) @ d_r.toarray() - kz**2 * I) / Re

    # Apply boundary conditions
    A[nr:2*nr, :nr][0, :] = 0
    A[nr:2*nr, :nr][-1, :] = 0
    A[2*nr:, nr:2*nr][0, :] = 0
    A[2*nr:, nr:2*nr][-1, :] = 0

    B[nr:2*nr, :nr][0, :] = 0
    B[nr:2*nr, :nr][-1, :] = 0
    B[2*nr:, nr:2*nr][0, :] = 0
    B[2*nr:, nr:2*nr][-1, :] = 0

    A[nr:2*nr, 2*nr:][0, :] = 0
    A[nr:2*nr, 2*nr:][-1, :] = 0
    A[2*nr:, 2*nr:][0, :] = 0
    A[2*nr:, 2*nr:][-1, :] = 0

    B[nr:2*nr, 2*nr:][0, :] = 0
    B[nr:2*nr, 2*nr:][-1, :] = 0
    B[2*nr:, 2*nr:][0, :] = 0
    B[2*nr:, 2*nr:][-1, :] = 0

    A[nr:2*nr, nr:2*nr][0, :] = 0
    A[nr:2*nr, nr:2*nr][-1, :] = 0
    A[2*nr:, 2*nr:][0, :] = 0
    A[2*nr:, 2*nr:][-1, :] = 0

    # Solve the generalized eigenvalue problem
    eigenvalues, eigenvectors = scipy.linalg.eig(B, A)

    return eigenvalues, eigenvectors

if __name__ == "__main__":
    # Problem parameters
    nr = 50  # Number of radial grid points
    kz = 1.0  # Axial wavenumber
    Re = 1e4  # Reynolds number

    # Solve the stability problem
    eigenvalues, eigenvectors = solve_stability(nr, kz, Re)

    # Find the eigenvalue with the largest real part
    index = np.argmax(eigenvalues.real)
    s = eigenvalues[index]
    u = eigenvectors[:nr, index]
    w = eigenvectors[nr:2*nr, index]
    p = eigenvectors[2*nr:, index]

    # Save the variables
    np.save('s.npy', s)
    np.save('u.npy', u)
    np.save('w.npy', w)
    np.save('p.npy', p)
```