```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
nx, ny = 41, 41         # Number of grid points in x and y
nt = 10                 # Number of time steps
lx, ly = 2.0, 2.0       # Domain size in x and y
dx, dy = lx/(nx-1), ly/(ny-1)
rho = 1.0               # Density
nu = 0.1                # Kinematic viscosity
F = 1.0                 # External force in x-direction
dt = 0.001              # Time step size (chosen for stability)

# Initialize fields
u = np.zeros((ny, nx))
v = np.zeros((ny, nx))
p = np.zeros((ny, nx))
b = np.zeros((ny, nx))

# Pressure Poisson solver parameters
nit = 50  # Number of iterations for pressure Poisson equation

def pressure_poisson(p, b, dx, dy, nit):
    pn = np.empty_like(p)
    for q in range(nit):
        pn = p.copy()
        # Periodic boundary conditions in x
        p[1:-1,1:-1] = (((pn[1:-1,2:] + pn[1:-1,0:-2]) * dy**2 +
                          (pn[2:,1:-1] + pn[0:-2,1:-1]) * dx**2) /
                         (2 * (dx**2 + dy**2)) -
                         dx**2 * dy**2 / (2 * (dx**2 + dy**2)) * b[1:-1,1:-1])

        # Periodic BC Pressure @ x = 0 and x = 2
        p[:,0] = p[:,-2]
        p[:, -1] = p[:,1]

        # Neumann BC Pressure @ y = 0 and y = 2 (dp/dy = 0)
        p[0,:] = p[1,:]
        p[-1,:] = p[-2,:]
    return p

# Time-stepping loop
for n in range(nt):
    un = u.copy()
    vn = v.copy()
    
    # Build the source term for pressure Poisson equation
    b[1:-1,1:-1] = (rho * (1/dt * 
                   ((un[1:-1,2:] - un[1:-1,0:-2]) / (2*dx) + 
                    (vn[2:,1:-1] - vn[0:-2,1:-1]) / (2*dy)) ) -
                   ((un[1:-1,2:] - un[1:-1,0:-2]) / (2*dx))**2 -
                   2 * ((un[2:,1:-1] - un[0:-2,1:-1]) / (2*dy) *
                        (vn[1:-1,2:] - vn[1:-1,0:-2]) / (2*dx)) -
                   ((vn[2:,1:-1] - vn[0:-2,1:-1]) / (2*dy))**2 )
    
    # Solve pressure Poisson equation
    p = pressure_poisson(p, b, dx, dy, nit)
    
    # Update velocity fields
    u[1:-1,1:-1] = (un[1:-1,1:-1] -
                    un[1:-1,1:-1] * dt / dx * (un[1:-1,1:-1] - un[1:-1,0:-2]) -
                    vn[1:-1,1:-1] * dt / dy * (un[1:-1,1:-1] - un[0:-2,1:-1]) -
                    dt / (2 * rho * dx) * (p[1:-1,2:] - p[1:-1,0:-2]) +
                    nu * (dt / dx**2 * (un[1:-1,2:] - 2*un[1:-1,1:-1] + un[1:-1,0:-2]) +
                          dt / dy**2 * (un[2:,1:-1] - 2*un[1:-1,1:-1] + un[0:-2,1:-1])) +
                    F * dt)

    v[1:-1,1:-1] = (vn[1:-1,1:-1] -
                    un[1:-1,1:-1] * dt / dx * (vn[1:-1,1:-1] - vn[1:-1,0:-2]) -
                    vn[1:-1,1:-1] * dt / dy * (vn[1:-1,1:-1] - vn[0:-2,1:-1]) -
                    dt / (2 * rho * dy) * (p[2:,1:-1] - p[0:-2,1:-1]) +
                    nu * (dt / dx**2 * (vn[1:-1,2:] - 2*vn[1:-1,1:-1] + vn[1:-1,0:-2]) +
                          dt / dy**2 * (vn[2:,1:-1] - 2*vn[1:-1,1:-1] + vn[0:-2,1:-1])))
    
    # Apply periodic boundary conditions in x
    u[:,0] = u[:,-2]
    u[:,-1] = u[:,1]
    v[:,0] = v[:,-2]
    v[:,-1] = v[:,1]
    p[:,0] = p[:,-2]
    p[:,-1] = p[:,1]
    
    # Apply no-slip boundary conditions at y = 0 and y = 2
    u[0,:] = 0
    u[-1,:] = 0
    v[0,:] = 0
    v[-1,:] = 0
    # Pressure Neumann BC already handled in pressure_poisson function

# Create a mesh for plotting
X, Y = np.meshgrid(np.linspace(0, lx, nx), np.linspace(0, ly, ny))

# Plot the velocity field
plt.figure(figsize=(8,6))
plt.quiver(X, Y, u, v)
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Velocity Field at Final Time Step')
plt.show()

# Save the final velocity and pressure fields
np.save('u.npy', u)
np.save('v.npy', v)
np.save('p.npy', p)
```