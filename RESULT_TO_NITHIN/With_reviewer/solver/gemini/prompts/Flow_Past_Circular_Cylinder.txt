```python
import numpy as np

# Parameters
r_inner = 0.5
r_outer = 10.0
v_inf = 1.0
nu = 0.005
Nr = 50
Ntheta = 100
r = np.linspace(r_inner, r_outer, Nr)
theta = np.linspace(0, 2 * np.pi, Ntheta)
dr = r[1] - r[0]
dtheta = theta[1] - theta[0]
dt = 0.001
T = 1

# Initialize variables
psi = np.zeros((Nr, Ntheta))
omega = np.zeros((Nr, Ntheta))
u_r = np.zeros((Nr, Ntheta))
u_theta = np.zeros((Nr, Ntheta))

# Boundary conditions
psi[0, :] = 20.0
omega[0, :] = 2 * (psi[1, :] - psi[0, :]) / dr**2
psi[-1, :] = v_inf * r[-1] * np.sin(theta) + 20.0
omega[-1, :] = 0.0

# Initial conditions
psi[:, :] = 0.0
omega[:, :] = 0.0

# Time loop
t = 0.0
while t < T:
    # Calculate velocity components
    for i in range(Nr):
        for j in range(Ntheta):
            u_r[i, j] = (psi[i, (j + 1) % Ntheta] - psi[i, (j - 1) % Ntheta]) / (2 * r[i] * dtheta)
            u_theta[i, j] = -(psi[min(i + 1, Nr - 1), j] - psi[max(i - 1, 0), j]) / (2 * dr)

    # Vorticity transport equation (explicit)
    omega_new = np.zeros((Nr, Ntheta))
    for i in range(Nr):
        for j in range(Ntheta):
            domega_dt = (
                -u_r[i, j] * (omega[min(i + 1, Nr - 1), j] - omega[max(i - 1, 0), j]) / (2 * dr)
                - u_theta[i, j] / r[i] * (omega[i, (j + 1) % Ntheta] - omega[i, (j - 1) % Ntheta]) / (2 * dtheta)
                + nu * ((omega[min(i + 1, Nr - 1), j] - 2 * omega[i, j] + omega[max(i - 1, 0), j]) / dr**2
                        + (omega[i, (j + 1) % Ntheta] - 2 * omega[i, j] + omega[i, (j - 1) % Ntheta]) / (r[i]**2 * dtheta**2)
                        + (omega[min(i + 1, Nr - 1), j] - omega[max(i - 1, 0), j]) / (r[i] * 2 * dr))
            )
            omega_new[i, j] = omega[i, j] + dt * domega_dt

    # Boundary conditions for omega
    omega_new[0, :] = 2 * (psi[1, :] - psi[0, :]) / dr**2
    omega_new[-1, :] = 0.0

    # Periodic boundary condition for omega
    for i in range(Nr):
        omega_new[i, 0] = omega_new[i, Ntheta-1]

    omega = omega_new.copy()

    # Poisson equation (iterative)
    psi_new = np.zeros((Nr, Ntheta))
    for iter in range(50):
        for i in range(1, Nr - 1):
            for j in range(Ntheta):
                psi_new[i, j] = 0.25 * (
                    psi[min(i + 1, Nr - 1), j] + psi[max(i - 1, 0), j] + psi[i, (j + 1) % Ntheta] + psi[i, (j - 1) % Ntheta]
                    + dr**2 * omega[i, j]
                )

        # Boundary conditions for psi
        psi_new[0, :] = 20.0
        psi_new[-1, :] = v_inf * r[-1] * np.sin(theta) + 20.0

        # Periodic boundary condition for psi
        for i in range(Nr):
            psi_new[i, 0] = psi_new[i, Ntheta-1]

        psi = psi_new.copy()

    t += dt

np.save('psi.npy', psi)
np.save('omega.npy', omega)
```