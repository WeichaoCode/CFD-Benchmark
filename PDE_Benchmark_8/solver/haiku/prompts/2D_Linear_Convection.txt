```python
import numpy as np
import matplotlib.pyplot as plt

# Problem Parameters
Lx, Ly = 2.0, 2.0  # Domain size
nx, ny = 100, 100  # Grid points
nt = 500  # Time steps
c = 1.0  # Convection speed
dx = Lx / (nx - 1)
dy = Ly / (ny - 1)
dt = 0.001  # Time step size

# Initialize solution array
u = np.ones((ny, nx))

# Initial condition
x = np.linspace(0, Lx, nx)
y = np.linspace(0, Ly, ny)
X, Y = np.meshgrid(x, y)

# Initial condition specification
initial_mask = ((X >= 0.5) & (X <= 1.0) & 
                (Y >= 0.5) & (Y <= 1.0))
u[initial_mask] = 2.0

# Time-stepping using Lax-Wendroff method
for n in range(nt):
    # Create copy of previous solution
    un = u.copy()
    
    # Interior points update
    u[1:-1, 1:-1] = un[1:-1, 1:-1] - \
        0.5 * c * dt/dx * (un[1:-1, 2:] - un[1:-1, :-2]) - \
        0.5 * c * dt/dy * (un[2:, 1:-1] - un[:-2, 1:-1]) + \
        0.5 * (c*dt/dx)**2 * (un[1:-1, 2:] - 2*un[1:-1, 1:-1] + un[1:-1, :-2]) + \
        0.5 * (c*dt/dy)**2 * (un[2:, 1:-1] - 2*un[1:-1, 1:-1] + un[:-2, 1:-1])
    
    # Boundary conditions
    u[0, :] = 1.0   # Bottom boundary
    u[-1, :] = 1.0  # Top boundary
    u[:, 0] = 1.0   # Left boundary
    u[:, -1] = 1.0  # Right boundary

# Save final solution
np.save('u.npy', u)
```