Below is the Python code to solve the given 2D convection problem using the finite difference method. The code computes the solution at the final time step and saves it as a `.npy` file.

```python
import numpy as np

# Parameters
nx, ny = 81, 81
nt = 100
c = 1.0
sigma = 0.2
dx = dy = 2.0 / (nx - 1)
dt = sigma * min(dx, dy) / c

# Initialize the solution array
u = np.ones((ny, nx))

# Initial conditions
u[int(0.5 / dy):int(1 / dy + 1), int(0.5 / dx):int(1 / dx + 1)] = 2

# Time-stepping loop
for n in range(nt):
    un = u.copy()
    u[1:, 1:] = (un[1:, 1:] - 
                 c * dt / dx * (un[1:, 1:] - un[1:, :-1]) - 
                 c * dt / dy * (un[1:, 1:] - un[:-1, 1:]))
    
    # Apply Dirichlet boundary conditions
    u[0, :] = 1
    u[-1, :] = 1
    u[:, 0] = 1
    u[:, -1] = 1

# Save the final solution
np.save('final_solution.npy', u)
```

### Explanation:
- **Initialization**: The solution array `u` is initialized to 1 everywhere, with a region set to 2 according to the initial conditions.
- **Time-stepping**: The loop iterates over the number of time steps `nt`, updating the solution using the finite difference method for the convection equation.
- **Boundary Conditions**: Dirichlet boundary conditions are applied at each time step to maintain the specified values at the boundaries.
- **Saving the Solution**: The final solution is saved as a `.npy` file using NumPy's `save` function. The file `final_solution.npy` will contain the 2D array representing the solution at the final time step.