```python
import numpy as np

# Parameters
c = 1.0
nx = ny = 81
lx = ly = 2.0
dx = lx / (nx - 1)
dy = ly / (ny - 1)
sigma = 0.2
dt = sigma * min(dx, dy) / c
nt = 100

# Create grid
x = np.linspace(0, lx, nx)
y = np.linspace(0, ly, ny)

# Initialize u
u = np.ones((ny, nx))
# Set u=2 for 0.5 <= x <=1 and 0.5 <= y <=1
u_initial_region = np.where((x >= 0.5) & (x <= 1.0) & (y[:, None] >= 0.5) & (y[:, None] <= 1.0))
u[u_initial_region] = 2.0

# Time stepping
for _ in range(nt):
    u_new = u.copy()
    u_new[1:,1:] = u[1:,1:] - c * dt / dx * (u[1:,1:] - u[1:,:-1]) - c * dt / dy * (u[1:,1:] - u[:-1,1:])
    # Apply Dirichlet boundary conditions
    u_new[0, :] = 1.0
    u_new[-1, :] = 1.0
    u_new[:, 0] = 1.0
    u_new[:, -1] = 1.0
    u = u_new

# Save the final solution
np.save('u.npy', u)
```