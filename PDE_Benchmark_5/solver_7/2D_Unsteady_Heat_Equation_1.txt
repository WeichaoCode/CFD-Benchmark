Apologies for the error in the previous code. It seems like there was a mistake with the naming of time-related parameters. Let's correct that. Below is a revised Python code using the finite difference method to solve this unsteady, two-dimensional heat equation.

```python
import numpy as np
import matplotlib.pyplot as plt

# Constants
alpha = 1
Q_0 = 200
sigma = 0.1
dt = 0.01 # An arbitrary small time step
max_time = 0.5 # Arbitrary final time

# Spatial discretization
nx, ny = 100, 100
x = np.linspace(-1, 1, nx)
y = np.linspace(-1, 1, ny)
dx = x[1] - x[0]
dy = y[1] - y[0]

# Make sure the time step meets the CFL condition
dt = min(0.25*dx*dx/alpha, 0.25*dy*dy/alpha)

# Initialize solution: the initial condition.
T = np.zeros((nx, ny))

# Heat source
def q_source(x, y):
    return Q_0 * np.exp(- (x**2 + y**2) / (2*sigma**2))

q = q_source(*np.meshgrid(x, y, indexing='ij'))

def solve_heat_eq(T, dt):
    for _ in np.arange(0, max_time, dt):
        T_new = T + dt*( alpha*(np.roll(T, -1, 0) - 2*T + np.roll(T, 1, 0))/dx/dx
                         + alpha*(np.roll(T, -1, 1) - 2*T + np.roll(T, 1, 1))/dy/dy
                         + q)
        T_new[0] = T_new[-1] = 0 # Boundary condition
        T_new[:, 0] = T_new[:, -1] = 0 # Boundary condition
        T = T_new
    return T

T = solve_heat_eq(T, dt)

# Creating the x and y dimensions
X, Y = np.meshgrid(x, y)

plt.figure()
plt.contourf(X, Y, T, cmap='hot')
plt.title('Heat equation solution')
plt.colorbar(label='Temperature (\u00b0C)')
plt.show()
```
This script will solve the equation over the defined grid space, and then plot a contour map of the final temperature distribution.

This code assumes that the temperature is initially zero everywhere in the domain, and that the boundaries are held at zero temperature throughout. The heat source `q` remains constant through all time.

One important note is the CFL condition, which requires the time step `dt` to be proportional to `dx^2` and `dy^2`. This is enforced in the code by choosing `dt` to be the minimum of `0.25*dx*dx/alpha` and `0.25*dy*dy/alpha`.