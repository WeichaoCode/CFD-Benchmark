```python
import numpy as np

# Parameters
Q0 = 200.0  # Â°C/s
sigma = 0.1
alpha = 0.01  # Thermal diffusivity, assumed value
nx, ny = 41, 41
x = np.linspace(-1, 1, nx)
y = np.linspace(-1, 1, ny)
dx = x[1] - x[0]
dy = y[1] - y[0]
r = 0.25
dt = r * dx**2 / alpha
t_max = 3.0
nt = int(t_max / dt)

# Initialize temperature field
T = np.zeros((ny, nx))

# Source term
X, Y = np.meshgrid(x, y)
q = Q0 * np.exp(-(X**2 + Y**2) / (2 * sigma**2)) * dt

# Coefficients for ADI
rx = alpha * dt / (2 * dx**2)
ry = alpha * dt / (2 * dy**2)

# Tridiagonal coefficients for x-direction
a_x = -rx * np.ones(nx-2)
b_x = (1 + 2*rx) * np.ones(nx-2)
c_x = -rx * np.ones(nx-2)

# Tridiagonal coefficients for y-direction
a_y = -ry * np.ones(ny-2)
b_y = (1 + 2*ry) * np.ones(ny-2)
c_y = -ry * np.ones(ny-2)

def thomas(a, b, c, d):
    nf = len(d) 
    ac, bc, cc, dc = map(np.array, (a, b, c, d)) 
    for it in range(1, nf):
        mc = ac[it-1]/bc[it-1]
        bc[it] = bc[it] - mc * cc[it-1] 
        dc[it] = dc[it] - mc * dc[it-1]
    xc = bc
    xc[-1] = dc[-1] / bc[-1]
    for il in range(nf-2, -1, -1):
        xc[il] = (dc[il] - cc[il] * xc[il+1]) / bc[il]
    return xc

for n in range(nt):
    # Half step: implicit in x, explicit in y
    T_half = np.copy(T)
    for j in range(1, ny-1):
        d = ry * T[1:-1, j-1] + (1 - 2*ry) * T[1:-1, j] + ry * T[1:-1, j+1] + q[1:-1, j]
        T_half[1:-1, j] = thomas(a_x, b_x, c_x, d)
    # Apply boundary conditions
    T_half[0, :] = 0
    T_half[-1, :] = 0
    T_half[:, 0] = 0
    T_half[:, -1] = 0

    # Half step: implicit in y, explicit in x
    T_new = np.copy(T_half)
    for i in range(1, nx-1):
        d = rx * T_half[i-1,1:-1] + (1 - 2*rx) * T_half[i,1:-1] + rx * T_half[i+1,1:-1] + q[i,1:-1]
        T_new[i,1:-1] = thomas(a_y, b_y, c_y, d)
    # Apply boundary conditions
    T_new[0, :] = 0
    T_new[-1, :] = 0
    T_new[:, 0] = 0
    T_new[:, -1] = 0

    T = T_new

# Save the final temperature field
np.save('T.npy', T)
```